This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-12T19:30:37.520Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    _build_release.yml
    gh-pages.yml
    release.yml
public/
  index.html
  manifest.json
  port_logo.svg
  robots.txt
src/
  assets/
    images/
      back.svg
      check_active.svg
      check.svg
      close.svg
      delete.svg
      facebook.svg
      forward.svg
      instagram.svg
      logo.svg
      radio_active.svg
      radio.svg
      spinner.svg
      twitter.svg
      undo.svg
      youtube.svg
    lottie/
      spinner-dark.json
      spinner-light.json
      spinner-primary.json
  framework/
    processing/
      py/
        port/
          api/
            assets.py
            commands.py
            props.py
          assets/
            hello_world.txt
          __init__.py
          main.py
          script.py
        poetry.lock
        pyproject.toml
      py_worker.js
      worker_engine.ts
    types/
      commands.ts
      elements.ts
      modules.ts
      pages.ts
      prompts.ts
    visualisation/
      react/
        ui/
          elements/
            bullet.tsx
            button.tsx
            check_box.tsx
            header.tsx
            instructions.tsx
            page_icon.tsx
            pagination.tsx
            progress_bar.tsx
            question_multiple_choice_checkbox.tsx
            question_multiple_choice.tsx
            question_open.tsx
            radio_item.tsx
            search_bar.tsx
            spinner.tsx
            table_container.tsx
            table_items.tsx
            table.tsx
            text.tsx
            zoom_icons.tsx
          hooks/
            useUnloadWarning.tsx
          pages/
            templates/
              footer.tsx
              page.tsx
            donation_page.tsx
            end_page.tsx
            error_page.tsx
          prompts/
            confirm.tsx
            consent_form.tsx
            file_input_multiple.tsx
            file_input.tsx
            progress.tsx
            questionnaire.tsx
            radio_input.tsx
          visualization_plugin/
            figures/
              common_stopwords.ts
              recharts_graph.tsx
              visx_wordcloud.tsx
            ui/
              loader.tsx
            visualizationDataFunctions/
              prepareChartData.ts
              prepareTextData.ts
              useVisualizationData.tsx
              util.ts
              visualizationDataWorker.ts
            figure.tsx
            translate.ts
            types.ts
            zoom_icons.tsx
        engine.tsx
        factory.tsx
        main.tsx
    assembly.ts
    command_router.ts
    custom.d.ts
    helpers.ts
    styles.css
    text_bundle.ts
    translator.ts
  test/
    visualisationEngine.test.tsx
  fake_bridge.ts
  fonts.css
  index.tsx
  live_bridge.ts
  setupTests.ts
.earthlyignore
.flake8
.gitignore
.tool-versions
CHANGELOG.md
CONTRIBUTING.md
LICENSE
package.json
postcss.config.js
README.md
release.sh
tailwind.config.js
tsconfig.json
tsconfig.prod.json

================================================================
Repository Files
================================================================

================
File: .github/workflows/_build_release.yml
================
on:
  workflow_call:
    outputs:
      archive:
        description: "The name of the archive (ZIP)"
        value: ${{jobs.release.outputs.archive}}

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      MIX_ENV: prod
    outputs:
      archive: ${{ steps.tag.outputs.tag }}.zip
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Tag name
        id: tag
        run: echo "name=tag::v$(date +%F)_${{github.run_number}}" >> $GITHUB_OUTPUT

      - uses: earthly/actions-setup@v1
        with:
          version: v0.7.8

      - name: Build release
        run: earthly +release --release_tag=${{steps.tag.outputs.tag}}

================
File: .github/workflows/gh-pages.yml
================
name: Build and Deploy to GitHub Pages

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REACT_APP_BUILD: standalone
      NODE_ENV: development

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: npm i && pip3 install poetry

      - name: Build release
        run: npm run release

      - name: Unpack release
        run: |
          RELEASE_FILE=$(ls releases/*.zip | head -n 1)
          unzip -o "$RELEASE_FILE" -d build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build

================
File: .github/workflows/release.yml
================
name: Release

on: workflow_dispatch

jobs:
  build_release:
    uses: ./.github/workflows/_build_release.yml

  tagged_release:
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ needs.build_release.outputs.archive }}"
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            ${{ needs.release.outputs.archive }}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/port_logo.svg
================
<svg width="124" height="48" viewBox="0 0 124 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.17188 36C2.06731 36 1.17188 35.1046 1.17188 34V22C1.17188 17.0294 5.20131 13 10.1719 13C12.022 13 13.7418 13.5583 15.1719 14.5155V10C15.1719 5.02944 19.2013 1 24.1719 1C29.1424 1 33.1719 5.02944 33.1719 10V14.5155C34.602 13.5583 36.3217 13 38.1719 13C43.1424 13 47.1719 17.0294 47.1719 22V34C47.1719 35.1046 46.2764 36 45.1719 36C44.0673 36 43.1719 35.1046 43.1719 34C43.1719 31.2386 40.9333 29 38.1719 29C35.4104 29 33.1719 31.2386 33.1719 34V46C33.1719 47.1046 32.2764 48 31.1719 48C30.0673 48 29.1719 47.1046 29.1719 46C29.1719 43.2386 26.9333 41 24.1719 41C21.4105 41 19.1719 43.2386 19.1719 46C19.1719 47.1046 18.2764 48 17.1719 48C16.0673 48 15.1719 47.1046 15.1719 46V34C15.1719 31.2386 12.9333 29 10.1719 29C7.41045 29 5.17188 31.2386 5.17188 34C5.17188 35.1046 4.27644 36 3.17188 36ZM5.17188 29.101C6.44239 27.8045 8.21319 27 10.1719 27C14.0379 27 17.1719 30.134 17.1719 34V46C17.1719 44.0927 17.9347 42.3636 19.1719 41.101C20.4424 39.8045 22.2132 39 24.1719 39C26.1306 39 27.9014 39.8045 29.1719 41.101C30.4091 42.3636 31.1719 44.0927 31.1719 46V34C31.1719 30.134 34.3059 27 38.1719 27C40.1306 27 41.9014 27.8045 43.1719 29.101C44.4091 30.3636 45.1719 32.0927 45.1719 34V22C45.1719 18.134 42.0379 15 38.1719 15C36.2132 15 34.4424 15.8045 33.1719 17.101C31.9347 18.3636 31.1719 20.0927 31.1719 22V10C31.1719 6.13401 28.0379 3 24.1719 3C20.3059 3 17.1719 6.13401 17.1719 10V22C17.1719 20.0927 16.4091 18.3636 15.1719 17.101C13.9014 15.8045 12.1306 15 10.1719 15C6.30588 15 3.17188 18.134 3.17188 22V34C3.17188 32.0927 3.93469 30.3636 5.17188 29.101Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.1719 3C20.3059 3 17.1719 6.13401 17.1719 10V22C17.1719 18.134 20.3059 15 24.1719 15C28.0379 15 31.1719 18.134 31.1719 22V10C31.1719 6.13401 28.0379 3 24.1719 3Z" fill="#4272EF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.1719 27C20.3059 27 17.1719 30.134 17.1719 34V46C17.1719 42.134 20.3059 39 24.1719 39C28.0379 39 31.1719 42.134 31.1719 46V34C31.1719 30.134 28.0379 27 24.1719 27Z" fill="#FF5E5E"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M38.1719 15C34.3059 15 31.1719 18.134 31.1719 22V34C31.1719 30.134 34.3059 27 38.1719 27C42.0379 27 45.1719 30.134 45.1719 34V22C45.1719 18.134 42.0379 15 38.1719 15Z" fill="#FFCF60"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.1719 15C20.3059 15 17.1719 18.134 17.1719 22V34C17.1719 30.134 20.3059 27 24.1719 27C28.0379 27 31.1719 30.134 31.1719 34V22C31.1719 18.134 28.0379 15 24.1719 15Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M10.1719 15C6.30588 15 3.17188 18.134 3.17188 22V34C3.17188 30.134 6.30588 27 10.1719 27C14.0379 27 17.1719 30.134 17.1719 34V22C17.1719 18.134 14.0379 15 10.1719 15Z" fill="#222222"/>
<path d="M76.4531 18.5156C76.4531 16.2812 75.6875 14.5625 74.1719 13.375C72.6406 12.1875 70.5781 11.5938 68 11.5938H60.6719C60.2188 11.5938 60 11.8125 60 12.2656V33.3281C60 33.7812 60.2188 34 60.6719 34H64.3281C64.7812 34 65 33.7812 65 33.3281V25.5781H68C70.5469 25.5781 72.5938 24.9531 74.1406 23.7031C75.6875 22.4688 76.4531 20.7344 76.4531 18.5156ZM65 21.5469V15.625H67.9375C70.0938 15.6406 71.1719 16.625 71.1719 18.6094C71.1719 20.7344 70.0469 21.5469 68 21.5469H65Z" fill="black"/>
<path d="M86.4375 34.3125C89.0469 34.3125 91.0625 33.5938 92.5 32.1406C93.9375 30.6875 94.6562 28.7031 94.6562 26.1562C94.6562 23.625 93.9375 21.625 92.5 20.1562C91.0625 18.7031 89.0469 17.9688 86.4375 17.9688C83.8125 17.9688 81.7656 18.7031 80.3125 20.1562C78.8438 21.625 78.1094 23.625 78.1094 26.1562C78.1094 28.7031 78.8438 30.6875 80.3125 32.1406C81.7656 33.5938 83.8125 34.3125 86.4375 34.3125ZM86.4375 21.7812C88.6094 21.7812 89.6875 23.4688 89.6875 26.1562C89.6875 28.8438 88.5625 30.5156 86.4375 30.5156C84.2031 30.5156 83.0781 29.0625 83.0781 26.1562C83.0781 24.8281 83.375 23.7656 83.9688 22.9688C84.5469 22.1719 85.375 21.7812 86.4375 21.7812Z" fill="black"/>
<path d="M102.094 34C102.422 34 102.766 33.6562 102.766 33.3281V24.375C102.766 22.9531 103.453 22.0938 104.469 22.0938C104.938 22.0938 105.453 22.3125 106.031 22.7344C106.281 22.9531 106.547 22.9219 106.828 22.6406L109.109 20.375C109.359 20.1094 109.328 19.625 109.031 19.375C107.828 18.4375 106.688 17.9688 105.578 17.9688C104.875 17.9688 104.25 18.1094 103.703 18.4062C103.156 18.7031 102.75 19.0312 102.516 19.375L101.969 18.5781C101.797 18.375 101.547 18.2812 101.203 18.2812H98.6406C98.2812 18.2812 97.9688 18.625 97.9688 18.9531V33.3281C97.9688 33.6562 98.3125 34 98.6406 34H102.094Z" fill="black"/>
<path d="M120.844 22.3125C121.297 22.3125 121.516 22.0938 121.516 21.6406V18.9531C121.516 18.5 121.297 18.2812 120.844 18.2812H118.219V14.1875C118.219 13.8594 117.875 13.5156 117.547 13.5156H114.078C113.75 13.5156 113.406 13.8594 113.406 14.1875V18.2812H111.328C110.953 18.2812 110.656 18.5781 110.656 18.9531V21.6406C110.656 22.0312 110.953 22.3125 111.328 22.3125H113.406V28.2969C113.406 30.1875 114.031 31.6094 115.266 32.5625C116.5 33.5156 118.094 34 120.031 34H120.844C121.219 34 121.516 33.7031 121.516 33.3281V30.8594C121.516 30.4062 121.297 30.1875 120.844 30.1875H120.094C119.031 30.1875 118.219 29.5625 118.219 28.2969V22.3125H120.844Z" fill="black"/>
</svg>

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/assets/images/back.svg
================
<svg width="8" height="13" viewBox="0 0 8 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.41 11.09L2.83 6.5L7.41 1.91L6 0.5L0 6.5L6 12.5L7.41 11.09Z" fill="#4272EF"/>
</svg>

================
File: src/assets/images/check_active.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 4C0 1.79086 1.79086 0 4 0H20C22.2091 0 24 1.79086 24 4V20C24 22.2091 22.2091 24 20 24H4C1.79086 24 0 22.2091 0 20V4Z" fill="#4272EF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.59985 18L3.59985 12.2308L5.27985 10.6154L9.59985 14.7692L18.7199 6L20.3999 7.61538L9.59985 18Z" fill="white"/>
</svg>

================
File: src/assets/images/check.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1" y="1" width="22" height="22" rx="3" stroke="#CCCCCC" stroke-width="2"/>
</svg>

================
File: src/assets/images/close.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z" fill="#4272EF"/>
</svg>

================
File: src/assets/images/delete.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.5 7L6.5 21H17.5L18.5 7" stroke="#DB1E1E" stroke-width="2"/>
<mask id="path-2-inside-1_1050_57" fill="white">
<rect x="2" y="3" width="20" height="5" rx="1"/>
</mask>
<rect x="2" y="3" width="20" height="5" rx="1" stroke="#DB1E1E" stroke-width="4" mask="url(#path-2-inside-1_1050_57)"/>
<mask id="path-3-inside-2_1050_57" fill="white">
<path d="M9 2C9 1.44772 9.44772 1 10 1H14C14.5523 1 15 1.44772 15 2V4H9V2Z"/>
</mask>
<path d="M9 2C9 1.44772 9.44772 1 10 1H14C14.5523 1 15 1.44772 15 2V4H9V2Z" stroke="#DB1E1E" stroke-width="3" stroke-linejoin="round" mask="url(#path-3-inside-2_1050_57)"/>
</svg>

================
File: src/assets/images/facebook.svg
================
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M21 41.8C12.5 40.3 6 32.9 6 24C6 14.1 14.1 6 24 6C33.9 6 42 14.1 42 24C42 32.9 35.5 40.3 27 41.8L26 41H22L21 41.8Z" fill="url(#paint0_linear_5906_133319)"/>
<path d="M31 29L31.8 24H27V20.5C27 19.1 27.5 18 29.7 18H32V13.4C30.7 13.2 29.3 13 28 13C23.9 13 21 15.5 21 20V24H16.5V29H21V41.7C22 41.9 23 42 24 42C25 42 26 41.9 27 41.7V29H31Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear_5906_133319" x1="24" y1="40.754" x2="24" y2="6" gradientUnits="userSpaceOnUse">
<stop stop-color="#0062E0"/>
<stop offset="1" stop-color="#19AFFF"/>
</linearGradient>
</defs>
</svg>

================
File: src/assets/images/forward.svg
================
<svg width="8" height="13" viewBox="0 0 8 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.190186 11.34L4.77019 6.75L0.190186 2.16L1.60019 0.75L7.60019 6.75L1.60019 12.75L0.190186 11.34Z" fill="#4272EF"/>
</svg>

================
File: src/assets/images/instagram.svg
================
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M24.0004 6.54541C19.2602 6.54541 18.6653 6.56614 16.8035 6.65087C14.9454 6.73596 13.6771 7.03014 12.5673 7.46177C11.4193 7.90759 10.4455 8.50396 9.47538 9.4745C8.5045 10.4447 7.90815 11.4185 7.46089 12.5661C7.02818 13.6763 6.73364 14.945 6.65001 16.8025C6.56674 18.6643 6.54492 19.2596 6.54492 24C6.54492 28.7403 6.56601 29.3334 6.65037 31.1952C6.73583 33.0534 7.03 34.3218 7.46126 35.4316C7.90743 36.5796 8.50377 37.5534 9.47429 38.5236C10.4441 39.4945 11.4179 40.0923 12.5651 40.5381C13.6756 40.9698 14.9443 41.264 16.8021 41.349C18.6638 41.4338 19.2584 41.4545 23.9982 41.4545C28.7388 41.4545 29.3319 41.4338 31.1936 41.349C33.0518 41.264 34.3215 40.9698 35.432 40.5381C36.5796 40.0923 37.552 39.4945 38.5218 38.5236C39.4927 37.5534 40.089 36.5796 40.5363 35.432C40.9653 34.3218 41.2599 33.053 41.3471 31.1956C41.4308 29.3338 41.4526 28.7403 41.4526 24C41.4526 19.2596 41.4308 18.6647 41.3471 16.8029C41.2599 14.9447 40.9653 13.6763 40.5363 12.5665C40.089 11.4185 39.4927 10.4447 38.5218 9.4745C37.5509 8.50359 36.58 7.90723 35.431 7.46177C34.3183 7.03014 33.0492 6.73596 31.1911 6.65087C29.3293 6.56614 28.7366 6.54541 23.9949 6.54541H24.0004ZM22.4346 9.69086C22.8993 9.69014 23.4179 9.69086 24.0004 9.69086C28.6606 9.69086 29.213 9.70759 31.0533 9.79123C32.755 9.86905 33.6786 10.1534 34.2939 10.3923C35.1084 10.7087 35.6891 11.0869 36.2997 11.6978C36.9105 12.3087 37.2887 12.8905 37.6058 13.705C37.8447 14.3196 38.1294 15.2432 38.2069 16.945C38.2905 18.785 38.3087 19.3378 38.3087 23.996C38.3087 28.6541 38.2905 29.2069 38.2069 31.0469C38.1291 32.7487 37.8447 33.6723 37.6058 34.2869C37.2894 35.1014 36.9105 35.6814 36.2997 36.292C35.6888 36.9029 35.1088 37.281 34.2939 37.5974C33.6794 37.8374 32.755 38.121 31.0533 38.1989C29.2133 38.2825 28.6606 38.3007 24.0004 38.3007C19.3398 38.3007 18.7875 38.2825 16.9475 38.1989C15.2457 38.1203 14.3221 37.836 13.7065 37.597C12.892 37.2807 12.3102 36.9025 11.6993 36.2916C11.0884 35.6807 10.7103 35.1003 10.3932 34.2854C10.1543 33.6709 9.86955 32.7472 9.7921 31.0454C9.70846 29.2054 9.69174 28.6527 9.69174 23.9916C9.69174 19.3305 9.70846 18.7807 9.7921 16.9407C9.86991 15.2389 10.1543 14.3152 10.3932 13.7C10.7095 12.8854 11.0884 12.3036 11.6993 11.6927C12.3102 11.0818 12.892 10.7036 13.7065 10.3865C14.3218 10.1465 15.2457 9.86286 16.9475 9.78468C18.5576 9.71196 19.1816 9.69014 22.4346 9.6865V9.69086ZM33.3172 12.589C32.1609 12.589 31.2227 13.5261 31.2227 14.6829C31.2227 15.8392 32.1609 16.7774 33.3172 16.7774C34.4735 16.7774 35.4117 15.8392 35.4117 14.6829C35.4117 13.5265 34.4735 12.5883 33.3172 12.5883V12.589ZM24.0004 15.0363C19.0504 15.0363 15.037 19.0498 15.037 24C15.037 28.9501 19.0504 32.9618 24.0004 32.9618C28.9504 32.9618 32.9623 28.9501 32.9623 24C32.9623 19.0498 28.9501 15.0363 24 15.0363H24.0004ZM24.0004 18.1818C27.2134 18.1818 29.8184 20.7865 29.8184 24C29.8184 27.213 27.2134 29.8181 24.0004 29.8181C20.787 29.8181 18.1824 27.213 18.1824 24C18.1824 20.7865 20.787 18.1818 24.0004 18.1818V18.1818Z" fill="url(#paint0_radial_5906_133338)"/>
<path d="M24.0004 6.54541C19.2602 6.54541 18.6653 6.56614 16.8035 6.65087C14.9454 6.73596 13.6771 7.03014 12.5673 7.46177C11.4193 7.90759 10.4455 8.50396 9.47538 9.4745C8.5045 10.4447 7.90815 11.4185 7.46089 12.5661C7.02818 13.6763 6.73364 14.945 6.65001 16.8025C6.56674 18.6643 6.54492 19.2596 6.54492 24C6.54492 28.7403 6.56601 29.3334 6.65037 31.1952C6.73583 33.0534 7.03 34.3218 7.46126 35.4316C7.90743 36.5796 8.50377 37.5534 9.47429 38.5236C10.4441 39.4945 11.4179 40.0923 12.5651 40.5381C13.6756 40.9698 14.9443 41.264 16.8021 41.349C18.6638 41.4338 19.2584 41.4545 23.9982 41.4545C28.7388 41.4545 29.3319 41.4338 31.1936 41.349C33.0518 41.264 34.3215 40.9698 35.432 40.5381C36.5796 40.0923 37.552 39.4945 38.5218 38.5236C39.4927 37.5534 40.089 36.5796 40.5363 35.432C40.9653 34.3218 41.2599 33.053 41.3471 31.1956C41.4308 29.3338 41.4526 28.7403 41.4526 24C41.4526 19.2596 41.4308 18.6647 41.3471 16.8029C41.2599 14.9447 40.9653 13.6763 40.5363 12.5665C40.089 11.4185 39.4927 10.4447 38.5218 9.4745C37.5509 8.50359 36.58 7.90723 35.431 7.46177C34.3183 7.03014 33.0492 6.73596 31.1911 6.65087C29.3293 6.56614 28.7366 6.54541 23.9949 6.54541H24.0004ZM22.4346 9.69086C22.8993 9.69014 23.4179 9.69086 24.0004 9.69086C28.6606 9.69086 29.213 9.70759 31.0533 9.79123C32.755 9.86905 33.6786 10.1534 34.2939 10.3923C35.1084 10.7087 35.6891 11.0869 36.2997 11.6978C36.9105 12.3087 37.2887 12.8905 37.6058 13.705C37.8447 14.3196 38.1294 15.2432 38.2069 16.945C38.2905 18.785 38.3087 19.3378 38.3087 23.996C38.3087 28.6541 38.2905 29.2069 38.2069 31.0469C38.1291 32.7487 37.8447 33.6723 37.6058 34.2869C37.2894 35.1014 36.9105 35.6814 36.2997 36.292C35.6888 36.9029 35.1088 37.281 34.2939 37.5974C33.6794 37.8374 32.755 38.121 31.0533 38.1989C29.2133 38.2825 28.6606 38.3007 24.0004 38.3007C19.3398 38.3007 18.7875 38.2825 16.9475 38.1989C15.2457 38.1203 14.3221 37.836 13.7065 37.597C12.892 37.2807 12.3102 36.9025 11.6993 36.2916C11.0884 35.6807 10.7103 35.1003 10.3932 34.2854C10.1543 33.6709 9.86955 32.7472 9.7921 31.0454C9.70846 29.2054 9.69174 28.6527 9.69174 23.9916C9.69174 19.3305 9.70846 18.7807 9.7921 16.9407C9.86991 15.2389 10.1543 14.3152 10.3932 13.7C10.7095 12.8854 11.0884 12.3036 11.6993 11.6927C12.3102 11.0818 12.892 10.7036 13.7065 10.3865C14.3218 10.1465 15.2457 9.86286 16.9475 9.78468C18.5576 9.71196 19.1816 9.69014 22.4346 9.6865V9.69086ZM33.3172 12.589C32.1609 12.589 31.2227 13.5261 31.2227 14.6829C31.2227 15.8392 32.1609 16.7774 33.3172 16.7774C34.4735 16.7774 35.4117 15.8392 35.4117 14.6829C35.4117 13.5265 34.4735 12.5883 33.3172 12.5883V12.589ZM24.0004 15.0363C19.0504 15.0363 15.037 19.0498 15.037 24C15.037 28.9501 19.0504 32.9618 24.0004 32.9618C28.9504 32.9618 32.9623 28.9501 32.9623 24C32.9623 19.0498 28.9501 15.0363 24 15.0363H24.0004ZM24.0004 18.1818C27.2134 18.1818 29.8184 20.7865 29.8184 24C29.8184 27.213 27.2134 29.8181 24.0004 29.8181C20.787 29.8181 18.1824 27.213 18.1824 24C18.1824 20.7865 20.787 18.1818 24.0004 18.1818V18.1818Z" fill="url(#paint1_radial_5906_133338)"/>
<defs>
<radialGradient id="paint0_radial_5906_133338" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(15.8173 44.1432) rotate(-90) scale(34.5975 32.1771)">
<stop stop-color="#FFDD55"/>
<stop offset="0.1" stop-color="#FFDD55"/>
<stop offset="0.5" stop-color="#FF543E"/>
<stop offset="1" stop-color="#C837AB"/>
</radialGradient>
<radialGradient id="paint1_radial_5906_133338" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(0.697703 9.0602) rotate(78.6811) scale(15.4652 63.7458)">
<stop stop-color="#3771C8"/>
<stop offset="0.128" stop-color="#3771C8"/>
<stop offset="1" stop-color="#6600FF" stop-opacity="0"/>
</radialGradient>
</defs>
</svg>

================
File: src/assets/images/logo.svg
================
<svg width="128" height="48" viewBox="0 0 128 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_1_958)">
<circle cx="24" cy="24" r="24" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M41.1895 20.3589C44.1006 25.1232 42.8231 35.5253 38.0923 40.8947C35.494 43.0644 32.3871 44.6462 28.9765 45.435H28.9753C29.265 45.368 29.5525 45.2952 29.8377 45.2169C21.9684 46.0582 18.8955 39.4649 21.1247 34.5452C21.7729 33.1148 22.6745 32.1919 23.6725 31.4858L23.7172 31.4543L23.8021 31.3956L23.8447 31.3666L23.9302 31.3094L23.9946 31.2671L24.0592 31.2253L24.1553 31.1642L24.2518 31.1041L24.3002 31.0744L24.3973 31.0157L24.4947 30.9579L24.5924 30.901L24.6414 30.8728L24.7396 30.8169L24.7888 30.7892L24.8873 30.7344L24.986 30.6801L25.1345 30.5997L25.2336 30.5467L25.3824 30.468L25.5335 30.389L25.7807 30.2608L26.1507 30.0696L26.3497 29.9661L26.4818 29.8967L26.6135 29.8268L26.7446 29.7563L26.8041 29.724L26.9226 29.6589L26.9817 29.6261L27.0993 29.5598L27.1471 29.5325L27.2424 29.4774L27.3371 29.4217C27.3529 29.4123 27.3686 29.4029 27.3843 29.3935L27.4783 29.3366L27.5717 29.279C27.5873 29.2693 27.6028 29.2596 27.6182 29.2498L27.7108 29.1908C29.048 28.3284 30.1858 27.1676 30.729 24.9769C33.0673 26.5317 40.2511 25.0093 41.1895 20.3589Z" fill="#FFCF60"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M46.0001 24C46.0001 30.7887 42.9253 36.8591 38.0924 40.8947C42.8232 35.5253 44.1007 25.1232 41.1897 20.3589C40.182 25.3524 31.9735 26.7393 30.2949 24.5826C29.672 23.7104 28.7433 23.0038 27.7374 22.3897L27.6138 22.315C27.5519 22.2778 27.4897 22.241 27.4273 22.2045L27.3022 22.132L27.1767 22.0602L27.0509 21.9893L26.9247 21.9191L26.7985 21.8497L26.6721 21.7809L26.5458 21.7128L26.4196 21.6454L26.2359 21.5481L26.053 21.452L25.7806 21.31L25.3344 21.0779L25.1594 20.9865L24.9331 20.8672L24.7731 20.7818L24.616 20.6969L24.5129 20.6404L24.4112 20.5841L24.311 20.5279L24.2125 20.4717L24.1155 20.4156L24.0203 20.3595C23.9889 20.3408 23.9577 20.3221 23.9269 20.3034L23.8353 20.2473C23.7749 20.2099 23.7158 20.1724 23.6581 20.1349L23.5725 20.0786C23.1784 19.8154 22.8547 19.5485 22.6349 19.2672L21.0265 17.1408C22.1498 16.2983 22.1894 15.3724 21.862 14.453L21.8371 14.3849C21.8329 14.3735 21.8286 14.3622 21.8242 14.3508L21.7974 14.2828C21.7883 14.2601 21.7789 14.2375 21.7694 14.2148L21.7403 14.1469L21.7102 14.079L21.679 14.0112L21.647 13.9434L21.6141 13.8758L21.5804 13.8082L21.5272 13.7046L21.4725 13.6012L21.4278 13.5187L21.4053 13.4776L21.3596 13.3954L21.3135 13.3135L21.2437 13.191L21.0061 12.781L20.9184 12.6284L20.8541 12.5148L20.8122 12.4395L20.7711 12.3647L20.7309 12.2902L20.6919 12.2161L20.654 12.1424L20.6174 12.0691L20.5888 12.0101L20.5611 11.9514L20.5345 11.893L20.509 11.8349L20.4845 11.7771C20.4806 11.7675 20.4766 11.7579 20.4728 11.7483L20.4502 11.6911C20.1316 10.8627 20.216 10.1403 21.4775 9.62087C22.4095 9.23713 23.4974 9.10175 24.652 9.08318L24.7274 9.08214L24.8697 9.08104L25.0125 9.08103L25.0841 9.08141L25.1559 9.08205L25.2999 9.08406L25.4443 9.08699L25.5893 9.09079L25.7346 9.09541L25.8074 9.09801L25.9534 9.10376L26.0996 9.1102L26.2462 9.11726L26.3196 9.12101L26.5401 9.13307L26.761 9.14617L26.9823 9.16015L27.3513 9.1849L28.0887 9.23678L28.3825 9.25723L28.7454 9.2814L28.9551 9.29454L29.164 9.30681L29.3719 9.31806L29.5099 9.32491L29.6474 9.33119L29.7844 9.33684L29.9208 9.34183L30.0904 9.34704L30.259 9.35105L30.3597 9.35283L30.46 9.35412L30.593 9.35505L30.7121 9.35506L30.8305 9.35427C30.8502 9.35407 30.8699 9.35383 30.8895 9.35356L31.0069 9.35149L31.1237 9.34852L31.2397 9.34463C31.2589 9.3439 31.2782 9.34313 31.2974 9.34232L31.4122 9.33696C32.6714 9.27251 33.7878 9.02347 34.62 8.38171C36.4489 6.97125 35.8492 5.72518 34.84 4.8515L34.8416 4.85243C41.5047 8.63326 46.0001 15.7917 46.0001 24Z" fill="#4272EF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.9572 23.7327C30.5285 27.1379 28.9371 28.5146 27.0995 29.5598L26.9819 29.6261C26.9622 29.6371 26.9426 29.648 26.9229 29.659L26.8043 29.7241C26.7845 29.7349 26.7647 29.7456 26.7449 29.7564L26.6137 29.8269L26.4821 29.8967L26.3499 29.9662L26.151 30.0697L25.7809 30.2608L25.5337 30.389L25.3827 30.468L25.2338 30.5468L25.1347 30.5998L24.9863 30.6801L24.8875 30.7344L24.789 30.7892L24.7398 30.8169L24.6416 30.8728L24.5927 30.901L24.4949 30.958L24.3975 31.0158L24.3004 31.0744L24.252 31.1041L24.1555 31.1642L24.0594 31.2253C24.0163 31.253 23.9733 31.2811 23.9304 31.3094L23.8449 31.3667C23.8307 31.3763 23.8165 31.3859 23.8023 31.3956L23.7175 31.4543C22.7016 32.1645 21.7828 33.0935 21.1249 34.5452C18.8957 39.4649 21.9686 46.0582 29.8379 45.2169C27.9792 45.7275 26.0216 46.0001 24.0002 46.0001C13.9757 46.0001 5.51717 39.2954 2.86426 30.1257C4.47962 32.7193 9.03361 35.4239 12.2914 30.9757C14.1168 28.4833 13.6172 26.1351 12.8032 24.039L12.7509 23.9055L12.6978 23.7728C12.6889 23.7507 12.68 23.7287 12.671 23.7067L12.6441 23.6407L12.5686 23.4585L12.4926 23.2776L12.4314 23.1339L12.3702 22.9911L12.1237 22.4191L12.0396 22.2221L11.9777 22.0756L11.9172 21.9302L11.8777 21.8339L11.8389 21.7381L11.8009 21.6428L11.7637 21.548L11.7275 21.4537L11.7097 21.4068L11.6664 21.29L11.6247 21.174L11.6085 21.1278L11.577 21.0358L11.5467 20.9444L11.5178 20.8535C11.5046 20.8113 11.4918 20.7693 11.4795 20.7275L11.4556 20.6441C11.4362 20.5747 11.4181 20.5059 11.4014 20.4376L11.3821 20.3558C11.1965 19.5404 11.2266 18.7964 11.6833 18.135C12.3237 17.2075 13.0916 16.9963 13.9528 17.0795L14.0144 17.0859L14.0764 17.0933C14.0868 17.0946 14.0971 17.096 14.1075 17.0974L14.17 17.1062C14.1804 17.1077 14.1908 17.1093 14.2013 17.1109L14.2642 17.121L14.3274 17.1319L14.3591 17.1377L14.4438 17.154L14.4863 17.1626L14.5718 17.1808L14.6147 17.1903L14.7009 17.2102L14.7876 17.2312L14.8748 17.2531L14.9624 17.2759L15.0506 17.2996L15.1392 17.324L15.2731 17.3618L15.4531 17.414L15.83 17.5256L16.0231 17.5827L16.1603 17.6226L16.2984 17.662L16.3909 17.6879L16.5303 17.7259L16.6237 17.7505L16.7175 17.7746L16.8115 17.798L16.906 17.8206L16.9533 17.8316L17.0482 17.853L17.1256 17.8696L17.2031 17.8856L17.2809 17.9009L17.3589 17.9154L17.4371 17.9292L17.5154 17.9421L17.594 17.9542C17.6071 17.9561 17.6202 17.958 17.6333 17.9598L17.7122 17.9705L17.7912 17.9802C17.8044 17.9818 17.8176 17.9833 17.8308 17.9847L17.9101 17.9929C17.9233 17.9942 17.9365 17.9954 17.9498 17.9966L18.0293 18.0032C18.9718 18.0743 19.9501 17.9084 20.9396 17.2044C22.1865 16.3174 22.1997 15.3344 21.8285 14.362L21.8014 14.2926C21.7829 14.2463 21.7635 14.2 21.7434 14.1538L21.7127 14.0845L21.681 14.0153C21.6757 14.0038 21.6703 13.9923 21.6648 13.9808L21.6317 13.9117L21.5977 13.8427L21.5663 13.7803C26.5497 14.7393 31.7053 17.7895 30.9572 23.7327Z" fill="#FF5E5E"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24 2C27.9412 2 31.6404 3.03638 34.8399 4.85147C35.8491 5.72515 36.4488 6.97122 34.6199 8.38168C33.6112 9.15957 32.1849 9.36047 30.5929 9.35502L30.4599 9.35409C30.3932 9.3534 30.3262 9.35237 30.2589 9.35102L30.1241 9.34791C30.1016 9.34733 30.079 9.34671 30.0565 9.34606L29.9207 9.3418L29.7843 9.33681L29.6473 9.33115L29.5098 9.32488L29.3718 9.31803L29.1639 9.30678L28.955 9.29451L28.7453 9.28137C28.722 9.27987 28.6986 9.27836 28.6752 9.27683L28.3824 9.2572L28.0886 9.23675L27.3512 9.18487L26.9822 9.16012L26.7609 9.14614L26.54 9.13304L26.3195 9.12098C26.295 9.11971 26.2705 9.11846 26.2461 9.11723L26.0995 9.11017L25.9533 9.10373L25.8073 9.09798C25.783 9.09709 25.7588 9.09622 25.7345 9.09538L25.5892 9.09076C25.4924 9.08795 25.3959 9.08568 25.2998 9.08403L25.1558 9.08202C25.1079 9.08151 25.0601 9.08117 25.0124 9.081L24.8696 9.08101L24.7273 9.08211C23.5447 9.09595 22.4296 9.22876 21.4774 9.62084C20.0274 10.2179 20.1325 11.0831 20.6173 12.0691L20.6539 12.1424L20.6918 12.216L20.7308 12.2901L20.771 12.3646L20.8121 12.4395L20.854 12.5148L20.9183 12.6283L21.006 12.7809L21.2436 13.191L21.3134 13.3134L21.3595 13.3954L21.4052 13.4775C21.4127 13.4913 21.4202 13.505 21.4277 13.5187L21.4724 13.6012L21.5162 13.6838C21.5235 13.6976 21.5307 13.7114 21.5378 13.7252L21.5803 13.8082C22.1598 14.9564 22.4238 16.1484 20.9395 17.2043C19.6014 18.1562 18.2841 18.1244 17.048 17.8529L16.9531 17.8316C16.9373 17.8279 16.9216 17.8243 16.9058 17.8206L16.8114 17.7979L16.7173 17.7745L16.6235 17.7505L16.5301 17.7258L16.3907 17.6878L16.2982 17.662L16.1602 17.6225L16.023 17.5826L15.8299 17.5256L15.4529 17.4139L15.2729 17.3617L15.139 17.3239L15.0504 17.2995L14.9622 17.2759L14.8746 17.253L14.7874 17.2311L14.7007 17.2101L14.6145 17.1902C14.6002 17.187 14.5858 17.1838 14.5716 17.1807L14.4861 17.1625C14.4719 17.1596 14.4578 17.1567 14.4436 17.1539L14.359 17.1376C13.3322 16.948 12.4226 17.0639 11.6831 18.1349C11.1351 18.9286 11.2013 19.8413 11.5176 20.8534L11.5466 20.9443L11.5768 21.0358L11.6083 21.1277C11.6136 21.1431 11.619 21.1585 11.6245 21.1739L11.6577 21.2666C11.6633 21.2821 11.669 21.2977 11.6747 21.3132L11.7095 21.4067C11.7154 21.4224 11.7213 21.438 11.7273 21.4537L11.7635 21.548L11.8007 21.6428L11.8387 21.7381L11.8775 21.8339L11.917 21.9302L11.9775 22.0756L12.0394 22.222L12.1235 22.4191L12.37 22.991L12.4312 23.1338L12.4924 23.2775L12.5533 23.4221C12.5634 23.4463 12.5735 23.4705 12.5836 23.4947L12.6439 23.6407C13.5437 25.8359 14.2331 28.3241 12.2912 30.9756C9.033 35.4245 4.47824 32.7185 2.8641 30.1244C2.3014 28.1804 2 26.1254 2 24C2 11.8497 11.8497 2 24 2Z" fill="#222222"/>
</g>
<path d="M78.0156 11.2656C78.0156 10.9375 77.6719 10.5938 77.3438 10.5938H64.6719C64.3438 10.5938 64 10.9375 64 11.2656V32.3281C64 32.6562 64.3438 33 64.6719 33H77.3125C77.6719 33 78.0156 32.5938 78.0156 32.2656V29.6406C78.0156 29.3125 77.6719 28.9688 77.3438 28.9688H69V23.6875H75.6875C76.0156 23.6875 76.3906 23.3594 76.3906 22.9844V20.5469C76.3906 20.2188 76.0156 19.875 75.6875 19.875H69V14.625H77.3438C77.7031 14.625 78.0156 14.2812 78.0156 13.9531V11.2656Z" fill="black"/>
<path d="M93.7969 17.2812C93.4062 17.2812 93.1406 17.4688 92.9688 17.8281L88.875 29.3125L84.7656 17.8281C84.6406 17.4688 84.3906 17.2812 84 17.2812H80.3281C79.8125 17.2812 79.5781 17.5781 79.7812 18.0625L84.9062 32.4531C85.0781 32.8125 85.3281 33 85.6719 33H87.5625L87.2344 33.9219C87.1094 34.3281 86.9688 34.6562 86.8281 34.8906C86.5156 35.3594 85.7344 35.875 84.5469 35.875H84.1719C83.8125 35.875 83.4531 36.25 83.4531 36.5781V39.0469C83.4531 39.375 83.8438 39.7188 84.1719 39.7188H84.5469C86.8125 39.7188 88.4219 39.4375 89.3906 38.8594C90.3438 38.2812 91.0938 37.2656 91.625 35.8125L98.0156 18.0625C98.2031 17.625 97.9688 17.2812 97.4844 17.2812H93.7969Z" fill="black"/>
<path d="M104.656 33C104.984 33 105.328 32.6562 105.328 32.3281V23.375C105.328 21.9531 106.016 21.0938 107.031 21.0938C107.5 21.0938 108.016 21.3125 108.594 21.7344C108.844 21.9531 109.109 21.9219 109.391 21.6406L111.672 19.375C111.922 19.1094 111.891 18.625 111.594 18.375C110.391 17.4375 109.25 16.9688 108.141 16.9688C107.438 16.9688 106.812 17.1094 106.266 17.4062C105.719 17.7031 105.312 18.0312 105.078 18.375L104.531 17.5781C104.359 17.375 104.109 17.2812 103.766 17.2812H101.203C100.844 17.2812 100.531 17.625 100.531 17.9531V32.3281C100.531 32.6562 100.875 33 101.203 33H104.656Z" fill="black"/>
<path d="M118.578 33.3125C120.812 33.3125 122.281 32.8438 122.969 31.9062L123.547 32.7188C123.672 32.9062 123.922 33 124.281 33H126.844C127.219 33 127.547 32.6562 127.547 32.3281V23.9062C127.547 21.7344 127 20.0312 125.922 18.7969C124.828 17.5781 122.953 16.9688 120.281 16.9688C117.703 16.9688 115.672 17.4688 114.203 18.4688C113.781 18.75 113.75 19.0781 114.141 19.4375L116.094 21.3594C116.344 21.6094 116.672 21.6562 117.078 21.4844C118.109 20.9688 119.172 20.7188 120.281 20.7188C121.906 20.7188 122.719 21.6406 122.719 23.4688V24.2344C121.906 23.5 120.547 23.1406 118.656 23.1406C117.016 23.1406 115.641 23.5781 114.531 24.4375C113.422 25.2969 112.859 26.5312 112.859 28.1406C112.859 29.75 113.406 31.0156 114.516 31.9375C115.625 32.8594 116.969 33.3125 118.578 33.3125ZM119.922 29.7344C118.344 29.7344 117.812 29.2812 117.812 28.2656C117.812 27.2031 118.359 26.7656 120.188 26.7656C121.25 26.7656 121.938 26.8594 122.25 27.0625C122.562 27.2656 122.719 27.6562 122.719 28.2031C122.703 29.2188 121.781 29.7344 119.922 29.7344Z" fill="black"/>
<defs>
<clipPath id="clip0_1_958">
<rect width="48" height="48" fill="white"/>
</clipPath>
</defs>
</svg>

================
File: src/assets/images/radio_active.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="11" stroke="#4272EF" stroke-width="2"/>
<circle cx="12" cy="12" r="6" fill="#4272EF"/>
</svg>

================
File: src/assets/images/radio.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="11" stroke="#CCCCCC" stroke-width="2"/>
</svg>

================
File: src/assets/images/spinner.svg
================
<svg version="1.1" id="loader-1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
   width="40px" height="40px" viewBox="0 0 40 40" enable-background="new 0 0 40 40" xml:space="preserve">
  <path opacity="0.2" fill="#4272EF" d="M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946
    s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634
    c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z"/>
  <path fill="#4272EF" d="M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0
    C22.32,8.481,24.301,9.057,26.013,10.047z">
    <animateTransform attributeType="xml"
      attributeName="transform"
      type="rotate"
      from="0 20 20"
      to="360 20 20"
      dur="0.7s"
      repeatCount="indefinite"/>
  </path>
</svg>

================
File: src/assets/images/twitter.svg
================
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M39.9049 16.7174C39.9293 17.0537 39.9293 17.39 39.9293 17.7295C39.9293 28.072 31.6742 40 16.5793 40V39.9938C12.1203 40 7.75381 38.7818 4 36.4848C4.64839 36.5592 5.30002 36.5964 5.95328 36.598C9.64859 36.6011 13.2383 35.4185 16.1454 33.2409C12.6338 33.1773 9.55434 30.9935 8.47857 27.8054C9.70871 28.0317 10.9762 27.9852 12.1836 27.6705C8.35507 26.9328 5.60065 23.7245 5.60065 19.9985V19.8993C6.74142 20.5053 8.01869 20.8417 9.32521 20.8789C5.71928 18.5804 4.60776 14.005 6.78529 10.4279C10.9519 15.3178 17.0993 18.2905 23.6986 18.6052C23.0372 15.8866 23.9407 13.0379 26.0727 11.1269C29.378 8.16346 34.5765 8.31535 37.6835 11.4663C39.5214 11.1207 41.283 10.4775 42.895 9.56612C42.2823 11.378 41.0002 12.917 39.2874 13.895C40.9141 13.7121 42.5034 13.2967 44 12.6628C42.8982 14.2375 41.5105 15.6092 39.9049 16.7174Z" fill="#1D9BF0"/>
</svg>

================
File: src/assets/images/undo.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4 21H14.087C17.7826 21 21 18.375 21 14C21 9.625 17.7826 7 14.087 7H7.69565" stroke="#4272EF" stroke-width="2" stroke-linecap="round"/>
<path d="M10 3L6 7L10 11" stroke="#4272EF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

================
File: src/assets/images/youtube.svg
================
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M43.4158 13.812C42.9488 12.0772 41.581 10.7094 39.8462 10.2424C36.677 9.375 23.9999 9.375 23.9999 9.375C23.9999 9.375 11.3229 9.375 8.15361 10.209C6.45221 10.6761 5.05107 12.0772 4.58402 13.812C3.75 16.9812 3.75 23.5533 3.75 23.5533C3.75 23.5533 3.75 30.1587 4.58402 33.2946C5.05107 35.0293 6.41885 36.3971 8.15361 36.8642C11.3562 37.7316 23.9999 37.7316 23.9999 37.7316C23.9999 37.7316 36.677 37.7316 39.8462 36.8975C41.581 36.4305 42.9488 35.0627 43.4158 33.3279C44.2498 30.1587 44.2498 23.5866 44.2498 23.5866C44.2498 23.5866 44.2832 16.9812 43.4158 13.812Z" fill="#FF0000"/>
<path d="M19.9629 29.3933L30.5049 23.3216L19.9629 17.25V29.3933Z" fill="white"/>
</svg>

================
File: src/assets/lottie/spinner-dark.json
================
{"v":"5.7.5","fr":30,"ip":0,"op":50,"w":20,"h":20,"nm":"Loading spinner BLUE","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[10,10,0],"ix":2,"l":2},"a":{"a":0,"k":[3.178,3.178,0],"ix":1,"l":2},"s":{"a":0,"k":[36.9132,36.9132,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[45.356,45.356],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.13333333333333333,0.13333333333333333,0.13333333333333333,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[3.178,3.178],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":1,"k":[{"i":{"x":[0.335],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":15,"s":[0]},{"t":50,"s":[100]}],"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.17],"y":[1]},"o":{"x":[0.362],"y":[0.158]},"t":0,"s":[0.1]},{"t":40,"s":[100]}],"ix":2},"o":{"a":1,"k":[{"i":{"x":[0.166],"y":[0.61]},"o":{"x":[0.75],"y":[0.35]},"t":0,"s":[0]},{"t":50,"s":[360]}],"ix":3},"m":1,"ix":2,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":0,"op":300,"st":0,"bm":0}],"markers":[]}

================
File: src/assets/lottie/spinner-light.json
================
{"v":"5.7.5","fr":30,"ip":0,"op":50,"w":20,"h":20,"nm":"Loading spinner BLUE","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[10,10,0],"ix":2,"l":2},"a":{"a":0,"k":[3.178,3.178,0],"ix":1,"l":2},"s":{"a":0,"k":[36.9132,36.9132,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[45.356,45.356],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[3.178,3.178],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":1,"k":[{"i":{"x":[0.335],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":15,"s":[0]},{"t":50,"s":[100]}],"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.17],"y":[1]},"o":{"x":[0.362],"y":[0.158]},"t":0,"s":[0.1]},{"t":40,"s":[100]}],"ix":2},"o":{"a":1,"k":[{"i":{"x":[0.166],"y":[0.61]},"o":{"x":[0.75],"y":[0.35]},"t":0,"s":[0]},{"t":50,"s":[360]}],"ix":3},"m":1,"ix":2,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":0,"op":300,"st":0,"bm":0}],"markers":[]}

================
File: src/assets/lottie/spinner-primary.json
================
{"v":"5.7.5","fr":30,"ip":0,"op":50,"w":20,"h":20,"nm":"Loading spinner BLUE","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[10,10,0],"ix":2,"l":2},"a":{"a":0,"k":[3.178,3.178,0],"ix":1,"l":2},"s":{"a":0,"k":[36.9132,36.9132,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[45.356,45.356],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.25882352941176473,0.4470588235294118,0.9372549019607843,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[3.178,3.178],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":1,"k":[{"i":{"x":[0.335],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":15,"s":[0]},{"t":50,"s":[100]}],"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.17],"y":[1]},"o":{"x":[0.362],"y":[0.158]},"t":0,"s":[0.1]},{"t":40,"s":[100]}],"ix":2},"o":{"a":1,"k":[{"i":{"x":[0.166],"y":[0.61]},"o":{"x":[0.75],"y":[0.35]},"t":0,"s":[0]},{"t":50,"s":[360]}],"ix":3},"m":1,"ix":2,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":0,"op":300,"st":0,"bm":0}],"markers":[]}

================
File: src/framework/processing/py/port/api/assets.py
================
import os

def asset_path(asset):
    return os.path.join(os.path.join(os.path.dirname(__file__), "../assets"), asset)


def open_asset(asset):
    path = asset_path(asset)
    return open(path, "r")


def read_asset(asset):
   file = open_asset(asset)
   return file.read()

================
File: src/framework/processing/py/port/api/commands.py
================
class CommandUIRender:
    __slots__ = "page"

    def __init__(self, page):
        self.page = page

    def toDict(self):
        dict = {}
        dict["__type__"] = "CommandUIRender"
        dict["page"] = self.page.toDict()
        return dict


class CommandSystemDonate:
    __slots__ = "key", "json_string"

    def __init__(self, key, json_string):
        self.key = key
        self.json_string = json_string

    def toDict(self):
        dict = {}
        dict["__type__"] = "CommandSystemDonate"
        dict["key"] = self.key
        dict["json_string"] = self.json_string
        return dict


class CommandSystemExit:
    __slots__ = "code", "info"

    def __init__(self, code, info):
        self.code = code
        self.info = info

    def toDict(self):
        dict = {}
        dict["__type__"] = "CommandSystemExit"
        dict["code"] = self.code
        dict["info"] = self.info
        return dict

================
File: src/framework/processing/py/port/api/props.py
================
from dataclasses import dataclass
from typing import Optional, TypedDict

import pandas as pd


class Translations(TypedDict):
    """Typed dict containing text that is  display in a speficic language

    Attributes:
        en: English string to display
        nl: Dutch string to display
    """

    en: str
    nl: str


@dataclass
class Translatable:
    """Wrapper class for Translations"""

    translations: Translations

    def toDict(self):
        return self.__dict__.copy()


@dataclass
class PropsUIHeader:
    """Page header

    Attributes:
        title: title of the page
    """

    title: Translatable

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIHeader"
        dict["title"] = self.title.toDict()
        return dict


@dataclass
class PropsUIFooter:
    """Page footer

    Attributes:
        progressPercentage: float indicating the progress in the flow
    """

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIFooter"
        return dict


@dataclass
class PropsUIPromptConfirm:
    """Retry submitting a file page

    Prompt the user if they want to submit a new file.
    This can be used in case a file could not be processed.

    Attributes:
        text: message to display
        ok: message to display if the user wants to try again
        cancel: message to display if the user wants to continue regardless
    """

    text: Translatable
    ok: Translatable
    cancel: Translatable

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPromptConfirm"
        dict["text"] = self.text.toDict()
        dict["ok"] = self.ok.toDict()
        dict["cancel"] = self.cancel.toDict()
        return dict


@dataclass
class PropsUIPromptConsentFormTable:
    """Table to be shown to the participant prior to donation

    Attributes:
        id: a unique string to itentify the table after donation
        title: title of the table
        data_frame: table to be shown
        visualizations: optional visualizations to be shown. (see TODO for input format)
    """

    id: str
    title: Translatable
    data_frame: pd.DataFrame
    description: Optional[Translatable] = None
    visualizations: Optional[list] = None
    folded: Optional[bool] = False

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPromptConsentFormTable"
        dict["id"] = self.id
        dict["title"] = self.title.toDict()
        dict["data_frame"] = self.data_frame.to_json()
        dict["description"] = self.description.toDict() if self.description else None
        dict["visualizations"] = self.visualizations if self.visualizations else None
        dict["folded"] = self.folded
        return dict


@dataclass
class PropsUIPromptConsentForm:
    """Tables to be shown to the participant prior to donation

    Attributes:
        tables: a list of tables
        meta_tables: a list of optional tables, for example for logging data
    """

    tables: list[PropsUIPromptConsentFormTable]
    meta_tables: list[PropsUIPromptConsentFormTable]
    description: Optional[Translatable] = None
    donate_question: Optional[Translatable] = None
    donate_button: Optional[Translatable] = None

    def translate_tables(self):
        output = []
        for table in self.tables:
            output.append(table.toDict())
        return output

    def translate_meta_tables(self):
        output = []
        for table in self.meta_tables:
            output.append(table.toDict())
        return output

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPromptConsentForm"
        dict["tables"] = self.translate_tables()
        dict["metaTables"] = self.translate_meta_tables()
        dict["description"] = self.description and self.description.toDict()
        dict["donateQuestion"] = self.donate_question and self.donate_question.toDict()
        dict["donateButton"] = self.donate_button and self.donate_button.toDict()
        return dict


@dataclass
class PropsUIPromptFileInput:
    """Prompt the user to submit a file

    Attributes:
        description: text with an explanation
        extensions: accepted mime types, example: "application/zip, text/plain"
    """

    description: Translatable
    extensions: str

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPromptFileInput"
        dict["description"] = self.description.toDict()
        dict["extensions"] = self.extensions
        return dict


@dataclass
class PropsUIPromptFileInputMultiple:
    """Prompt the user to submit multiple files 

    Attributes:
        description: text with an explanation
        extensions: accepted mime types, example: "application/zip, text/plain"
    """

    description: Translatable
    extensions: str

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPromptFileInputMultiple"
        dict["description"] = self.description.toDict()
        dict["extensions"] = self.extensions
        return dict


@dataclass
class PropsUIPromptProgress:
    """Prompt the user information during the extraction 

    Attributes:
        description: text with an explanation
        message: can be used to show extraction progress
    """

    description: Translatable
    message: str
    percentage: Optional[int] = None

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPromptProgress"
        dict["description"] = self.description.toDict()
        dict["message"] = self.message
        dict["percentage"] = self.percentage
        
        return dict


class RadioItem(TypedDict):
    """Radio button

    Attributes:
        id: id of radio button
        value: text to be displayed
    """

    id: int
    value: str


@dataclass
class PropsUIPromptRadioInput:
    """Radio group

    This radio group can be used get a mutiple choice answer from a user

    Attributes:
        title: title of the radio group
        description: short description of the radio group
        items: a list of radio buttons
    """

    title: Translatable
    description: Translatable
    items: list[RadioItem]

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPromptRadioInput"
        dict["title"] = self.title.toDict()
        dict["description"] = self.description.toDict()
        dict["items"] = self.items
        return dict


@dataclass
class PropsUIQuestionOpen:
    """
    NO DOCS YET
    """
    id: int
    question: Translatable

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIQuestionOpen"
        dict["id"] = self.id
        dict["question"] = self.question.toDict()
        return dict


@dataclass
class PropsUIQuestionMultipleChoiceCheckbox:
    """
    NO DOCS YET
    """
    id: int
    question: Translatable
    choices: list[Translatable]

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIQuestionMultipleChoiceCheckbox"
        dict["id"] = self.id
        dict["question"] = self.question.toDict()
        dict["choices"] = [c.toDict() for c in self.choices]
        return dict


@dataclass
class PropsUIQuestionMultipleChoice:
    """
    NO DOCS YET
    """
    id: int
    question: Translatable
    choices: list[Translatable]

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIQuestionMultipleChoice"
        dict["id"] = self.id
        dict["question"] = self.question.toDict()
        dict["choices"] = [c.toDict() for c in self.choices]
        return dict


@dataclass
class PropsUIPromptQuestionnaire:
    """
    NO DOCS YET
    """
    description: Translatable
    questions: list[PropsUIQuestionMultipleChoice | PropsUIQuestionMultipleChoiceCheckbox | PropsUIQuestionOpen]

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPromptQuestionnaire"
        dict["description"] = self.description.toDict()
        dict["questions"] = [q.toDict() for q in self.questions]
        return dict


@dataclass
class PropsUIPageDonation:
    """A multi-purpose page that gets shown to the user

    Attributes:
        platform: the platform name the user is curently in the process of donating data from
        header: page header
        body: main body of the page, see the individual classes for an explanation
    """

    platform: str
    header: PropsUIHeader
    body: (
        PropsUIPromptRadioInput
        | PropsUIPromptConsentForm
        | PropsUIPromptFileInput
        | PropsUIPromptFileInputMultiple
        | PropsUIPromptConfirm
        | PropsUIPromptQuestionnaire
    )
    footer: Optional[PropsUIFooter] = None

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPageDonation"
        dict["platform"] = self.platform
        dict["header"] = self.header.toDict()
        dict["body"] = self.body.toDict()
        dict["footer"] = self.footer.toDict() if self.footer else None
        return dict


class PropsUIPageEnd:
    """An ending page to show the user they are done"""

    def toDict(self):
        dict = {}
        dict["__type__"] = "PropsUIPageEnd"
        return dict

================
File: src/framework/processing/py/port/assets/hello_world.txt
================
Hello, World!

================
File: src/framework/processing/py/port/__init__.py
================
from port.main import start

__all__ = [
  "start"
]

================
File: src/framework/processing/py/port/main.py
================
from collections.abc import Generator
from port.script import process
from port.api.commands import CommandSystemExit


class ScriptWrapper(Generator):
    def __init__(self, script):
        self.script = script

    def send(self, data):
        try:
            command = self.script.send(data)
        except StopIteration:
            return CommandSystemExit(0, "End of script").toDict()
        else:
            return command.toDict()

    def throw(self, type=None, value=None, traceback=None):
        raise StopIteration


def start(sessionId):
    script = process(sessionId)
    return ScriptWrapper(script)

================
File: src/framework/processing/py/port/script.py
================
import port.api.props as props
from port.api.commands import (CommandSystemDonate, CommandUIRender, CommandSystemExit)

import pandas as pd
import zipfile

def process(session_id: str):
    platform = "Platform of interest"

    # Start of the data donation flow
    while True:
        # Ask the participant to submit a file
        file_prompt = generate_file_prompt(platform, "application/zip, text/plain")
        file_prompt_result = yield render_page(platform, file_prompt)

        # If the participant submitted a file: continue
        if file_prompt_result.__type__ == 'PayloadString':

            # Validate the file the participant submitted
            # In general this is wise to do 
            is_data_valid = validate_the_participants_input(file_prompt_result.value)

            # Happy flow:
            # The file the participant submitted is valid
            if is_data_valid == True:

                # Extract the data you as a researcher are interested in, and put it in a pandas DataFrame
                # Show this data to the participant in a table on screen
                # The participant can now decide to donate
                extracted_data = extract_the_data_you_are_interested_in(file_prompt_result.value)
                consent_prompt = generate_consent_prompt(extracted_data)
                consent_prompt_result = yield render_page(platform, consent_prompt)

                # If the participant wants to donate the data gets donated
                if consent_prompt_result.__type__ == "PayloadJSON":
                    yield donate(f"{session_id}-{platform}", consent_prompt_result.value)

                break

            # Sad flow:
            # The data was not valid, ask the participant to retry
            if is_data_valid == False:
                retry_prompt = generate_retry_prompt(platform)
                retry_prompt_result = yield render_page(platform, retry_prompt)

                # The participant wants to retry: start from the beginning
                if retry_prompt_result.__type__ == 'PayloadTrue':
                    continue
                # The participant does not want to retry or pressed skip
                else:
                    break

        # The participant did not submit a file and pressed skip
        else:
            break

    yield exit_port(0, "Success")
    yield render_end_page()


def extract_the_data_you_are_interested_in(zip_file: str) -> pd.DataFrame:
    """
    This function extracts the data the researcher is interested in

    In this case we extract from the zipfile:
    * The file names
    * The compressed file size
    * The file size

    You could extract anything here
    """
    out = pd.DataFrame()

    try:
        file = zipfile.ZipFile(zip_file)
        data = []
        for name in file.namelist():
            info = file.getinfo(name)
            data.append((name, info.compress_size, info.file_size))

        out = pd.DataFrame(data, columns=["File name", "Compressed file size", "File size"])

    except Exception as e:
        print(f"Something went wrong: {e}")

    return out


def validate_the_participants_input(zip_file: str) -> bool:
    """
    Check if the participant actually submitted a zipfile
    Returns True if participant submitted a zipfile, otherwise False

    In reality you need to do a lot more validation.
    Some things you could check:
    - Check if the the file(s) are the correct format (json, html, binary, etc.)
    - If the files are in the correct language
    """

    try:
        with zipfile.ZipFile(zip_file) as zf:
            return True
    except zipfile.BadZipFile:
        return False


def render_end_page():
    """
    Renders a thank you page
    """
    page = props.PropsUIPageEnd()
    return CommandUIRender(page)


def render_page(platform: str, body):
    """
    Renders the UI components
    """
    header = props.PropsUIHeader(props.Translatable({"en": platform, "nl": platform }))
    footer = props.PropsUIFooter()
    page = props.PropsUIPageDonation(platform, header, body, footer)
    return CommandUIRender(page)


def generate_retry_prompt(platform: str) -> props.PropsUIPromptConfirm:
    text = props.Translatable({
        "en": f"Unfortunately, we cannot process your {platform} file. Continue, if you are sure that you selected the right file. Try again to select a different file.",
        "nl": f"Helaas, kunnen we uw {platform} bestand niet verwerken. Weet u zeker dat u het juiste bestand heeft gekozen? Ga dan verder. Probeer opnieuw als u een ander bestand wilt kiezen."
    })
    ok = props.Translatable({
        "en": "Try again",
        "nl": "Probeer opnieuw"
    })
    cancel = props.Translatable({
        "en": "Continue",
        "nl": "Verder"
    })
    return props.PropsUIPromptConfirm(text, ok, cancel)


def generate_file_prompt(platform, extensions) -> props.PropsUIPromptFileInput:
    description = props.Translatable({
        "en": f"Please follow the download instructions and choose the file that you stored on your device. Click “Skip” at the right bottom, if you do not have a {platform} file. ",
        "nl": f"Volg de download instructies en kies het bestand dat u opgeslagen heeft op uw apparaat. Als u geen {platform} bestand heeft klik dan op “Overslaan” rechts onder."
    })
    return props.PropsUIPromptFileInput(description, extensions)


def generate_consent_prompt(*args: pd.DataFrame) -> props.PropsUIPromptConsentForm:
    description = props.Translatable({
       "en": "Below you will find meta data about the contents of the zip file you submitted. Please review the data carefully and remove any information you do not wish to share. If you would like to share this data, click on the 'Yes, share for research' button at the bottom of this page. By sharing this data, you contribute to research <insert short explanation about your research here>.",
       "nl": "Hieronder ziet u gegevens over de zip die u heeft ingediend. Bekijk de gegevens zorgvuldig, en verwijder de gegevens die u niet wilt delen. Als u deze gegevens wilt delen, klik dan op de knop 'Ja, deel voor onderzoek' onderaan deze pagina. Door deze gegevens te delen draagt u bij aan onderzoek over <korte zin over het onderzoek>."
    })

    donate_question = props.Translatable({
       "en": "Do you want to share this data for research?",
       "nl": "Wilt u deze gegevens delen voor onderzoek?"
    })

    donate_button = props.Translatable({
       "en": "Yes, share for research",
       "nl": "Ja, deel voor onderzoek"
    })

    tables = [] 
    for index, df in enumerate(args):
        table_title = props.Translatable({
            "en": f"The contents of your zipfile contents (Table {index + 1}/{len(args)})",
            "nl": "De inhoud van uw zip bestand"
        })
        wordcloud = {
            "title": {
                "en": "You can also add visualizations", 
                "nl": "You can also add visualizations"
            },
            "type": "wordcloud",
            "textColumn": "File name",
            "tokenize": True,
        }
        tables.append(props.PropsUIPromptConsentFormTable(f"zip_contents_{index}", table_title, df, visualizations=[wordcloud]))

    return props.PropsUIPromptConsentForm(
       tables,
       [],
       description = description,
       donate_question = donate_question,
       donate_button = donate_button
    )


def donate(key, json_string):
    return CommandSystemDonate(key, json_string)


def exit_port(code, info):
    return CommandSystemExit(code, info)


##################################################################################
# Exercise for the reader

# Add an extra table to the output
# This table should calculate 2 aggegrate statistics about your the files in your zipfile

# 1. it should give the total number of files in the zipfile
# 2. it should give the total number of bytes of all files in the zipfile
# 3. As a bonus: count the number of times the letter a occurs in all text files in the zipfile. By all means use AI to find out how to do this

# Depending on your data the table could look like this:
# | Statistic | Value |
# -----------------------------
# | Total number of files | 12 | 
# | Total number of bytes | 762376 | 
# | Total occurrences of 'a' in text files | 2378 | 


##################################################################################
# Hints

# Hint 1: Write a function that extracts the statistics and put them in a dataframe. 
#  In order to do that you can copy extract_the_data_you_are_interested_in() and then modify it so it extracts the total number of files and bytes

# Hint 2: If you wrote that function, then
# Changes these lines:
# extracted_data = extract_the_data_you_are_interested_in(file_prompt_result.value)
# consent_prompt = generate_consent_prompt(extracted_data)

# to:
# extracted_data = extract_the_data_you_are_interested_in(file_prompt_result.value)
# extracted_data_statistics = extract_statistics_you_are_interested_in(file_prompt_result.value)
# consent_prompt = generate_consent_prompt(extracted_data, extracted_data_statistics)

##################################################################################
# Answer:

# Uncomment all these lines to see the answer in action

#def extract_statistics_you_are_interested_in(zip_file: str) -> pd.DataFrame:
#    """
#    Function that extracts the desired statistics
#    """
#    out = pd.DataFrame()
#    count = 0 
#    total_number_of_bytes = 0
#    total_a_count = 0
#
#    try:
#        file = zipfile.ZipFile(zip_file)
#        for name in file.namelist():
#            info = file.getinfo(name)
#            count += 1
#            total_number_of_bytes += info.file_size
#
#            # Check if the file is a text file
#            # if so, open it and count the letter a
#            if name.endswith('.txt'):
#                with file.open(name) as txt_file:
#                    content = txt_file.read().decode('utf-8')
#                    total_a_count += content.count('a')
#
#        data = [
#            ("Total number of files", count),
#            ("Total number of bytes", total_number_of_bytes),
#            ("Total occurrences of 'a' in text files", total_a_count),
#        ]
#
#        out = pd.DataFrame(data, columns=["Statistic", "Value"])
#
#    except Exception as e:
#        print(f"Something went wrong: {e}")
#
#    return out
#
#
#def process(session_id: str):
#    platform = "Platform of interest"
#
#    # Start of the data donation flow
#    while True:
#        # Ask the participant to submit a file
#        file_prompt = generate_file_prompt(platform, "application/zip, text/plain")
#        file_prompt_result = yield render_page(platform, file_prompt)
#
#        # If the participant submitted a file: continue
#        if file_prompt_result.__type__ == 'PayloadString':
#
#            # Validate the file the participant submitted
#            # In general this is wise to do 
#            is_data_valid = validate_the_participants_input(file_prompt_result.value)
#
#            # Happy flow:
#            # The file the participant submitted is valid
#            if is_data_valid == True:
#
#                # Extract the data you as a researcher are interested in, and put it in a pandas DataFrame
#                # Show this data to the participant in a table on screen
#                # The participant can now decide to donate
#                extracted_data = extract_the_data_you_are_interested_in(file_prompt_result.value)
#                extracted_data_statistics = extract_statistics_you_are_interested_in(file_prompt_result.value)
#                consent_prompt = generate_consent_prompt(extracted_data, extracted_data_statistics)
#                consent_prompt_result = yield render_page(platform, consent_prompt)
#
#                # If the participant wants to donate the data gets donated
#                if consent_prompt_result.__type__ == "PayloadJSON":
#                    yield donate(f"{session_id}-{platform}", consent_prompt_result.value)
#
#                break
#
#            # Sad flow:
#            # The data was not valid, ask the participant to retry
#            if is_data_valid == False:
#                retry_prompt = generate_retry_prompt(platform)
#                retry_prompt_result = yield render_page(platform, retry_prompt)
#
#                # The participant wants to retry: start from the beginning
#                if retry_prompt_result.__type__ == 'PayloadTrue':
#                    continue
#                # The participant does not want to retry or pressed skip
#                else:
#                    break
#
#        # The participant did not submit a file and pressed skip
#        else:
#            break
#
#    yield exit_port(0, "Success")
#    yield render_end_page()
#

================
File: src/framework/processing/py/poetry.lock
================
# This file is automatically @generated by Poetry 1.6.1 and should not be changed by hand.

[[package]]
name = "colorama"
version = "0.4.6"
description = "Cross-platform colored terminal text."
optional = false
python-versions = "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7"
files = [
    {file = "colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6"},
    {file = "colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44"},
]

[[package]]
name = "iniconfig"
version = "2.0.0"
description = "brain-dead simple config-ini parsing"
optional = false
python-versions = ">=3.7"
files = [
    {file = "iniconfig-2.0.0-py3-none-any.whl", hash = "sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374"},
    {file = "iniconfig-2.0.0.tar.gz", hash = "sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3"},
]

[[package]]
name = "numpy"
version = "1.25.2"
description = "Fundamental package for array computing in Python"
optional = false
python-versions = ">=3.9"
files = [
    {file = "numpy-1.25.2-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:db3ccc4e37a6873045580d413fe79b68e47a681af8db2e046f1dacfa11f86eb3"},
    {file = "numpy-1.25.2-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:90319e4f002795ccfc9050110bbbaa16c944b1c37c0baeea43c5fb881693ae1f"},
    {file = "numpy-1.25.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dfe4a913e29b418d096e696ddd422d8a5d13ffba4ea91f9f60440a3b759b0187"},
    {file = "numpy-1.25.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f08f2e037bba04e707eebf4bc934f1972a315c883a9e0ebfa8a7756eabf9e357"},
    {file = "numpy-1.25.2-cp310-cp310-musllinux_1_1_x86_64.whl", hash = "sha256:bec1e7213c7cb00d67093247f8c4db156fd03075f49876957dca4711306d39c9"},
    {file = "numpy-1.25.2-cp310-cp310-win32.whl", hash = "sha256:7dc869c0c75988e1c693d0e2d5b26034644399dd929bc049db55395b1379e044"},
    {file = "numpy-1.25.2-cp310-cp310-win_amd64.whl", hash = "sha256:834b386f2b8210dca38c71a6e0f4fd6922f7d3fcff935dbe3a570945acb1b545"},
    {file = "numpy-1.25.2-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:c5462d19336db4560041517dbb7759c21d181a67cb01b36ca109b2ae37d32418"},
    {file = "numpy-1.25.2-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:c5652ea24d33585ea39eb6a6a15dac87a1206a692719ff45d53c5282e66d4a8f"},
    {file = "numpy-1.25.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0d60fbae8e0019865fc4784745814cff1c421df5afee233db6d88ab4f14655a2"},
    {file = "numpy-1.25.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:60e7f0f7f6d0eee8364b9a6304c2845b9c491ac706048c7e8cf47b83123b8dbf"},
    {file = "numpy-1.25.2-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:bb33d5a1cf360304754913a350edda36d5b8c5331a8237268c48f91253c3a364"},
    {file = "numpy-1.25.2-cp311-cp311-win32.whl", hash = "sha256:5883c06bb92f2e6c8181df7b39971a5fb436288db58b5a1c3967702d4278691d"},
    {file = "numpy-1.25.2-cp311-cp311-win_amd64.whl", hash = "sha256:5c97325a0ba6f9d041feb9390924614b60b99209a71a69c876f71052521d42a4"},
    {file = "numpy-1.25.2-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:b79e513d7aac42ae918db3ad1341a015488530d0bb2a6abcbdd10a3a829ccfd3"},
    {file = "numpy-1.25.2-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:eb942bfb6f84df5ce05dbf4b46673ffed0d3da59f13635ea9b926af3deb76926"},
    {file = "numpy-1.25.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:3e0746410e73384e70d286f93abf2520035250aad8c5714240b0492a7302fdca"},
    {file = "numpy-1.25.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d7806500e4f5bdd04095e849265e55de20d8cc4b661b038957354327f6d9b295"},
    {file = "numpy-1.25.2-cp39-cp39-musllinux_1_1_x86_64.whl", hash = "sha256:8b77775f4b7df768967a7c8b3567e309f617dd5e99aeb886fa14dc1a0791141f"},
    {file = "numpy-1.25.2-cp39-cp39-win32.whl", hash = "sha256:2792d23d62ec51e50ce4d4b7d73de8f67a2fd3ea710dcbc8563a51a03fb07b01"},
    {file = "numpy-1.25.2-cp39-cp39-win_amd64.whl", hash = "sha256:76b4115d42a7dfc5d485d358728cdd8719be33cc5ec6ec08632a5d6fca2ed380"},
    {file = "numpy-1.25.2-pp39-pypy39_pp73-macosx_10_9_x86_64.whl", hash = "sha256:1a1329e26f46230bf77b02cc19e900db9b52f398d6722ca853349a782d4cff55"},
    {file = "numpy-1.25.2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4c3abc71e8b6edba80a01a52e66d83c5d14433cbcd26a40c329ec7ed09f37901"},
    {file = "numpy-1.25.2-pp39-pypy39_pp73-win_amd64.whl", hash = "sha256:1b9735c27cea5d995496f46a8b1cd7b408b3f34b6d50459d9ac8fe3a20cc17bf"},
    {file = "numpy-1.25.2.tar.gz", hash = "sha256:fd608e19c8d7c55021dffd43bfe5492fab8cc105cc8986f813f8c3c048b38760"},
]

[[package]]
name = "packaging"
version = "23.1"
description = "Core utilities for Python packages"
optional = false
python-versions = ">=3.7"
files = [
    {file = "packaging-23.1-py3-none-any.whl", hash = "sha256:994793af429502c4ea2ebf6bf664629d07c1a9fe974af92966e4b8d2df7edc61"},
    {file = "packaging-23.1.tar.gz", hash = "sha256:a392980d2b6cffa644431898be54b0045151319d1e7ec34f0cfed48767dd334f"},
]

[[package]]
name = "pandas"
version = "1.5.3"
description = "Powerful data structures for data analysis, time series, and statistics"
optional = false
python-versions = ">=3.8"
files = [
    {file = "pandas-1.5.3-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:3749077d86e3a2f0ed51367f30bf5b82e131cc0f14260c4d3e499186fccc4406"},
    {file = "pandas-1.5.3-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:972d8a45395f2a2d26733eb8d0f629b2f90bebe8e8eddbb8829b180c09639572"},
    {file = "pandas-1.5.3-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:50869a35cbb0f2e0cd5ec04b191e7b12ed688874bd05dd777c19b28cbea90996"},
    {file = "pandas-1.5.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:c3ac844a0fe00bfaeb2c9b51ab1424e5c8744f89860b138434a363b1f620f354"},
    {file = "pandas-1.5.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7a0a56cef15fd1586726dace5616db75ebcfec9179a3a55e78f72c5639fa2a23"},
    {file = "pandas-1.5.3-cp310-cp310-win_amd64.whl", hash = "sha256:478ff646ca42b20376e4ed3fa2e8d7341e8a63105586efe54fa2508ee087f328"},
    {file = "pandas-1.5.3-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:6973549c01ca91ec96199e940495219c887ea815b2083722821f1d7abfa2b4dc"},
    {file = "pandas-1.5.3-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:c39a8da13cede5adcd3be1182883aea1c925476f4e84b2807a46e2775306305d"},
    {file = "pandas-1.5.3-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:f76d097d12c82a535fda9dfe5e8dd4127952b45fea9b0276cb30cca5ea313fbc"},
    {file = "pandas-1.5.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e474390e60ed609cec869b0da796ad94f420bb057d86784191eefc62b65819ae"},
    {file = "pandas-1.5.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:5f2b952406a1588ad4cad5b3f55f520e82e902388a6d5a4a91baa8d38d23c7f6"},
    {file = "pandas-1.5.3-cp311-cp311-win_amd64.whl", hash = "sha256:bc4c368f42b551bf72fac35c5128963a171b40dce866fb066540eeaf46faa003"},
    {file = "pandas-1.5.3-cp38-cp38-macosx_10_9_universal2.whl", hash = "sha256:14e45300521902689a81f3f41386dc86f19b8ba8dd5ac5a3c7010ef8d2932813"},
    {file = "pandas-1.5.3-cp38-cp38-macosx_10_9_x86_64.whl", hash = "sha256:9842b6f4b8479e41968eced654487258ed81df7d1c9b7b870ceea24ed9459b31"},
    {file = "pandas-1.5.3-cp38-cp38-macosx_11_0_arm64.whl", hash = "sha256:26d9c71772c7afb9d5046e6e9cf42d83dd147b5cf5bcb9d97252077118543792"},
    {file = "pandas-1.5.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5fbcb19d6fceb9e946b3e23258757c7b225ba450990d9ed63ccceeb8cae609f7"},
    {file = "pandas-1.5.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:565fa34a5434d38e9d250af3c12ff931abaf88050551d9fbcdfafca50d62babf"},
    {file = "pandas-1.5.3-cp38-cp38-win32.whl", hash = "sha256:87bd9c03da1ac870a6d2c8902a0e1fd4267ca00f13bc494c9e5a9020920e1d51"},
    {file = "pandas-1.5.3-cp38-cp38-win_amd64.whl", hash = "sha256:41179ce559943d83a9b4bbacb736b04c928b095b5f25dd2b7389eda08f46f373"},
    {file = "pandas-1.5.3-cp39-cp39-macosx_10_9_universal2.whl", hash = "sha256:c74a62747864ed568f5a82a49a23a8d7fe171d0c69038b38cedf0976831296fa"},
    {file = "pandas-1.5.3-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:c4c00e0b0597c8e4f59e8d461f797e5d70b4d025880516a8261b2817c47759ee"},
    {file = "pandas-1.5.3-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:a50d9a4336a9621cab7b8eb3fb11adb82de58f9b91d84c2cd526576b881a0c5a"},
    {file = "pandas-1.5.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dd05f7783b3274aa206a1af06f0ceed3f9b412cf665b7247eacd83be41cf7bf0"},
    {file = "pandas-1.5.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9f69c4029613de47816b1bb30ff5ac778686688751a5e9c99ad8c7031f6508e5"},
    {file = "pandas-1.5.3-cp39-cp39-win32.whl", hash = "sha256:7cec0bee9f294e5de5bbfc14d0573f65526071029d036b753ee6507d2a21480a"},
    {file = "pandas-1.5.3-cp39-cp39-win_amd64.whl", hash = "sha256:dfd681c5dc216037e0b0a2c821f5ed99ba9f03ebcf119c7dac0e9a7b960b9ec9"},
    {file = "pandas-1.5.3.tar.gz", hash = "sha256:74a3fd7e5a7ec052f183273dc7b0acd3a863edf7520f5d3a1765c04ffdb3b0b1"},
]

[package.dependencies]
numpy = {version = ">=1.23.2", markers = "python_version >= \"3.11\""}
python-dateutil = ">=2.8.1"
pytz = ">=2020.1"

[package.extras]
test = ["hypothesis (>=5.5.3)", "pytest (>=6.0)", "pytest-xdist (>=1.31)"]

[[package]]
name = "pluggy"
version = "1.3.0"
description = "plugin and hook calling mechanisms for python"
optional = false
python-versions = ">=3.8"
files = [
    {file = "pluggy-1.3.0-py3-none-any.whl", hash = "sha256:d89c696a773f8bd377d18e5ecda92b7a3793cbe66c87060a6fb58c7b6e1061f7"},
    {file = "pluggy-1.3.0.tar.gz", hash = "sha256:cf61ae8f126ac6f7c451172cf30e3e43d3ca77615509771b3a984a0730651e12"},
]

[package.extras]
dev = ["pre-commit", "tox"]
testing = ["pytest", "pytest-benchmark"]

[[package]]
name = "pytest"
version = "7.4.2"
description = "pytest: simple powerful testing with Python"
optional = false
python-versions = ">=3.7"
files = [
    {file = "pytest-7.4.2-py3-none-any.whl", hash = "sha256:1d881c6124e08ff0a1bb75ba3ec0bfd8b5354a01c194ddd5a0a870a48d99b002"},
    {file = "pytest-7.4.2.tar.gz", hash = "sha256:a766259cfab564a2ad52cb1aae1b881a75c3eb7e34ca3779697c23ed47c47069"},
]

[package.dependencies]
colorama = {version = "*", markers = "sys_platform == \"win32\""}
iniconfig = "*"
packaging = "*"
pluggy = ">=0.12,<2.0"

[package.extras]
testing = ["argcomplete", "attrs (>=19.2.0)", "hypothesis (>=3.56)", "mock", "nose", "pygments (>=2.7.2)", "requests", "setuptools", "xmlschema"]

[[package]]
name = "python-dateutil"
version = "2.8.2"
description = "Extensions to the standard Python datetime module"
optional = false
python-versions = "!=3.0.*,!=3.1.*,!=3.2.*,>=2.7"
files = [
    {file = "python-dateutil-2.8.2.tar.gz", hash = "sha256:0123cacc1627ae19ddf3c27a5de5bd67ee4586fbdd6440d9748f8abb483d3e86"},
    {file = "python_dateutil-2.8.2-py2.py3-none-any.whl", hash = "sha256:961d03dc3453ebbc59dbdea9e4e11c5651520a876d0f4db161e8674aae935da9"},
]

[package.dependencies]
six = ">=1.5"

[[package]]
name = "pytz"
version = "2023.3.post1"
description = "World timezone definitions, modern and historical"
optional = false
python-versions = "*"
files = [
    {file = "pytz-2023.3.post1-py2.py3-none-any.whl", hash = "sha256:ce42d816b81b68506614c11e8937d3aa9e41007ceb50bfdcb0749b921bf646c7"},
    {file = "pytz-2023.3.post1.tar.gz", hash = "sha256:7b4fddbeb94a1eba4b557da24f19fdf9db575192544270a9101d8509f9f43d7b"},
]

[[package]]
name = "six"
version = "1.16.0"
description = "Python 2 and 3 compatibility utilities"
optional = false
python-versions = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*"
files = [
    {file = "six-1.16.0-py2.py3-none-any.whl", hash = "sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254"},
    {file = "six-1.16.0.tar.gz", hash = "sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926"},
]

[metadata]
lock-version = "2.0"
python-versions = "^3.11"
content-hash = "190f3d847d562a2464c2f57cde19a966813b9aba5b64c3157a5a738ecc6d359c"

================
File: src/framework/processing/py/pyproject.toml
================
[tool.poetry]
name = "port"
version = "0.0.0"
description = "Port package with Data Donation logic"
authors = ["Emiel van der Veen <e.vanderveen@eyra.co>"]
include = [{ path = "port/assets", format = ["sdist", "wheel"] }]

[tool.poetry.dependencies]
python = "^3.10"
pandas = "^1.5"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

================
File: src/framework/processing/py_worker.js
================
let pyScript

onmessage = (event) => {
  const { eventType } = event.data
  switch (eventType) {
    case 'initialise':
      initialise().then(() => {
        self.postMessage({ eventType: 'initialiseDone' })
      })
      break

    case 'firstRunCycle':
      pyScript = self.pyodide.runPython(`port.start(${event.data.sessionId})`)
      runCycle(null)
      break

    case 'nextRunCycle':
      const { response } = event.data
      unwrap(response).then((userInput) => {
        runCycle(userInput)
      })
      break

    default:
      console.log('[ProcessingWorker] Received unsupported event: ', eventType)
  }
}

function runCycle(payload) {
  console.log('[ProcessingWorker] runCycle ' + JSON.stringify(payload))
  try {
    scriptEvent = pyScript.send(payload)
    self.postMessage({
      eventType: 'runCycleDone',
      scriptEvent: scriptEvent.toJs({
        create_proxies: false,
        dict_converter: Object.fromEntries
      })
    })
  } catch (error) {
    self.postMessage({
      eventType: 'runCycleDone',
      scriptEvent: generateErrorMessage(error.toString())
    })
  }
}

function unwrap(response) {
  console.log('[ProcessingWorker] unwrap response: ' + JSON.stringify(response.payload))
  const directoryName = "/file-input"
  return new Promise((resolve) => {
    switch (response.payload.__type__) {
      case 'PayloadFile':
        const file = response.payload.value
        copyFileToPyFS([file], directoryName)
        resolve({ __type__: 'PayloadString', value: `${directoryName}/${file.name}`})
        break

      case 'PayloadFileArray':
        const filePaths = []
        const files = response.payload.value
        for (const file of files) {
          filePaths.push(`${directoryName}/${file.name}`)
        }
        copyFileToPyFS(files, directoryName)
        resolve({ __type__: 'PayloadStringArray', value: filePaths })
        break

      default:
        resolve(response.payload)
    }
  })
}

function copyFileToPyFS(files, directoryName) {
  const pathStats = self.pyodide.FS.analyzePath(directoryName)
  if (!pathStats.exists) {
    self.pyodide.FS.mkdir(directoryName)
  } else {
    self.pyodide.FS.unmount(directoryName)
  }
  self.pyodide.FS.mount(
    self.pyodide.FS.filesystems.WORKERFS,
    {
      files: files
    },
    directoryName
  )
}

function initialise() {
  console.log('[ProcessingWorker] initialise')
  return startPyodide()
    .then((pyodide) => {
      self.pyodide = pyodide
      return loadPackages()
    })
    .then(() => {
      return installPortPackage()
    })
}

function startPyodide() {
  importScripts('https://cdn.jsdelivr.net/pyodide/v0.24.0/full/pyodide.js')

  console.log('[ProcessingWorker] loading Pyodide')
  return loadPyodide({
    indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.24.0/full/'
  })
}

function loadPackages() {
  console.log('[ProcessingWorker] loading packages')
  return self.pyodide.loadPackage(['micropip', 'numpy', 'pandas'])
}

function installPortPackage() {
  console.log('[ProcessingWorker] load port package')
  return self.pyodide.runPythonAsync(`
    import micropip
    await micropip.install("../../port-0.0.0-py3-none-any.whl", deps=False)
    import port
  `);  
}

function generateErrorMessage(stacktrace) {
  return {
    __type__: "CommandUIRender",
    page: {
      __type__: "PropsUIPageError",
      stacktrace: stacktrace
    }
  }
}

================
File: src/framework/processing/worker_engine.ts
================
import { CommandHandler, ProcessingEngine } from '../types/modules'
import { CommandSystemEvent, isCommand, Response } from '../types/commands'

export default class WorkerProcessingEngine implements ProcessingEngine {
  sessionId: String
  worker: Worker
  commandHandler: CommandHandler

  resolveInitialized!: () => void
  resolveContinue!: () => void

  constructor (sessionId: string, worker: Worker, commandHandler: CommandHandler) {
    this.sessionId = sessionId
    this.commandHandler = commandHandler
    this.worker = worker
    this.worker.onerror = console.log
    this.worker.onmessage = (event) => {
      console.log(
        '[WorkerProcessingEngine] Received event from worker: ',
        event.data.eventType
      )
      this.handleEvent(event)
    }
  }

  sendSystemEvent (name: string): void {
    const command: CommandSystemEvent = { __type__: 'CommandSystemEvent', name }
    this.commandHandler.onCommand(command).then(
      () => {},
      () => {}
    )
  }

  handleEvent (event: any): void {
    const { eventType } = event.data
    console.log('[ReactEngine] received eventType: ', eventType)
    switch (eventType) {
      case 'initialiseDone':
        console.log('[ReactEngine] received: initialiseDone')
        this.resolveInitialized()
        break

      case 'runCycleDone':
        console.log('[ReactEngine] received: event', event.data.scriptEvent)
        this.handleRunCycle(event.data.scriptEvent)
        break
      default:
        console.log(
          '[ReactEngine] received unsupported flow event: ',
          eventType
        )
    }
  }

  start (): void {
    console.log('[WorkerProcessingEngine] started')

    const waitForInitialization: Promise<void> = this.waitForInitialization()

    waitForInitialization.then(
      () => {
        this.sendSystemEvent('initialized')
        this.firstRunCycle()
      },
      () => {}
    )
  }

  async waitForInitialization (): Promise<void> {
    return await new Promise<void>((resolve) => {
      this.resolveInitialized = resolve
      this.worker.postMessage({ eventType: 'initialise' })
    })
  }

  firstRunCycle (): void {
    this.worker.postMessage({ eventType: 'firstRunCycle', sessionId: this.sessionId })
  }

  nextRunCycle (response: Response): void {
    this.worker.postMessage({ eventType: 'nextRunCycle', response })
  }

  terminate (): void {
    this.worker.terminate()
  }

  handleRunCycle (command: any): void {
    if (isCommand(command)) {
      this.commandHandler.onCommand(command).then(
        (response) => this.nextRunCycle(response),
        () => {}
      )
    }
  }
}

================
File: src/framework/types/commands.ts
================
import { isInstanceOf } from '../helpers'
import { isPropsUIPage, PropsUIPage } from './pages'

export interface Table {
  __type__: 'Table'
  id: string
  title: Text
  data: any
}
export function isTable (arg: any): arg is Table {
  return isInstanceOf<Table>(arg, 'Table', ['id', 'title', 'data'])
}

export interface Response {
  __type__: 'Response'
  command: Command
  payload: Payload
}
export function isResponse (arg: any): arg is Response {
  return isInstanceOf<Response>(arg, 'Response', ['command', 'payload']) && isCommand(arg.command)
}

export type Payload =
  PayloadResolved |
  PayloadRejected

export type PayloadRejected =
  PayloadFalse |
  PayloadError

export interface PayloadFalse {
  __type__: 'PayloadFalse'
  value: false
}

export interface PayloadError {
  __type__: 'PayloadError'
  value: string
}

export type PayloadResolved =
  PayloadVoid |
  PayloadTrue |
  PayloadString |
  PayloadFile |
  PayloadFileArray |
  PayloadJSON

export interface PayloadVoid {
  __type__: 'PayloadVoid'
  value: undefined
}

export interface PayloadTrue {
  __type__: 'PayloadTrue'
  value: true
}

export interface PayloadString {
  __type__: 'PayloadString'
  value: string
}

export interface PayloadFile {
  __type__: 'PayloadFile'
  value: File
}

export interface PayloadFileArray {
  __type__: 'PayloadFileArray'
  value: File[]
}

export interface PayloadJSON {
  __type__: 'PayloadJSON'
  value: string
}
export function isPayloadJSON (arg: any): arg is PayloadJSON {
  return isInstanceOf<PayloadJSON>(arg, 'PayloadJSON', ['value'])
}

export type Command =
  CommandUI |
  CommandSystem

export function isCommand (arg: any): arg is Command {
  return isCommandUI(arg) || isCommandSystem(arg)
}

export type CommandSystem =
  CommandSystemDonate |
  CommandSystemEvent |
  CommandSystemExit

export function isCommandSystem (arg: any): arg is CommandSystem {
  return isCommandSystemDonate(arg) || isCommandSystemEvent(arg) || isCommandSystemExit(arg)
}

export interface CommandSystemEvent {
  __type__: 'CommandSystemEvent'
  name: string
}
export function isCommandSystemEvent (arg: any): arg is CommandSystemEvent {
  return isInstanceOf<CommandSystemEvent>(arg, 'CommandSystemEvent', ['name'])
}

export interface CommandSystemExit {
  __type__: 'CommandSystemExit'
  code: number
  info: string
}
export function isCommandSystemExit (arg: any): arg is CommandSystemExit {
  return isInstanceOf<CommandSystemExit>(arg, 'CommandSystemExit', ['code', 'info'])
}

export type CommandUI =
  CommandUIRender

export function isCommandUI (arg: any): arg is CommandUI {
  return isCommandUIRender(arg)
}

export interface CommandSystemDonate {
  __type__: 'CommandSystemDonate'
  key: string
  json_string: string
}
export function isCommandSystemDonate (arg: any): arg is CommandSystemDonate {
  return isInstanceOf<CommandSystemDonate>(arg, 'CommandSystemDonate', ['key', 'json_string'])
}

export interface CommandUIRender {
  __type__: 'CommandUIRender'
  page: PropsUIPage
}
export function isCommandUIRender (arg: any): arg is CommandUIRender {
  return isInstanceOf<CommandUIRender>(arg, 'CommandUIRender', ['page']) && isPropsUIPage(arg.page)
}

================
File: src/framework/types/elements.ts
================
import { isInstanceOf, isLike } from "../helpers"
import {} from "./commands"
import { isPropsUIPage, PropsUIPage } from "./pages"
import { isPropsUIPrompt, PropsUIPrompt } from "./prompts"

export type PropsUI =
  | PropsUIText
  | PropsUIButton
  | PropsUICheckBox
  | PropsUIRadioItem
  | PropsUISpinner
  | PropsUIProgressBar
  | PropsUIHeader
  | PropsUITable
  | PropsUISearchBar
  | PropsUIPage
  | PropsUIPrompt

export type PropsUIText =
  | PropsUITextTitle0
  | PropsUITextTitle1
  | PropsUITextTitle2
  | PropsUITextTitle3
  | PropsUITextTitle6
  | PropsUITextBodyLarge
  | PropsUITextLabel

export type PropsUIButton =
  | PropsUIButtonPrimary
  | PropsUIButtonSecundary
  | PropsUIButtonBack
  | PropsUIButtonForward
  | PropsUIButtonIconBack
  | PropsUIButtonIconForward
  | PropsUIButtonIcon
  | PropsUIButtonLabel
  | PropsUIButtonIconLabel

// UI

export function isPropsUI(arg: any): arg is PropsUI {
  return (
    isPropsUIText(arg) ||
    isPropsUIButton(arg) ||
    isPropsUISpinner(arg) ||
    isPropsUIProgress(arg) ||
    isPropsUIHeader(arg) ||
    isPropsUITable(arg) ||
    isPropsUIPage(arg) ||
    isPropsUIPrompt(arg)
  )
}

// TEXTS

export function isPropsUIText(arg: any): arg is PropsUIText {
  return (
    isPropsUITextTitle0(arg) ||
    isPropsUITextTitle0(arg) ||
    isPropsUITextTitle1(arg) ||
    isPropsUITextTitle2(arg) ||
    isPropsUITextTitle3(arg) ||
    isPropsUITextTitle4(arg) ||
    isPropsUITextTitle6(arg) ||
    isPropsUITextBodyLarge(arg) ||
    isPropsUITextBodyMedium(arg) ||
    isPropsUITextLabel(arg) ||
    isPropsUITextCaption(arg)
  )
}

export interface PropsUITextLabel {
  __type__: "PropsUITextLabel"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextLabel(arg: any): arg is PropsUITextLabel {
  return isInstanceOf<PropsUITextLabel>(arg, "PropsUITextLabel", ["text", "color", "margin"])
}

export interface PropsUITextCaption {
  __type__: "PropsUITextCaption"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextCaption(arg: any): arg is PropsUITextCaption {
  return isInstanceOf<PropsUITextCaption>(arg, "PropsUITextCaption", ["text", "color", "margin"])
}

export interface PropsUITextBodyLarge {
  __type__: "PropsUITextBodyLarge"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextBodyLarge(arg: any): arg is PropsUITextBodyLarge {
  return isInstanceOf<PropsUITextBodyLarge>(arg, "PropsUITextBodyLarge", ["text", "color", "margin"])
}

export interface PropsUITextBodyMedium {
  __type__: "PropsUITextBodyMedium"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextBodyMedium(arg: any): arg is PropsUITextBodyMedium {
  return isInstanceOf<PropsUITextBodyMedium>(arg, "PropsUITextBodyMedium", ["text", "color", "margin"])
}

export interface PropsUITextBodySmall {
  __type__: "PropsUITextBodySmall"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextBodySmall(arg: any): arg is PropsUITextBodySmall {
  return isInstanceOf<PropsUITextBodySmall>(arg, "PropsUITextBodySmall", ["text", "color", "margin"])
}

export interface PropsUITextTitle0 {
  __type__: "PropsUITextTitle0"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextTitle0(arg: any): arg is PropsUITextTitle0 {
  return isInstanceOf<PropsUITextTitle0>(arg, "PropsUITextTitle0", ["text", "color", "margin"])
}

export interface PropsUITextTitle1 {
  __type__: "PropsUITextTitle1"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextTitle1(arg: any): arg is PropsUITextTitle1 {
  return isInstanceOf<PropsUITextTitle1>(arg, "PropsUITextTitle1", ["text", "color", "margin"])
}

export interface PropsUITextTitle2 {
  __type__: "PropsUITextTitle2"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextTitle2(arg: any): arg is PropsUITextTitle2 {
  return isInstanceOf<PropsUITextTitle2>(arg, "PropsUITextTitle2", ["text", "color", "margin"])
}

export interface PropsUITextTitle3 {
  __type__: "PropsUITextTitle3"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextTitle3(arg: any): arg is PropsUITextTitle3 {
  return isInstanceOf<PropsUITextTitle3>(arg, "PropsUITextTitle3", ["text", "color", "margin"])
}

export interface PropsUITextTitle4 {
  __type__: "PropsUITextTitle4"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextTitle4(arg: any): arg is PropsUITextTitle4 {
  return isInstanceOf<PropsUITextTitle4>(arg, "PropsUITextTitle4", ["text", "color", "margin"])
}

export interface PropsUITextTitle6 {
  __type__: "PropsUITextTitle6"
  text: string
  color?: string
  margin?: string
}
export function isPropsUITextTitle6(arg: any): arg is PropsUITextTitle6 {
  return isInstanceOf<PropsUITextTitle6>(arg, "PropsUITextTitle6", ["text", "color", "margin"])
}

// BUTTONS

export function isPropsUIButton(arg: any): arg is PropsUIButton {
  return (
    isPropsUIButtonPrimary(arg) ||
    isPropsUIButtonSecundary(arg) ||
    isPropsUIButtonBack(arg) ||
    isPropsUIButtonForward(arg) ||
    isPropsUIButtonIconBack(arg) ||
    isPropsUIButtonIconForward(arg) ||
    isPropsUIButtonIcon(arg) ||
    isPropsUIButtonLabel(arg) ||
    isPropsUIButtonIconLabel(arg)
  )
}

export interface PropsUIButtonPrimary {
  __type__: "PropsUIButtonPrimary"
  label: string
  color?: string
  enabled?: boolean
  spinning?: boolean
  onClick: () => void
}
export function isPropsUIButtonPrimary(arg: any): arg is PropsUIButtonPrimary {
  return isInstanceOf<PropsUIButtonPrimary>(arg, "PropsUIButtonPrimary", ["label", "color", "onClick"])
}

export interface PropsUIButtonSecundary {
  __type__: "PropsUIButtonSecundary"
  label: string
  color?: string
  onClick: () => void
}
export function isPropsUIButtonSecundary(arg: any): arg is PropsUIButtonSecundary {
  return isInstanceOf<PropsUIButtonSecundary>(arg, "PropsUIButtonSecundary", ["label", "color", "onClick"])
}

export interface PropsUIButtonBack {
  __type__: "PropsUIButtonBack"
  label: string
  onClick: () => void
}
export function isPropsUIButtonBack(arg: any): arg is PropsUIButtonBack {
  return isInstanceOf<PropsUIButtonBack>(arg, "PropsUIButtonBack", ["label", "onClick"])
}

export interface PropsUIButtonForward {
  __type__: "PropsUIButtonForward"
  label: string
  onClick: () => void
}
export function isPropsUIButtonForward(arg: any): arg is PropsUIButtonForward {
  return isInstanceOf<PropsUIButtonForward>(arg, "PropsUIButtonForward", ["label", "onClick"])
}

export interface PropsUIButtonIconBack {
  __type__: "PropsUIButtonIconBack"
  onClick: () => void
}
export function isPropsUIButtonIconBack(arg: any): arg is PropsUIButtonIconBack {
  return isInstanceOf<PropsUIButtonIconBack>(arg, "PropsUIButtonIconBack", ["onClick"])
}

export interface PropsUIButtonIconForward {
  __type__: "PropsUIButtonIconForward"
  onClick: () => void
}
export function isPropsUIButtonIconForward(arg: any): arg is PropsUIButtonIconForward {
  return isInstanceOf<PropsUIButtonIconForward>(arg, "PropsUIButtonIconForward", ["onClick"])
}

export interface PropsUIButtonIcon {
  __type__: "PropsUIButtonIcon"
  icon: string
  onClick: () => void
}
export function isPropsUIButtonIcon(arg: any): arg is PropsUIButtonIcon {
  return isInstanceOf<PropsUIButtonIcon>(arg, "PropsUIButtonIcon", ["icon", "onClick"])
}

export interface PropsUIButtonIconLabel {
  __type__: "PropsUIButtonIconLabel"
  icon: string
  label: string
  color?: string
  alignment?: string
  onClick: () => void
}
export function isPropsUIButtonIconLabel(arg: any): arg is PropsUIButtonIconLabel {
  return isInstanceOf<PropsUIButtonIconLabel>(arg, "PropsUIButtonIconLabel", [
    "icon",
    "label",
    "color",
    "alignment",
    "onClick",
  ])
}

export interface PropsUIButtonLabel {
  __type__: "PropsUIButtonLabel"
  label: string
  color?: string
  onClick: () => void
}
export function isPropsUIButtonLabel(arg: any): arg is PropsUIButtonLabel {
  return isInstanceOf<PropsUIButtonLabel>(arg, "PropsUIButtonLabel", ["label", "onClick"])
}

// Radio item

export interface PropsUIRadioItem {
  id: number
  value: string
  selected: boolean
  onSelect: () => void
}
export function isPropsUIRadioItem(arg: any): arg is PropsUIRadioItem {
  return isInstanceOf<PropsUIRadioItem>(arg, "PropsUIRadioItem", ["id", "value", "selected", "onSelect"])
}

// Check box

export interface PropsUICheckBox {
  id: string
  selected: boolean
  size: string
  onSelect: () => void
}
export function isPropsUICheckBox(arg: any): arg is PropsUICheckBox {
  return isInstanceOf<PropsUICheckBox>(arg, "PropsUICheckBox", ["id", "selected", "onSelect"])
}

// SPINNER

export interface PropsUISpinner {
  __type__: "PropsUISpinner"
  spinning?: boolean
  color?: string
}
export function isPropsUISpinner(arg: any): arg is PropsUISpinner {
  return isInstanceOf<PropsUISpinner>(arg, "PropsUISpinner", ["color", "spinning"])
}


// PROGRESS BAR

export interface PropsUIProgressBar {
  __type__: 'PropsUIProgressBar'
  percentage: number
}
export function isPropsUIProgress (arg: any): arg is PropsUIProgressBar {
  return isInstanceOf<PropsUIProgressBar>(arg, 'PropsUIProgressBar', ['percentage'])
}

// Header

export interface PropsUIHeader {
  __type__: "PropsUIHeader"
  title: Text
}
export function isPropsUIHeader(arg: any): arg is PropsUIHeader {
  return isInstanceOf<PropsUIHeader>(arg, "PropsUIHeader", ["title"])
}

// TABLE

export interface PropsUITable {
  __type__: "PropsUITable"
  id: string
  head: PropsUITableHead
  body: PropsUITableBody
  pageSize?: number
}
export function isPropsUITable(arg: any): arg is PropsUITable {
  return isInstanceOf<PropsUITable>(arg, "PropsUITable", ["pageSize", "id", "head", "body"])
}

export interface PropsUITableHead {
  __type__: "PropsUITableHead"
  cells: string[]
}
export function isPropsUITableHead(arg: any): arg is PropsUITableHead {
  return isInstanceOf<PropsUITableHead>(arg, "PropsUITableHead", ["cells"])
}

export interface PropsUITableBody {
  __type__: "PropsUITableBody"
  rows: PropsUITableRow[]
}
export function isPropsUITableBody(arg: any): arg is PropsUITableBody {
  return isInstanceOf<PropsUITableBody>(arg, "PropsUITableBody", ["rows"])
}

// KW: removed __type__ for rows and cells, because it inflates the table memory size
export interface PropsUITableRow {
  id: string
  cells: string[]
}
export function isPropsUITableRow(arg: any): arg is PropsUITableRow {
  return isInstanceOf<PropsUITableRow>(arg, "PropsUITableRow", ["id", "cells"])
}

export interface TableContext {
  title: string
  description: string
  deletedRowCount: number
  annotations: Annotation[]
  originalBody: PropsUITableBody
  deletedRows: string[][]
  visualizations?: any[]
  folded: boolean
}

export type TableWithContext = TableContext & PropsUITable

export interface Annotation {
  row_id: string
  [key: string]: any
}
// SEARCH BAR

export interface PropsUISearchBar {
  __type__: "PropsUISearchBar"
  search: string
  onSearch: (search: string) => void
  placeholder?: string
  debounce?: number
}
export function isPropsUISearchBar(arg: any): arg is PropsUISearchBar {
  return isInstanceOf<PropsUISearchBar>(arg, "PropsUISearchBar", ["placeholder"])
}

// BASE TYPES

export type Text = Translatable | string

export function isText(arg: any): arg is Text {
  return typeof arg === "string" || isTranslatable(arg)
}

export interface Translatable {
  translations: { [locale: string]: string }
}
export function isTranslatable(arg: any): arg is Translatable {
  return isLike<Translatable>(arg, ["translations"])
}

// FOOTER

export interface PropsUIFooter {
  __type__: 'PropsUIFooter'
}
export function isPropsUIFooter (arg: any): arg is PropsUIFooter {
  return isInstanceOf<PropsUIFooter>(arg, 'PropsUIFooter', [])
}

// QUESTION ITEMS

export interface PropsUIQuestionMultipleChoice {
  __type__: 'PropsUIQuestionMultipleChoice'
  id: number
  question: Text
  choices: Text[]
}
export function isPropsUIQuestionMultipleChoice (arg: any): arg is PropsUIQuestionMultipleChoice {
  return isInstanceOf<PropsUIQuestionMultipleChoice>(arg, 'PropsUIQuestionMultipleChoice', ['id', 'question', 'choices'])
}

export interface PropsUIQuestionMultipleChoiceCheckbox {
  __type__: 'PropsUIQuestionMultipleChoiceCheckbox'
  id: number
  question: Text
  choices: Text[]
}
export function isPropsUIQuestionMultipleChoiceCheckbox (arg: any): arg is PropsUIQuestionMultipleChoiceCheckbox {
  return isInstanceOf<PropsUIQuestionMultipleChoiceCheckbox>(arg, 'PropsUIQuestionMultipleChoiceCheckbox', ['id', 'question', 'choices'])
}

export interface PropsUIQuestionOpen {
  __type__: 'PropsUIQuestionOpen'
  id: number
  question: Text
}
export function isPropsUIQuestionOpen (arg: any): arg is PropsUIQuestionOpen {
  return isInstanceOf<PropsUIQuestionOpen>(arg, 'PropsUIQuestionOpen', ['id', 'question'])
}

================
File: src/framework/types/modules.ts
================
import { Command, Response, CommandSystem, CommandUI } from './commands'

export interface ProcessingEngine {
  start: () => void
  commandHandler: CommandHandler
  terminate: () => void
}

export interface VisualisationEngine {
  start: (rootElement: HTMLElement, locale: string) => void
  render: (command: CommandUI) => Promise<Response>
  terminate: () => void
}

export interface Bridge {
  send: (command: CommandSystem) => void
}

export interface CommandHandler {
  onCommand: (command: Command) => Promise<Response>
}

================
File: src/framework/types/pages.ts
================
import { isInstanceOf } from '../helpers'
import { 
    PropsUIHeader,
    PropsUIFooter
} from './elements'
import { 
    PropsUIPromptFileInput, 
    PropsUIPromptFileInputMultiple, 
    PropsUIPromptConfirm,
    PropsUIPromptConsentForm,
    PropsUIPromptRadioInput,
    PropsUIPromptQuestionnaire,
    PropsUIPromptProgress
} from './prompts'

export type PropsUIPage =
  PropsUIPageSplashScreen |
  PropsUIPageDonation |
  PropsUIPageEnd |
  PropsUIPageError

export function isPropsUIPage (arg: any): arg is PropsUIPage {
  return (
    isPropsUIPageDonation(arg) ||
    isPropsUIPageEnd(arg) ||
    isPropsUIPageError(arg)
  )
}

export interface PropsUIPageSplashScreen {
  __type__: 'PropsUIPageSplashScreen'
}

export interface PropsUIPageDonation {
  __type__: 'PropsUIPageDonation'
  platform: string
  header: PropsUIHeader
  body: PropsUIPromptFileInput | PropsUIPromptConfirm | PropsUIPromptProgress | PropsUIPromptConsentForm | PropsUIPromptRadioInput | PropsUIPromptQuestionnaire | PropsUIPromptFileInputMultiple
  footer: PropsUIFooter
}
export function isPropsUIPageDonation (arg: any): arg is PropsUIPageDonation {
  return isInstanceOf<PropsUIPageDonation>(arg, 'PropsUIPageDonation', ['platform', 'header', 'body'])
}

export interface PropsUIPageEnd {
  __type__: 'PropsUIPageEnd'
}
export function isPropsUIPageEnd (arg: any): arg is PropsUIPageEnd {
  return isInstanceOf<PropsUIPageEnd>(arg, 'PropsUIPageEnd', [])
}

export interface PropsUIPageError {
  __type__: 'PropsUIPageError'
  stacktrace: string
}
export function isPropsUIPageError (arg: any): arg is PropsUIPageError {
  return isInstanceOf<PropsUIPageError>(arg, 'PropsUIPageError', ['stacktrace'])
}

================
File: src/framework/types/prompts.ts
================
import { isInstanceOf } from "../helpers"
import {
  PropsUIRadioItem,
  PropsUIQuestionMultipleChoice,
  Text
} from './elements'

export type PropsUIPrompt =
  | PropsUIPromptFileInput
  | PropsUIPromptRadioInput
  | PropsUIPromptConsentForm
  | PropsUIPromptConfirm

export function isPropsUIPrompt(arg: any): arg is PropsUIPrompt {
  return (
    isPropsUIPromptFileInput(arg) ||
    isPropsUIPromptRadioInput(arg) ||
    isPropsUIPromptConsentForm(arg) ||
    isPropsUIPromptQuestionnaire(arg)
  )
}

export interface PropsUIPromptConfirm {
  __type__: "PropsUIPromptConfirm"
  text: Text
  ok: Text
  cancel: Text
}
export function isPropsUIPromptConfirm(arg: any): arg is PropsUIPromptConfirm {
  return isInstanceOf<PropsUIPromptConfirm>(arg, "PropsUIPromptConfirm", ["text", "ok", "cancel"])
}

export interface PropsUIPromptFileInput {
  __type__: "PropsUIPromptFileInput"
  description: Text
  extensions: string
}
export function isPropsUIPromptFileInput (arg: any): arg is PropsUIPromptFileInput {
  return isInstanceOf<PropsUIPromptFileInput>(arg, 'PropsUIPromptFileInput', ['description', 'extensions'])
}

export interface PropsUIPromptFileInputMultiple {
  __type__: "PropsUIPromptFileInputMultiple"
  description: Text
  extensions: string
}
export function isPropsUIPromptFileInputMultiple (arg: any): arg is PropsUIPromptFileInputMultiple {
  return isInstanceOf<PropsUIPromptFileInputMultiple>(arg, 'PropsUIPromptFileInputMultiple', ['description', 'extensions'])
}

export interface PropsUIPromptProgress {
  __type__: 'PropsUIPromptProgress'
  description: Text
  message: string
  percentage?: number
}
export function isPropsUIPromptProgress (arg: any): arg is PropsUIPromptProgress {
  return isInstanceOf<PropsUIPromptProgress>(arg, 'PropsUIPromptProgress', ['description', 'message'])
}

export interface PropsUIPromptRadioInput {
  __type__: "PropsUIPromptRadioInput"
  title: Text
  description: Text
  items: PropsUIRadioItem[]
}
export function isPropsUIPromptRadioInput(arg: any): arg is PropsUIPromptRadioInput {
  return isInstanceOf<PropsUIPromptRadioInput>(arg, "PropsUIPromptRadioInput", ["title", "description", "items"])
}
export interface PropsUIPromptConsentForm {
  __type__: "PropsUIPromptConsentForm"
  description?: Text
  donateQuestion?: Text
  donateButton?: Text
  tables: PropsUIPromptConsentFormTable[]
  metaTables: PropsUIPromptConsentFormTable[]
}
export function isPropsUIPromptConsentForm(arg: any): arg is PropsUIPromptConsentForm {
  return isInstanceOf<PropsUIPromptConsentForm>(arg, "PropsUIPromptConsentForm", ["tables", "metaTables"])
}

export interface PropsUIPromptConsentFormTable {
  __type__: "PropsUIPromptConsentFormTable"
  id: string
  title: Text
  description: Text
  data_frame: any
  visualizations: any
  folded: boolean
}
export function isPropsUIPromptConsentFormTable(arg: any): arg is PropsUIPromptConsentFormTable {
  return isInstanceOf<PropsUIPromptConsentFormTable>(arg, "PropsUIPromptConsentFormTable", [
    "id",
    "title",
    "description",
    "data_frame",
  ])
}

 export interface PropsUIPromptQuestionnaire {
  __type__: 'PropsUIPromptQuestionnaire'
  questions: PropsUIQuestionMultipleChoice[]
  description: Text
 }
 export function isPropsUIPromptQuestionnaire (arg: any): arg is PropsUIPromptQuestionnaire {
  return isInstanceOf<PropsUIPromptQuestionnaire>(arg, 'PropsUIPromptQuestionnaire', ['questions', 'description'])
 }

================
File: src/framework/visualisation/react/ui/elements/bullet.tsx
================
interface PropsUIBullet {
  color?: string
  children: JSX.Element
  frameSize?: string
}

export const Bullet = ({ color = 'bg-primary', frameSize = 'w-7 h-9', children }: PropsUIBullet): JSX.Element => {
  return (
    <div className='flex flex-row'>
      <div className={`flex flex-row items-center flex-shrink-0 ${frameSize}`}>
        <div className={`w-10px h-10px rounded-full overflow-hidden ${color}`} />
      </div>
      {children}
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/elements/button.tsx
================
import { Weak } from '../../../../helpers'
import { PropsUIButtonBack, PropsUIButtonForward, PropsUIButtonIcon, PropsUIButtonIconBack, PropsUIButtonIconForward, PropsUIButtonIconLabel, PropsUIButtonLabel, PropsUIButtonPrimary, PropsUIButtonSecundary } from '../../../../types/elements'

import BackSvg from '../../../../../assets/images/back.svg'
import ForwardSvg from '../../../../../assets/images/forward.svg'
import { Spinner } from './spinner'

function spinnerColor (buttonColor: string): string {
  if (buttonColor.includes('bg-tertiary')) {
    return 'dark'
  }
  return 'light'
}

export const PrimaryButton = ({ label, spinning = false, enabled = true, color = 'bg-primary text-white', onClick }: Weak<PropsUIButtonPrimary>): JSX.Element => {
  return (
    <div className='relative min-w-button'>
      <div className={`flex flex-col items-center leading-none font-button text-button rounded ${enabled ? 'cursor-pointer active:shadow-top4px' : ''} ${color}`} onClick={onClick}>
        <div id='confirm-button' className={`pt-15px pb-15px pr-4 pl-4 ${enabled ? 'active:pt-4 active:pb-14px' : ''} ${spinning ? 'opacity-0' : ''}`}>
          {label}
        </div>
      </div>
      <div className={`absolute top-0 h-full w-full flex flex-col justify-center items-center ${spinning ? '' : 'hidden'}`}>
        <div className='w-5 h-5'>
          <Spinner color={spinnerColor(color)} spinning={spinning} />
        </div>
      </div>
    </div>
  )
}

export const SecondaryButton = ({ label, color = 'bg-delete text-delete', onClick }: Weak<PropsUIButtonSecundary>): JSX.Element => {
  return (
    <div className='relative min-w-button'>
      <div className={`flex flex-col items-center active:shadow-top2px border-2 font-button text-button rounded bg-opacity-0 cursor-pointer ${color}`} onClick={onClick}>
        <div className='pt-13px pb-13px pr-4 pl-4 active:pt-14px active:pb-3'>
          {label}
        </div>
      </div>
    </div>
  )
}

export const BackButton = ({ label, onClick }: Weak<PropsUIButtonBack>): JSX.Element => {
  return <IconLabelButton icon={BackSvg} label={label} onClick={onClick} />
}

export const ForwardButton = ({ label, onClick }: Weak<PropsUIButtonForward>): JSX.Element => {
  return <IconLabelButton icon={ForwardSvg} label={label} onClick={onClick} alignment='right' />
}

export const BackIconButton = ({ onClick }: Weak<PropsUIButtonIconBack>): JSX.Element => {
  return <IconButton icon={BackSvg} onClick={onClick} />
}

export const ForwardIconButton = ({ onClick }: Weak<PropsUIButtonIconForward>): JSX.Element => {
  return <IconButton icon={ForwardSvg} onClick={onClick} />
}

export const IconButton = ({ icon, onClick }: Weak<PropsUIButtonIcon>): JSX.Element => {
  return (
    <div className='active:pt-5px active:pb-3px focus:outline-none cursor-pointer w-6 h-6' onClick={onClick}>
      <div className='flex flex-col items-center h-full w-full'>
        <div className='flex-grow' />
        <div>
          <img className='-mt-2px' src={icon} />
        </div>
        <div className='flex-grow' />
      </div>
    </div>
  )
}

export const IconLabelButton = ({ icon, label, color = 'text-grey1', alignment = 'left', onClick }: Weak<PropsUIButtonIconLabel>): JSX.Element => {
  return (
    <div className='pt-1 pb-1 active:pt-5px active:pb-3px rounded bg-opacity-0 focus:outline-none cursor-pointer ' onClick={onClick}>
      <div className='flex items-center'>
        <div className={`${alignment === 'left' ? '' : 'hidden'}`}>
          <img className='mr-2 -mt-2px' src={icon} alt={label} />
        </div>
        <div className='focus:outline-none'>
          <div className='flex flex-col justify-center h-full items-center'>
            <div className={`flex-wrap text-button font-button ${color}`}>
              {label}
            </div>
          </div>
        </div>
        <div className={`${alignment !== 'left' ? '' : 'hidden'}`}>
          <img className='ml-2 -mt-2px' src={icon} alt={label} />
        </div>
      </div>
    </div>
  )
}

export const LabelButton = ({ label, color = 'text-grey1', onClick }: Weak<PropsUIButtonLabel>): JSX.Element => {
  return (
    <div className={`pt-15px pb-15px active:pt-4 active:pb-14px leading-none font-button text-button rounded pr-4 pl-4 cursor-pointer bg-opacity-0 ${color}`} onClick={onClick}>
      <div id='confirm-button' className='flex-wrap'>
        {label}
      </div>
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/elements/check_box.tsx
================
import { PropsUICheckBox } from '../../../../types/elements'
import CheckSvg from '../../../../../assets/images/check.svg'
import CheckActiveSvg from '../../../../../assets/images/check_active.svg'

export const CheckBox = ({ id, selected, size = 'w-6 h-6', onSelect }: PropsUICheckBox): JSX.Element => {
  return (
    <div id={id} className='radio-item flex flex-row gap-3 cursor-pointer' onClick={onSelect}>
      <div className={`flex-shrink-0  ${size}`}>
        <img src={CheckSvg} id={`${id}-off`} className={`w-full h-full ${selected ? 'hidden' : ''}`} />
        <img src={CheckActiveSvg} id={`${id}-on`} className={`w-full h-full ${selected ? '' : 'hidden'}`} />
      </div>
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/elements/header.tsx
================
import { Weak } from '../../../../helpers'
import { Translator } from '../../../../translator'
import { PropsUIHeader } from '../../../../types/elements'
import { ReactFactoryContext } from '../../factory'
import { Title1 } from './text'

interface Copy {
  title: string
}

type Props = Weak<PropsUIHeader> & ReactFactoryContext

function prepareCopy ({ title, locale }: Props): Copy {
  return {
    title: Translator.translate(title, locale)
  }
}

export const Header = (props: Props): JSX.Element => {
  const { title } = prepareCopy(props)

  return (
    <Title1 text={title} />
  )
}

================
File: src/framework/visualisation/react/ui/elements/instructions.tsx
================
import { Translator } from '../../../../translator'
import { ReactFactoryContext } from '../../factory'
import { Title3 } from './text'
import TwitterSvg from '../../../../../assets/images/twitter.svg'
import FacebookSvg from '../../../../../assets/images/facebook.svg'
import InstagramSvg from '../../../../../assets/images/instagram.svg'
import YoutubeSvg from '../../../../../assets/images/youtube.svg'
import TextBundle from '../../../../text_bundle'
import { Bullet } from './bullet'

const linkTwitter: string = 'https://eyra.co'
const linkFacebook: string = 'https://eyra.co'
const linkInstagram: string = 'https://eyra.co'
const linkYoutube: string = 'https://eyra.co'

interface InstructionsProps {
  platform: string
  locale: string
}

type Props = InstructionsProps & ReactFactoryContext

export const Instructions = (props: Props): JSX.Element => {
  const { title } = prepareCopy(props)
  const { locale } = props
  const platform = props.platform.toLowerCase()

  function renderBullets (bullets: string[]): JSX.Element[] {
    return bullets.map((bullet) => renderBullet(bullet))
  }

  function renderContent (): JSX.Element {
    return (
      <>
        <div className='flex flex-col gap-4 text-bodymedium font-body text-grey2'>
          {renderBullets(bullets[platform][locale])}
          {links[platform][locale]}
        </div>
      </>
    )
  }

  return (
    <div className='flex flex-col gap-6 p-8 border-2 border-grey4 rounded'>
      <div className='flex flex-row gap-8 items-center'>
        <div className='flex-grow'>
          <Title3 text={title} margin='' />
        </div>
        <div className='h-12'>
          <img className='h-12' src={icon[platform]} />
        </div>
      </div>
      {renderContent()}
    </div>
  )
}

interface Copy {
  title: string
}

function prepareCopy ({ platform, locale }: Props): Copy {
  return {
    title: Translator.translate(title, locale)
  }
}

const title = new TextBundle()
  .add('en', 'Download')
  .add('nl', 'Download')

function renderBullet (text: string): JSX.Element {
  return (
    <Bullet frameSize='w-5 h-30px'>
      <div>{text}</div>
    </Bullet>
  )
}

const bulletsTwitterEn: string[] = [
  'Check the email that you received from Twitter',
  'Click on the download link and store the file',
  'Choose the stored file and continue'
]

const bulletsTwitterNl: string[] = [
  'Ga naar de email die u ontvangen heeft van Twitter.',
  'Klik op de link "gedownload” en sla het bestand op',
  'Kies het bestand en ga verder.'
]

const bulletsFacebookEn: string[] = [
  'Check the email that you received from Facebook',
  'Click on the download link and store the file',
  'Choose the stored file and continue'
]

const bulletsFacebookNl: string[] = [
  'Ga naar de email die u ontvangen heeft van Facebook.',
  'Klik op de link “Je gegevens downloaden” en sla het bestand op.',
  'Kies het bestand en ga verder.'
]

const bulletsInstagramEn: string[] = [
  'Check the email that you received from Instagram',
  'Click on the download link and store the file',
  'Choose the stored file and continue'
]

const bulletsInstagramNl: string[] = [
  'Ga naar de email die u ontvangen heeft van Instagram.',
  'Klik op de link “Gegevens downloaden” en sla het bestand op.',
  'Kies het bestand en ga verder.'
]

const bulletsYoutubeEn: string[] = [
  'Check the email that you received from Google Takeout',
  'Click on the download link and store the file',
  'Choose the stored file and continue'
]

const bulletsYoutubeNl: string[] = [
  'Ga naar de email die u ontvangen heeft van Google Takeout.',
  'Klik op de link “Je bestanden downloaden” en sla het bestand op.',
  'Kies het bestand en ga verder.'
]

const bullets: Record<string, Record<string, string[]>> = {
  twitter: {
    en: bulletsTwitterEn,
    nl: bulletsTwitterNl
  },
  facebook: {
    en: bulletsFacebookEn,
    nl: bulletsFacebookNl
  },
  instagram: {
    en: bulletsInstagramEn,
    nl: bulletsInstagramNl
  },
  youtube: {
    en: bulletsYoutubeEn,
    nl: bulletsYoutubeNl
  }
}

function linkEn (link: string): JSX.Element {
  return <div>Click <span className='text-primary underline'><a href={link} target='_blank' rel='noreferrer'>here</a></span> for more extensive instructions</div>
}

function linkNl (link: string): JSX.Element {
  return <div>Klik <span className='text-primary underline'><a href={link} target='_blank' rel='noreferrer'>hier</a></span> voor uitgebreidere instructies</div>
}

const links: Record<string, Record<string, JSX.Element>> = {
  twitter: {
    en: linkEn(linkTwitter),
    nl: linkNl(linkTwitter)
  },
  facebook: {
    en: linkEn(linkFacebook),
    nl: linkNl(linkFacebook)
  },
  instagram: {
    en: linkEn(linkInstagram),
    nl: linkNl(linkInstagram)
  },
  youtube: {
    en: linkEn(linkYoutube),
    nl: linkNl(linkYoutube)
  }
}

const icon: Record<string, string> = {
  twitter: TwitterSvg,
  facebook: FacebookSvg,
  instagram: InstagramSvg,
  youtube: YoutubeSvg
}

================
File: src/framework/visualisation/react/ui/elements/page_icon.tsx
================
interface PropsUIPageIcon {
  index: number
  selected: boolean
  onClick: () => void
}

type Props = PropsUIPageIcon

export const PageIcon = ({ index, selected, onClick }: Props): JSX.Element => {
  function width (): string {
    if (index > 999) return 'w-10'
    if (index > 99) return 'w-9'
    return 'w-8'
  }

  return (
    <div className={`rounded ${width()} h-8 cursor-pointer flex-shrink-0 overflow-hidden ${selected ? 'bg-primary' : 'bg-grey5 '}`} onClick={onClick}>
      <div className='flex flex-row items-center justify-center w-full h-full'>
        <div className={`text-label font-label ${selected ? 'text-white' : 'text-grey2'}`}>
          {`${index}`}
        </div>
      </div>
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/elements/pagination.tsx
================
export interface Props {
  page: number
  setPage: (page: number) => void
  nPages: number
}

export const Pagination = ({ page, setPage, nPages }: Props): JSX.Element => {
  function activeButton (active: boolean): string {
    if (active) return 'text-primary'
    return 'text-grey3 hover:cursor-default'
  }

  return (
    <div className={`flex items-center gap-1 lg:gap-3 p-3 ${nPages <= 1 ? 'invisible' : ''}`}>
      <button className={activeButton(page > 0)} onClick={() => setPage(Math.max(page - 10, 0))}>
        {doubleBackward}
      </button>
      <button className={activeButton(page > 0)} onClick={() => setPage(Math.max(page - 1, 0))}>
        {backward}
      </button>
      <div className='text-center min-w-[2rem] font-title6 text-title6 h-5'>{page + 1}</div>
      <button
        className={activeButton(page < nPages - 1)}
        onClick={() => setPage(Math.min(page + 1, nPages - 1))}
      >
        {forward}
      </button>
      <button
        className={activeButton(page < nPages - 1)}
        onClick={() => setPage(Math.min(page + 10, nPages - 1))}
      >
        {doubleForward}
      </button>
    </div>
  )
}

const backward = (
  <svg
    className=' h-4'
    aria-hidden='true'
    xmlns='http://www.w3.org/2000/svg'
    fill='none'
    viewBox='0 0 6 10'
  >
    <path
      stroke='currentColor'
      strokeLinecap='round'
      strokeLinejoin='round'
      strokeWidth='2'
      d='M5 1 1 5l4 4'
    />
  </svg>
)
const doubleBackward = (
  <svg
    className='h-4'
    aria-hidden='true'
    xmlns='http://www.w3.org/2000/svg'
    fill='none'
    viewBox='0 0 12 10'
  >
    <path
      stroke='currentColor'
      strokeLinecap='round'
      strokeLinejoin='round'
      strokeWidth='2'
      d='M5 1 1 5l4 4m6-8L7 5l4 4'
    />
  </svg>
)
const forward = (
  <svg
    className='h-4 '
    aria-hidden='true'
    xmlns='http://www.w3.org/2000/svg'
    fill='none'
    viewBox='0 0 6 10'
  >
    <path
      stroke='currentColor'
      strokeLinecap='round'
      strokeLinejoin='round'
      strokeWidth='2'
      d='m1 9 4-4-4-4'
    />
  </svg>
)
const doubleForward = (
  <svg
    className='h-4 '
    aria-hidden='true'
    xmlns='http://www.w3.org/2000/svg'
    fill='none'
    viewBox='0 0 12 10'
  >
    <path
      stroke='currentColor'
      strokeLinecap='round'
      strokeLinejoin='round'
      strokeWidth='2'
      d='m7 9 4-4-4-4M1 9l4-4-4-4'
    />
  </svg>
)

================
File: src/framework/visualisation/react/ui/elements/progress_bar.tsx
================
import { Weak } from '../../../../helpers'
import { PropsUIProgressBar } from '../../../../types/elements'

type Props = Weak<PropsUIProgressBar>

export const ProgressBar = ({ percentage }: Props): JSX.Element => {
  return (
    <div id='progress' className='relative w-full overflow-hidden rounded-full'>
      <div className='flex flex-row items-center gap-4'>
        <div className='flex-grow h-4 bg-primarylight' />
      </div>
      <div className='absolute top-0 h-4 bg-primary' style={{ width: `${percentage}%` }} />
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/elements/question_multiple_choice_checkbox.tsx
================
import React from 'react'
import { PropsUIQuestionMultipleChoiceCheckbox } from '../../../../types/elements'
import { Translator } from '../../../../translator'
import { ReactFactoryContext } from '../../factory'
import {Title3 } from './text'

interface parentSetter {
  parentSetter: (arg: any) => any
}

type Props = PropsUIQuestionMultipleChoiceCheckbox & parentSetter & ReactFactoryContext

export const MultipleChoiceQuestionCheckbox = (props: Props): JSX.Element => {
  const { question, choices, id, parentSetter, locale } = props
  const [selectedChoices, setSelectedChoices] = React.useState<string[]>([]);

  const copy = prepareCopy(locale)

  const setParentState = ()  => {
    parentSetter((prevState: any) => {
       prevState[id] = selectedChoices
       return prevState
    })
  }

  React.useEffect(() => {
      setParentState()
  })


  const handleChoiceSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { value, checked } = event.target;
    if (checked) {
      setSelectedChoices((prevSelectedChoices) => [
        ...prevSelectedChoices,
        value,
      ]);
    } else {
      setSelectedChoices((prevSelectedChoices) =>
        prevSelectedChoices.filter((choice) => choice !== value)
      );
    }
  };

  return (
    <div className="p-4">
      <Title3 text={copy.question} />
      <ul className="mt-4 space-y-1">
        {copy.choices.map((choice, index) => (
          <li key={index}>
            <label className="flex items-center">
              <input
                type="checkbox"
                name="choice"
                value={choice}
                checked={selectedChoices.includes(choice)}
                onChange={handleChoiceSelect}
                className="mr-1 form-checkbox"
              />
              {choice}
            </label>
          </li>
        ))}
      </ul>
    </div>
  );

  function prepareCopy (locale: string): Copy {
    return {
      choices: choices.map((choice) => Translator.translate(choice, locale)),
      question: Translator.translate(question, locale)
    }
  }
}

interface Copy {
  choices: string[]
  question: string
}

================
File: src/framework/visualisation/react/ui/elements/question_multiple_choice.tsx
================
import React from 'react'
import { PropsUIQuestionMultipleChoice } from '../../../../types/elements'
import { Translator } from '../../../../translator'
import { ReactFactoryContext } from '../../factory'
import { Title3 } from './text'

interface parentSetter {
  parentSetter: (arg: any) => any
}

type Props = PropsUIQuestionMultipleChoice & parentSetter & ReactFactoryContext

export const MultipleChoiceQuestion = (props: Props): JSX.Element => {
  const { question, choices, id, parentSetter, locale } = props
  const [selectedChoice, setSelectedChoice] = React.useState<string>("");
  const [checkedArray, setCheckedArray] = React.useState(Array(choices.length).fill(false));

  const copy = prepareCopy(locale)

  const handleChoiceSelect = (choice: string, index: number) => {
    setSelectedChoice(choice)
    setCheckedArray(Array.from({ length: choices.length }, (_, i) => i === index))
  };

  const setParentState = ()  => {
    parentSetter((prevState: any) => {
       prevState[id] = selectedChoice
       return prevState
    })
  }

  React.useEffect(() => {
      setParentState()
  })

  return (
    <div className="p-4">
      <Title3 text={copy.question}/>
      <ul className="mt-4 space-y-1">
        {copy.choices.map((choice, index) => (
          <li key={index}>
            <label className="inline-flex items-center">
              <input
                type="radio"
                name={`${index}-${id}`}
                value={choice}
                checked={checkedArray.at(index)}
                onChange={() => handleChoiceSelect(choice, index)}
                className="mr-1 form-radio"
              />
            </label>
            {choice}
          </li>
        ))}
      </ul>
    </div>
  );

  function prepareCopy (locale: string): Copy {
    return {
      choices: choices.map((choice) => Translator.translate(choice, locale)),
      question: Translator.translate(question, locale)
    }
  }
}

interface Copy {
  choices: string[]
  question: string
}

================
File: src/framework/visualisation/react/ui/elements/question_open.tsx
================
import React from 'react'
import { PropsUIQuestionOpen } from '../../../../types/elements'
import { Translator } from '../../../../translator'
import { ReactFactoryContext } from '../../factory'

import { Title3 } from './text'

interface parentSetter {
  parentSetter: (arg: any) => any
}

type Props = PropsUIQuestionOpen & parentSetter & ReactFactoryContext

export const OpenQuestion = (props: Props): JSX.Element => {

  const { question, id, parentSetter, locale } = props
  const [userAnswer, setUserAnswer] = React.useState<string>("");
  const copy = prepareCopy(locale)

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setUserAnswer(event.target.value);
  };

  const setParentState = ()  => {
    parentSetter((prevState: any) => {
       prevState[id] = userAnswer
       return prevState
    })
  }

  React.useEffect(() => {
      setParentState()
  })

  return (
    <div className="p-4">
      <Title3 text={copy.question} />
      <input
        type="text"
        value={userAnswer}
        onChange={handleInputChange}
        className="w-full px-4 py-2 text-gray-700 bg-gray-100 border border-gray-300 rounded-md resize-none h-16"
      />
    </div>
  );

  function prepareCopy (locale: string): Copy {
    return {
      question: Translator.translate(question, locale)
    }
  }
}

interface Copy {
  question: string
}

================
File: src/framework/visualisation/react/ui/elements/radio_item.tsx
================
import { PropsUIRadioItem } from '../../../../types/elements'
import RadioSvg from '../../../../../assets/images/radio.svg'
import RadioActiveSvg from '../../../../../assets/images/radio_active.svg'

export const RadioItem = ({ id, value, selected, onSelect }: PropsUIRadioItem): JSX.Element => {
  return (
    <div id={`${id}`} className='radio-item flex flex-row gap-3 items-center cursor-pointer' onClick={onSelect}>
      <div>
        <img src={RadioSvg} id={`${id}-off`} className={selected ? 'hidden' : ''} />
        <img src={RadioActiveSvg} id={`${id}-on`} className={selected ? '' : 'hidden'} />
      </div>
      <div className='text-grey1 text-label font-label select-none mt-1'>
        {value}
      </div>
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/elements/search_bar.tsx
================
import { Weak } from '../../../../helpers'
import { PropsUISearchBar } from '../../../../types/elements'

export const SearchBar = ({ search, onSearch, placeholder }: Weak<PropsUISearchBar>): JSX.Element => {
  function handleKeyPress (event: React.KeyboardEvent<HTMLInputElement>): void {
    if (event.key === 'Enter') {
      event.preventDefault()
    }
  }

  return (
    <form>
      <div className='flex flex-row '>
        <input
          className={`text-grey1  font-body pl-3 pr-3 w-full border-2 border-solid border-grey3 
          focus:outline-none focus:border-primary rounded-lg h-44px`}
          placeholder={placeholder ?? ''}
          // name="query"  // autcomplete popup is annoying
          type='search'
          value={search}
          onChange={(e) => onSearch(e.target.value)}
          onKeyPress={handleKeyPress}
        />
      </div>
    </form>
  )
}

================
File: src/framework/visualisation/react/ui/elements/spinner.tsx
================
import { Weak } from '../../../../helpers'
import { PropsUISpinner } from '../../../../types/elements'

import React from 'react'
import Lottie from 'lottie-react'
import spinnerLight from '../../../../../assets/lottie/spinner-light.json'
import spinnerDark from '../../../../../assets/lottie/spinner-dark.json'

type Props = Weak<PropsUISpinner>

export const Spinner = ({ spinning = true, color = 'light' }: Props): JSX.Element => {
  function animationData (): unknown {
    if (color === 'dark') {
      return spinnerDark
    }
    return spinnerLight
  }

  return (
    <div id='spinner' className='flex flex-row items-center gap-4'>
      <div className='w-5 h-5'>
        <Lottie animationData={animationData()} loop={spinning} />
      </div>
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/elements/table_container.tsx
================
import { useCallback, useMemo, useState, useEffect, useRef } from "react"
import { TableWithContext, PropsUITableRow } from "../../../../types/elements"
import { Figure } from "../visualization_plugin/figure"
import { TableItems } from "./table_items"
import { SearchBar } from "./search_bar"
import { Title4 } from "./text"
import TextBundle from "../../../../text_bundle"
import { Translator } from "../../../../translator"
import { Table } from "./table"

interface TableContainerProps {
  id: string
  table: TableWithContext
  updateTable: (tableId: string, table: TableWithContext) => void
  locale: string
}

export const TableContainer = ({ id, table, updateTable, locale }: TableContainerProps): JSX.Element => {
  const tableVisualizations = table.visualizations != null ? table.visualizations : []
  const [searchFilterIds, setSearchFilterIds] = useState<Set<string>>()
  const [search, setSearch] = useState<string>("")
  const lastSearch = useRef<string>("")
  const text = useMemo(() => getTranslations(locale), [locale])
  const [show, setShow] = useState<boolean>(!table.folded)

  useEffect(() => {
    const timer = setTimeout(() => {
      const ids = searchRows(table.originalBody.rows, search)
      setSearchFilterIds(ids)
      if (search !== "" && lastSearch.current === "") {
        setTimeout(() => setShow(true), 10)
      }
      lastSearch.current = search
    }, 300)
    return () => clearTimeout(timer)
  }, [search, lastSearch])

  const searchedTable = useMemo(() => {
    if (searchFilterIds === undefined) return table
    const filteredRows = table.body.rows.filter((row) => searchFilterIds.has(row.id))
    return { ...table, body: { ...table.body, rows: filteredRows } }
  }, [table, searchFilterIds])

  const handleDelete = useCallback(
    (rowIds?: string[]) => {
      if (rowIds == null) {
        if (searchedTable !== null) {
          // if no rowIds specified, delete all rows that meet search condition
          rowIds = searchedTable.body.rows.map((row) => row.id)
        } else {
          return
        }
      }
      if (rowIds.length > 0) {
        if (rowIds.length === searchedTable?.body?.rows?.length) {
          setSearch("")
          setSearchFilterIds(undefined)
        }
        const deletedRows = [...table.deletedRows, rowIds]
        const newTable = deleteTableRows(table, deletedRows)
        updateTable(id, newTable)
      }
    },
    [id, table, searchedTable]
  )

  const handleUndo = useCallback(() => {
    const deletedRows = table.deletedRows.slice(0, -1)
    const newTable = deleteTableRows(table, deletedRows)
    updateTable(id, newTable)
  }, [id, table])

  const unfilteredRows = table.body.rows.length

  return (
    <div
      key={table.id}
      className="p-3 md:p-4 lg:p-6 flex flex-col gap-4 w-full overflow-hidden border-[0.2rem] border-grey4 rounded-lg"
    >
      <div className="flex flex-wrap ">
        <div key="Title" className="flex sm:flex-row justify-between w-full gap-1 mb-2">
          <Title4 text={table.title} margin="" />

          {unfilteredRows > 0 ? (
            <SearchBar placeholder={text.searchPlaceholder} search={search} onSearch={setSearch} />
          ) : null}
        </div>
        <div key="Description" className="flex flex-col w-full mb-2 text-base md:text-lg font-body max-w-2xl">
          <p>{table.description}</p>
        </div>
        <div key="TableSummary" className="flex items-center justify-between w-full mt-1 pt-1 rounded ">
          <TableItems table={table} searchedTable={searchedTable} handleUndo={handleUndo} locale={locale} />

          <button
            key={show ? "animate" : ""}
            className={`flex end gap-3 animate-fadeIn ${unfilteredRows === 0 ? "hidden" : ""}`}
            onClick={() => setShow(!show)}
          >
            <div key="zoomIcon" className="text-primary">
              {show ? zoomOutIcon : zoomInIcon}
            </div>
            <div key="zoomText" className="text-right hidden md:block">
              {show ? text.hideTable : text.showTable}
            </div>
          </button>
        </div>
        <div key="Table" className="w-full">
          <div className="">
            <Table
              show={show}
              table={searchedTable}
              search={search}
              unfilteredRows={unfilteredRows}
              handleDelete={handleDelete}
              handleUndo={handleUndo}
              locale={locale}
            />
          </div>
        </div>
        <div
          key="Visualizations"
          className={`pt-2 grid w-full gap-4 transition-all ${
            tableVisualizations.length > 0 && unfilteredRows > 0 ? "" : "hidden"
          }`}
        >
          {tableVisualizations.map((vs: any, i: number) => {
            return (
              <Figure
                key={table.id + "_" + String(i)}
                tableInput={searchedTable}
                visualizationInput={vs}
                locale={locale}
                handleDelete={handleDelete}
                handleUndo={handleUndo}
              />
            )
          })}
        </div>
      </div>
    </div>
  )
}

function deleteTableRows(table: TableWithContext, deletedRows: string[][]): TableWithContext {
  const deleteIds = new Set<string>()
  for (const deletedSet of deletedRows) {
    for (const id of deletedSet) {
      deleteIds.add(id)
    }
  }

  const rows = table.originalBody.rows.filter((row) => !deleteIds.has(row.id))
  const deletedRowCount = table.originalBody.rows.length - rows.length
  return {
    ...table,
    body: { ...table.body, rows },
    deletedRowCount,
    deletedRows,
  }
}

function searchRows(rows: PropsUITableRow[], search: string): Set<string> | undefined {
  if (search.trim() === "") return undefined

  // Not sure whether it's better to look for one of the words or exact string.
  // Now going for exact string. Note that if you change this, you should also change
  // the highlighting behavior in table.tsx (<Highlighter searchWords.../>)
  // const query = search.trim().split(/\s+/)
  const query = [search.trim()]

  const regexes: RegExp[] = []
  for (const q of query) {
    regexes.push(new RegExp(q.replace(/[-/\\^$*+?.()|[\]{}]/, "\\$&"), "i"))
  }

  const ids = new Set<string>()
  for (const row of rows) {
    for (const regex of regexes) {
      let anyCellMatches = false
      for (const cell of row.cells) {
        if (regex.test(cell)) {
          anyCellMatches = true
          break
        }
      }
      if (anyCellMatches) ids.add(row.id)
    }
  }

  return ids
}

const zoomInIcon = (
  <svg
    className="h-6 w-6"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    aria-hidden="true"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM10.5 7.5v6m3-3h-6"
    />
  </svg>
)

const zoomOutIcon = (
  <svg
    className="h-6 w-6"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    aria-hidden="true"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM13.5 10.5h-6"
    />
  </svg>
)

function getTranslations(locale: string): Record<string, string> {
  const translated: Record<string, string> = {}
  for (const [key, value] of Object.entries(translations)) {
    translated[key] = Translator.translate(value, locale)
  }
  return translated
}

const translations = {
  searchPlaceholder: new TextBundle().add("en", "Search").add("nl", "Zoeken"),
  showTable: new TextBundle().add("en", "Show table").add("nl", "Tabel tonen"),
  hideTable: new TextBundle().add("en", "Hide table").add("nl", "Tabel verbergen"),
}

================
File: src/framework/visualisation/react/ui/elements/table_items.tsx
================
import { useMemo } from 'react'
import TextBundle from '../../../../text_bundle'
import { Translator } from '../../../../translator'
import { TableWithContext } from '../../../../types/elements'
import UndoSvg from '../../../../../assets/images/undo.svg'

interface Props {
  table: TableWithContext
  searchedTable: TableWithContext
  handleUndo: () => void
  locale: string
}

export const TableItems = ({ table, searchedTable, handleUndo, locale }: Props): JSX.Element => {
  const text = useMemo(() => getTranslations(locale), [locale])

  const deleted = table.deletedRowCount
  const n = table.body.rows.length
  const searched = searchedTable.body.rows.length
  const total = table.originalBody.rows.length - table.deletedRowCount

  const nLabel = n.toLocaleString(locale, { useGrouping: true })
  const totalLabel = total.toLocaleString(locale, { useGrouping: true })
  const searchLabel = searched.toLocaleString(locale, { useGrouping: true })
  const deletedLabel = deleted.toLocaleString('en', { useGrouping: true }) + ' ' + text.deleted

  function rowsLabel (): string {
    if (n === 0) return text.noData
    if (searched < n) return searchLabel + ' / ' + nLabel + ' ' + text.rows
    return nLabel + ' ' + text.rows
  }

  return (
    <div className='flex  min-w-[200px] gap-1'>
      <div className='flex items-center'>{tableIcon}</div>
      <div
        key={`${totalLabel}_${deleted}`}
        className='flex flex-wrap items-center px-2  gap-x-2 animate-fadeIn text-title7 md:text-title6 font-label'
      >
        <div className={n > 0 ? '' : 'hidden'}>
          {table.head.cells.length} {text.columns},
        </div>
        <div key={totalLabel} className='animate-fadeIn'>
          {rowsLabel()}
          {deleted > 0 ? ',' : ''}
        </div>

        <div className={`flex text-grey2 ${deleted > 0 ? '' : 'hidden'}`}>
          {deletedLabel}
          <img
            src={UndoSvg}
            className='w-5 h-5 -translate-y-[2px] md:-translate-y-0 -translate-x-[3px] ml-2'
            onClick={handleUndo}
          />
        </div>
      </div>
    </div>
  )
}

const tableIcon = (
  <svg className='h-9' viewBox='4 4 18 18' fill='none' xmlns='http://www.w3.org/2000/svg'>
    <rect x='9' y='9' width='4' height='2' fill='#4272EF' />
    <rect x='9' y='13' width='4' height='2' fill='#4272EF' />
    <rect x='9' y='17' width='4' height='2' fill='#4272EF' />
    <rect x='15' y='9' width='4' height='2' fill='#4272EF' />
    <rect x='15' y='13' width='4' height='2' fill='#4272EF' />
    <rect x='15' y='17' width='4' height='2' fill='#4272EF' />
    <rect x='4' y='4' width='15' height='3' fill='#4272EF' />
    <rect x='4' y='9' width='3' height='10' fill='#4272EF' />
  </svg>
)

function getTranslations (locale: string): Record<string, string> {
  const translated: Record<string, string> = {}
  for (const [key, value] of Object.entries(translations)) {
    translated[key] = Translator.translate(value, locale)
  }
  return translated
}

const translations = {
  columns: new TextBundle().add('en', 'columns').add('nl', 'kolommen'),
  rows: new TextBundle().add('en', 'rows').add('nl', 'rijen'),
  noData: new TextBundle().add('en', 'no data').add('nl', 'geen data'),
  deleted: new TextBundle().add('en', 'deleted').add('nl', 'verwijderd')
}

================
File: src/framework/visualisation/react/ui/elements/table.tsx
================
import { useEffect, useLayoutEffect, useMemo, useRef, useState, ReactNode, Dispatch, SetStateAction } from 'react'
import Highlighter from 'react-highlight-words'
import { TableWithContext, PropsUITableRow } from '../../../../types/elements'
import { CheckBox } from './check_box'

import UndoSvg from '../../../../../assets/images/undo.svg'
import DeleteSvg from '../../../../../assets/images/delete.svg'
import { Pagination } from './pagination'
import TextBundle from '../../../../text_bundle'
import { Translator } from '../../../../translator'

export interface Props {
  table: TableWithContext
  show: boolean
  locale: string
  search: string
  unfilteredRows: number
  handleDelete?: (rowIds: string[]) => void
  handleUndo?: () => void
  pageSize?: number
}

interface Tooltip {
  show: boolean
  content: ReactNode
  x: number
  y: number
}

export const Table = ({
  table,
  show,
  locale,
  search,
  unfilteredRows,
  handleDelete,
  handleUndo,
  pageSize = 7
}: Props): JSX.Element => {
  const [page, setPage] = useState(0)
  const columnNames = table.head.cells
  const [selected, setSelected] = useState<Set<string>>(new Set())
  const ref = useRef<HTMLDivElement>(null)
  const innerRef = useRef<HTMLDivElement>(null)
  const nPages = Math.ceil(table.body.rows.length / pageSize)
  const selectedLabel = selected.size.toLocaleString(locale, { useGrouping: true })
  const text = useMemo(() => getTranslations(locale), [locale])

  const [tooltip, setTooltip] = useState<Tooltip>({
    show: false,
    content: null,
    x: 0,
    y: 0
  })

  const cellClass = 'min-h-[2.1rem] md:min-h-[2.5rem] px-3 flex items-center font-table-row'

  useEffect(() => {
    setSelected(new Set())
    setPage((page) => Math.max(0, Math.min(page, nPages - 1)))
  }, [table, nPages])

  useEffect(() => {
    // rm tooltip on scroll
    function rmTooltip (): void {
      setTooltip((tooltip: Tooltip) => (tooltip.show ? { ...tooltip, show: false } : tooltip))
    }
    window.addEventListener('scroll', rmTooltip)
    return () => window.removeEventListener('scroll', rmTooltip)
  })

  useLayoutEffect(() => {
    // set exact height of grid row for height transition
    if (ref.current == null || innerRef.current == null) return
    if (!show || unfilteredRows === 0) {
      ref.current.style.gridTemplateRows = '0rem'
      return
    }

    function responsiveHeight (): void {
      if (ref.current == null || innerRef.current == null) return
      ref.current.style.gridTemplateRows = `${innerRef.current.scrollHeight}px`
    }
    responsiveHeight()
    // just as a precaution, update height every second in case it changes
    const interval = setInterval(responsiveHeight, 1000)
    return () => clearInterval(interval)
  }, [ref, innerRef, show, nPages, unfilteredRows])

  const items = useMemo(() => {
    const items: Array<PropsUITableRow | null> = new Array(pageSize).fill(null)
    for (let i = 0; i < pageSize; i++) {
      const index = page * pageSize + i
      if (table.body.rows[index] !== undefined) items[i] = table.body.rows[index]
    }
    return items
  }, [table, page, pageSize])

  function renderHeaderCell (value: string, i: number): JSX.Element {
    return (
      <th key={`header ${i}`}>
        <div className={`text-left ${cellClass}`}>
          <div>{value}</div>
        </div>
      </th>
    )
  }

  function renderRow (item: PropsUITableRow | null, i: number): JSX.Element | null {
    if (item == null && i >= unfilteredRows) return null
    if (item == null) {
      return (
        <tr key={`{empty ${i}`} className='border-b-2 border-grey4'>
          <td>
            <div className={cellClass} />
          </td>
        </tr>
      )
    }
    return (
      <tr key={item.id} className='border-b-2 border-grey4 border-solid'>
        <td key='select'>
          <CheckBox
            id={item.id}
            size='w-6 h-6'
            selected={selected.has(item.id)}
            onSelect={() => toggleSelected(item.id)}
          />
        </td>

        {item.cells.map((cell, j) => (
          <td key={j}>
            <Cell cell={cell} search={search} cellClass={cellClass} setTooltip={setTooltip} />
          </td>
        ))}
      </tr>
    )
  }

  function toggleSelected (id: string): void {
    if (selected.has(id)) {
      selected.delete(id)
    } else {
      selected.add(id)
    }
    setSelected(new Set(selected))
  }

  function toggleSelectAll (): void {
    if (selected.size === table.body.rows.length) {
      setSelected(new Set())
    } else {
      setSelected(new Set(table.body.rows.map((row) => row.id)))
    }
  }

  return (
    <div
      ref={ref}
      className='grid grid-cols-1 transition-[grid,color] duration-500 relative overflow-hidden text-sm md:text-base'
    >
      <div ref={innerRef} className={`h-min ${unfilteredRows === 0 ? 'invisible' : ''}`}>
        <div className='my-2 bg-grey6 rounded-md border-grey4 border-[0.2rem]'>
          <div className='p-3 pt-1 pb-2 max-w-full overflow-x-auto'>
            <table className='table-fixed min-w-full '>
              <thead className=''>
                <tr className='border-b-2 border-grey4 border-solid'>
                  <td className='w-8'>
                    <CheckBox
                      id='selectAll'
                      size='w-6 h-6'
                      selected={table.body.rows.length > 0 && selected.size === table.body.rows.length}
                      onSelect={toggleSelectAll}
                    />
                  </td>
                  {columnNames.map(renderHeaderCell)}
                </tr>
              </thead>
              <tbody>{items.map(renderRow)}</tbody>
            </table>
          </div>
          <div className='px-3 pb-1 flex justify-between min-h-[2.5rem]'>
            <div className='pt-2 pb-2'>
              {selected.size > 0 || table.deletedRowCount === 0
                ? (
                  <IconButton
                    icon={DeleteSvg}
                    label={`${text.delete} ${selected.size > 0 ? selectedLabel : ''}`}
                    color='text-delete'
                    disabled={selected.size === 0}
                    onClick={() => handleDelete?.(Array.from(selected))}
                  />
                  )
                : (
                  <IconButton icon={UndoSvg} label={text.undo} color='text-primary' onClick={() => handleUndo?.()} />
                  )}
            </div>
            <Pagination page={page} setPage={setPage} nPages={nPages} />
          </div>
        </div>
        <div
          className={`${
            tooltip.show ? '' : 'invisible'
          } break-all fixed bg-[#222a] -translate-x-2 -translate-y-2 p-2  rounded text-white backdrop-blur-[2px] z-20 max-w-[20rem] pointer-events-none overflow-auto font-table-row`}
          style={{ left: tooltip.x, top: tooltip.y } as any}
        >
          {tooltip.content}
        </div>
      </div>
    </div>
  )
}

function Cell ({
  cell,
  search,
  cellClass,
  setTooltip
}: {
  cell: string
  search: string
  cellClass: string
  setTooltip: Dispatch<SetStateAction<Tooltip>>
}): JSX.Element {
  const textRef = useRef<HTMLDivElement>(null)
  const [overflows, setOverflows] = useState(false)
  const isUrl = /^https?:\/\//.test(cell)

  const searchWords = useMemo(() => {
    return [search]
    // return search.split(' ') // alternative: highlight individual words
  }, [search])

  useEffect(() => {
    if (textRef.current == null) return
    setOverflows(textRef.current.scrollWidth > textRef.current.clientWidth)
  }, [textRef])

  function onSetTooltip (): void {
    if (isUrl) return
    if (textRef.current == null) return
    if (!overflows) return

    const rect = textRef.current.getBoundingClientRect()

    const content = (
      <Highlighter
        searchWords={searchWords}
        autoEscape
        textToHighlight={cell}
        highlightClassName='bg-tertiary rounded-sm'
      />
    )

    setTooltip({
      show: true,
      content,
      x: rect.x,
      y: rect.y
    })
  }

  function onRmTooltip (): void {
    setTooltip((tooltip: Tooltip) => (tooltip.show ? { ...tooltip, show: false } : tooltip))
  }

  return (
    <div
      className={`relative ${cellClass}`}
      onMouseEnter={onSetTooltip}
      onMouseLeave={onRmTooltip}
      onClick={onSetTooltip}
    >
      <div ref={textRef} className='whitespace-nowrap max-w-[15rem] overflow-hidden overflow-ellipsis z-10'>
        {isUrl
          ? (
            <a href={cell} className='text-primary' target='_blank' rel='noopener noreferrer'>
              <Highlighter
                searchWords={searchWords}
                autoEscape
                textToHighlight={cell}
                highlightClassName='bg-tertiary rounded-sm'
              />
            </a>
            )
          : (
            <Highlighter
              searchWords={searchWords}
              autoEscape
              textToHighlight={cell}
              highlightClassName='bg-tertiary rounded-sm'
            />
            )}
      </div>
      {overflows && !isUrl && <TooltipIcon />}
    </div>
  )
}

function TooltipIcon (): JSX.Element {
  return (
    <svg
      className='w-3 h-3 mb-1 text-gray-800 dark:text-white'
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      fill='none'
      viewBox='0 0 10 16'
    >
      <path
        stroke='currentColor'
        strokeLinecap='round'
        strokeLinejoin='round'
        strokeWidth='2'
        d='m2.707 14.293 5.586-5.586a1 1 0 0 0 0-1.414L2.707 1.707A1 1 0 0 0 1 2.414v11.172a1 1 0 0 0 1.707.707Z'
      />
    </svg>
  )
}

function IconButton (props: {
  icon: string
  label: string
  onClick: () => void
  color: string
  disabled?: boolean
  hidden?: boolean
}): JSX.Element | null {
  if (props.hidden ?? false) return null
  const disabled = props.disabled ?? false
  return (
    <div
      className={`flex items-center gap-2 cursor-pointer  ${props.color} animate-fadeIn md:text-button ${
        disabled ? 'opacity-50' : ''
      }`}
      onClick={() => !disabled && props.onClick()}
    >
      <img src={props.icon} className='w-7 h-7 ml-1 md:w-9 md:h-9 md:ml-0 -translate-x-[3px]' />
      {props.label}
    </div>
  )
}

function getTranslations (locale: string): Record<string, string> {
  const translated: Record<string, string> = {}
  for (const [key, value] of Object.entries(translations)) {
    translated[key] = Translator.translate(value, locale)
  }
  return translated
}

const translations = {
  delete: new TextBundle().add('en', 'Delete').add('nl', 'Verwijder'),
  undo: new TextBundle().add('en', 'Undo').add('nl', 'Herstel')
}

================
File: src/framework/visualisation/react/ui/elements/text.tsx
================
import { Weak } from '../../../../helpers'
import { PropsUITextBodyLarge, PropsUITextBodyMedium, PropsUITextBodySmall, PropsUITextLabel, PropsUITextCaption, PropsUITextTitle0, PropsUITextTitle1, PropsUITextTitle2, PropsUITextTitle3, PropsUITextTitle4, PropsUITextTitle6 } from '../../../../types/elements'

export const BodyLarge = ({ text, color = 'text-grey1', margin = 'mb-6 md:mb-8 lg:mb-10' }: Weak<PropsUITextBodyLarge>): JSX.Element => {
  return (
    <div className={`text-bodylarge font-body ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const BodyMedium = ({ text, color = 'text-grey1', margin = 'mb-6 md:mb-8 lg:mb-10' }: Weak<PropsUITextBodyMedium>): JSX.Element => {
  return (
    <div className={`text-bodymedium font-body ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const BodySmall = ({ text, color = 'text-grey1', margin = '' }: Weak<PropsUITextBodySmall>): JSX.Element => {
  return (
    <div className={`text-bodysmall font-body ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const Title0 = ({ text, color = 'text-grey1', margin = 'mb-6 md:mb-8 lg:mb-10' }: Weak<PropsUITextTitle0>): JSX.Element => {
  return (
    <div className={`text-title4 font-title4 sm:text-title2 sm:font-title2 lg:text-title0 lg:font-title0 ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const Title1 = ({ text, color = 'text-grey1', margin = 'mb-6 md:mb-8' }: Weak<PropsUITextTitle1>): JSX.Element => {
  return (
    <div className={`text-title3 font-title3 sm:text-title2 lg:text-title1 lg:font-title1 ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const Title2 = ({ text, color = 'text-grey1', margin = 'mb-6 md:mb-8 lg:mb-10' }: Weak<PropsUITextTitle2>): JSX.Element => {
  return (
    <div className={`text-title4 font-title4 sm:text-title3 sm:font-title3 lg:text-title2 lg:font-title2 ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const Title3 = ({ text, color = 'text-grey1', margin = 'mb-3 md:mb-5 lg:mb-6' }: Weak<PropsUITextTitle3>): JSX.Element => {
  return (
    <div className={`text-title5 font-title5 sm:text-title4 sm:font-title4 lg:text-title3 lg:font-title3 ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const Title4 = ({ text, color = 'text-grey1', margin = 'mb-3 md:mb-5 lg:mb-6' }: Weak<PropsUITextTitle4>): JSX.Element => {
  return (
    <div className={`text-title6 font-title6 sm:text-title5 sm:font-title5 lg:text-title4 lg:font-title4 ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const Title6 = ({ text, color = 'text-grey1', margin = 'mb-2' }: Weak<PropsUITextTitle6>): JSX.Element => {
  return (
    <div className={`text-title6 font-title6 ${margin} ${color}`}>
      {text}
    </div>
  )
}

export const Label = ({ text, color = 'text-grey1', margin = '' }: Weak<PropsUITextLabel>): JSX.Element => {
  return (
    <div className={`text-label font-label ${color} ${margin}`}>
      {text}
    </div>
  )
}

export const Caption = ({ text, color = 'text-grey1', margin = '' }: Weak<PropsUITextCaption>): JSX.Element => {
  return (
    <div className={`text-caption font-caption ${color} ${margin}`}>
      {text}
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/elements/zoom_icons.tsx
================
export const zoomInIcon = (
  <svg
    className='h-6 w-6'
    fill='none'
    stroke='currentColor'
    strokeWidth='2'
    viewBox='0 0 24 24'
    xmlns='http://www.w3.org/2000/svg'
    aria-hidden='true'
  >
    <path
      strokeLinecap='round'
      strokeLinejoin='round'
      d='M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM10.5 7.5v6m3-3h-6'
    />
  </svg>
)

export const zoomOutIcon = (
  <svg
    className='h-6 w-6'
    fill='none'
    stroke='currentColor'
    strokeWidth='2'
    viewBox='0 0 24 24'
    xmlns='http://www.w3.org/2000/svg'
    aria-hidden='true'
  >
    <path
      strokeLinecap='round'
      strokeLinejoin='round'
      d='M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM13.5 10.5h-6'
    />
  </svg>
)

================
File: src/framework/visualisation/react/ui/hooks/useUnloadWarning.tsx
================
import { useEffect } from 'react'

export default function useUnloadWarning (disable?: boolean): void {
  useEffect(() => {
    // Warn users that they will lose their progress if they leave the page.
    // Should use this in components where such as warning is acceptable.
    const handleBeforeUnload = (e: BeforeUnloadEvent): void => {
      e.returnValue = 'If you leave now, any changes made in the current unit will not be saved.' // most browsers actually show default message
    }

    if (disable ?? false) return
    window.addEventListener('beforeunload', handleBeforeUnload)
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload)
    }
  }, [disable])
}

================
File: src/framework/visualisation/react/ui/pages/templates/footer.tsx
================
interface FooterProps {
  left?: JSX.Element
  middle?: JSX.Element
  right?: JSX.Element
}

export const Footer = ({ left, middle, right }: FooterProps): JSX.Element => {
  return (
    <>
      <div className='bg-grey4 h-px' />
      <div className='h-full flex flex-col justify-center'>
        <div className='flex flex-row gap-4 px-14'>
          <div className='w-1/3'>
            {left}
          </div>
          <div className='w-1/3'>
            {middle}
          </div>
          <div className='w-1/3'>
            {right}
          </div>
        </div>
      </div>
    </>
  )
}

================
File: src/framework/visualisation/react/ui/pages/templates/page.tsx
================
interface PageProps {
  body: JSX.Element
  footer?: JSX.Element
}

export const Page = (props: PageProps): JSX.Element => {
  return (
    <div className='w-full h-full'>
      {props.body}
      {props.footer != null && (
        <div className='h-footer flex-shrink-0 mt-5'>{props.footer}</div>
      )}
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/pages/donation_page.tsx
================
import { Weak } from '../../../../helpers'
import TextBundle from '../../../../text_bundle'
import { Translator } from '../../../../translator'
import { Translatable } from '../../../../types/elements'
import { PropsUIPageDonation } from '../../../../types/pages'
import { 
    isPropsUIPromptProgress,
    isPropsUIPromptConfirm, 
    isPropsUIPromptConsentForm,
    isPropsUIPromptFileInput,
    isPropsUIPromptFileInputMultiple,
    isPropsUIPromptRadioInput,
    isPropsUIPromptQuestionnaire 
} from '../../../../types/prompts'
import { ReactFactoryContext } from '../../factory'
import { ForwardButton } from '../elements/button'
import { Title1 } from '../elements/text'
import { Confirm } from '../prompts/confirm'
import { ConsentForm } from '../prompts/consent_form'
import { FileInput } from '../prompts/file_input'
import { FileInputMultiple } from '../prompts/file_input_multiple'
import { Progress } from '../prompts/progress'
import { Questionnaire } from '../prompts/questionnaire'
import { RadioInput } from '../prompts/radio_input'
import { Footer } from './templates/footer'
import { Page } from './templates/page'

type Props = Weak<PropsUIPageDonation> & ReactFactoryContext

export const DonationPage = (props: Props): JSX.Element => {
  const { title, forwardButton } = prepareCopy(props)
  const { locale, resolve } = props

  function renderBody (props: Props): JSX.Element {
    const context = { locale: locale, resolve: props.resolve }
    const body = props.body
    if (isPropsUIPromptFileInput(body)) {
      return <FileInput {...body} {...context} />
    }
    if (isPropsUIPromptFileInputMultiple(body)) {
      return <FileInputMultiple {...body} {...context} />
    }
    if (isPropsUIPromptProgress(body)) {
      return <Progress {...body} {...context} />
    }
    if (isPropsUIPromptConfirm(body)) {
      return <Confirm {...body} {...context} />
    }
    if (isPropsUIPromptConsentForm(body)) {
      return <ConsentForm {...body} {...context} />
    }
    if (isPropsUIPromptRadioInput(body)) {
      return <RadioInput {...body} {...context} />
    }
    if (isPropsUIPromptQuestionnaire(body)) {
      return <Questionnaire {...body} {...context} />
    }
    throw new TypeError('Unknown body type')
  }

  function handleSkip (): void {
    resolve?.({ __type__: 'PayloadFalse', value: false })
  }

  function renderFooter (props: Props): JSX.Element | undefined {
    if (props.footer != null) {
      return <Footer
      right={
        <div className='flex flex-row'>
          <div className='flex-grow' />
          <ForwardButton label={forwardButton} onClick={handleSkip} />
        </div>
      } />
    } else {
      return undefined
    }
  }

  const footer: JSX.Element = (
    <>
      {renderFooter(props)}
    </>
  )


  const body: JSX.Element = (
    <>
      <Title1 text={title} />
      {renderBody(props)}
    </>
  )

  return (
    <Page body={body} footer={footer}/>
  )
}

interface Copy {
  title: string
  forwardButton: string
}

function prepareCopy ({ header: { title }, locale }: Props): Copy {
  return {
    title: Translator.translate(title, locale),
    forwardButton: Translator.translate(forwardButtonLabel(), locale)
  }
}

const forwardButtonLabel = (): Translatable => {
  return new TextBundle()
    .add('en', 'Skip')
    .add('de', 'Überspringen')
    .add('nl', 'Overslaan')
}

================
File: src/framework/visualisation/react/ui/pages/end_page.tsx
================
import { Weak } from '../../../../helpers'
import { PropsUIPageEnd } from '../../../../types/pages'
import { ReactFactoryContext } from '../../factory'
import { Page } from './templates/page'
import TextBundle from '../../../../text_bundle'
import { Translator } from '../../../../translator'
import { BodyLarge, Title1 } from '../elements/text'

type Props = Weak<PropsUIPageEnd> & ReactFactoryContext

export const EndPage = (props: Props): JSX.Element => {
  const { title, text } = prepareCopy(props)

  const body: JSX.Element = (
    <>
      <Title1 text={title} />
      <BodyLarge text={text} />
    </>
  )

  return (
    <Page
      body={body}
    />
  )
}

interface Copy {
  title: string
  text: string
}

function prepareCopy ({ locale }: Props): Copy {
  return {
    title: Translator.translate(title, locale),
    text: Translator.translate(text, locale)
  }
}

const title = new TextBundle()
  .add('en', 'Thank you')
  .add('de', 'Danke')
  .add('nl', 'Bedankt')

const text = new TextBundle()
  .add('en', 'Thank you for your participation. You can now close the page or refresh to restart the donation flow.')
  .add('de', 'Herzlichen Dank für Ihre Teilnahme. Sie können diese Seite nun schließen oder die Seite aktualisieren, um die Datenspende erneut durchzuführen.')
  .add('nl', 'Hartelijk dank voor uw deelname. U kunt deze pagina nu sluiten of de pagina verversen om de flow nogmaals te doorlopen.')

================
File: src/framework/visualisation/react/ui/pages/error_page.tsx
================
import { Weak } from '../../../../helpers'
import { PropsUIPageError } from '../../../../types/pages'
import { ReactFactoryContext } from '../../factory'
import { Page } from './templates/page'
import TextBundle from '../../../../text_bundle'
import { Translator } from '../../../../translator'
import { BodyLarge, Title1 } from '../elements/text'

type Props = Weak<PropsUIPageError> & ReactFactoryContext

export const ErrorPage = (props: Props): JSX.Element => {
  // render to top of the page on reload
  window.scrollTo(0, 0)

  const { stacktrace } = props
  const { title, text } = prepareCopy(props)

  const body: JSX.Element = (
    <>
      <Title1 text={title} />
      <BodyLarge text={text} />
      <BodyLarge text={stacktrace} />
    </>
  )

  return (
    <Page
      body={body}
    />
  )
}

interface Copy {
  title: string
  text: string
}

function prepareCopy ({ locale }: Props): Copy {
  return {
    title: Translator.translate(title, locale),
    text: Translator.translate(text, locale)
  }
}

const title = new TextBundle()
  .add('en', 'Error, not your fault!')
  .add('nl', 'Foutje, niet jouw schuld!')

const text = new TextBundle()
  .add('en', 'Consult the researcher, or close the page')
  .add('nl', 'Raadpleeg de onderzoeker of sluit de pagina')

================
File: src/framework/visualisation/react/ui/prompts/confirm.tsx
================
import { Weak } from '../../../../helpers'
import { ReactFactoryContext } from '../../factory'
import { PropsUIPromptConfirm } from '../../../../types/prompts'
import { Translator } from '../../../../translator'
import { BodyLarge } from '../elements/text'
import { PrimaryButton } from '../elements/button'

type Props = Weak<PropsUIPromptConfirm> & ReactFactoryContext

export const Confirm = (props: Props): JSX.Element => {
  const { resolve } = props
  const { text, ok, cancel } = prepareCopy(props)

  function handleOk (): void {
    resolve?.({ __type__: 'PayloadTrue', value: true })
  }

  function handleCancel (): void {
    resolve?.({ __type__: 'PayloadFalse', value: false })
  }

  return (
    <>
      <BodyLarge text={text} margin='mb-4' />
      <div className='flex flex-row gap-4'>
        <PrimaryButton label={ok} onClick={handleOk} color='text-grey1 bg-tertiary' />
        <PrimaryButton label={cancel} onClick={handleCancel} color='text-white bg-primary' />
      </div>
    </>
  )
}

interface Copy {
  text: string
  ok: string
  cancel: string
}

function prepareCopy ({ text, ok, cancel, locale }: Props): Copy {
  return {
    text: Translator.translate(text, locale),
    ok: Translator.translate(ok, locale),
    cancel: Translator.translate(cancel, locale)
  }
}

================
File: src/framework/visualisation/react/ui/prompts/consent_form.tsx
================
import { assert, Weak } from "../../../../helpers"
import {
  PropsUITable,
  PropsUITableBody,
  PropsUITableHead,
  PropsUITableRow,
  TableWithContext,
  TableContext,
} from "../../../../types/elements"
import { PropsUIPromptConsentForm, PropsUIPromptConsentFormTable } from "../../../../types/prompts"
import { LabelButton, PrimaryButton } from "../elements/button"
import { BodyLarge } from "../elements/text"
import TextBundle from "../../../../text_bundle"
import { Translator } from "../../../../translator"
import { ReactFactoryContext } from "../../factory"
import { useCallback, useEffect, useState } from "react"
import _ from "lodash"

import useUnloadWarning from "../hooks/useUnloadWarning"

import { TableContainer } from "../elements/table_container"

type Props = Weak<PropsUIPromptConsentForm> & ReactFactoryContext

export const ConsentForm = (props: Props): JSX.Element => {
  useUnloadWarning()
  const [tables, setTables] = useState<TableWithContext[]>(() => parseTables(props.tables))
  const [metaTables, setMetaTables] = useState<TableWithContext[]>(() => parseTables(props.metaTables))
  const { locale, resolve } = props
  const { description, donateQuestion, donateButton, cancelButton } = prepareCopy(props)
  const [isDonating, setIsDonating] = useState(false)

  useEffect(() => {
    setTables(parseTables(props.tables))
    setMetaTables(parseTables(props.metaTables))
  }, [props.tables])

  const updateTable = useCallback((tableId: string, table: TableWithContext) => {
    setTables((tables) => {
      const index = tables.findIndex((table) => table.id === tableId)
      if (index === -1) return tables

      const newTables = [...tables]
      newTables[index] = table
      return newTables
    })
  }, [])

  function rowCell(dataFrame: any, column: string, row: number): string {
    const text = String(dataFrame[column][`${row}`])
    return text
  }

  function columnNames(dataFrame: any): string[] {
    return Object.keys(dataFrame)
  }

  function columnCount(dataFrame: any): number {
    return columnNames(dataFrame).length
  }

  function rowCount(dataFrame: any): number {
    if (columnCount(dataFrame) === 0) {
      return 0
    } else {
      const firstColumn = dataFrame[columnNames(dataFrame)[0]]
      return Object.keys(firstColumn).length - 1
    }
  }

  function rows(data: any): PropsUITableRow[] {
    const result: PropsUITableRow[] = []
    const n = rowCount(data)
    for (let row = 0; row <= n; row++) {
      const id = `${row}`
      const cells = columnNames(data).map((column: string) => rowCell(data, column, row))
      result.push({ id, cells })
    }
    return result
  }

  function parseTables(tablesData: PropsUIPromptConsentFormTable[]): Array<PropsUITable & TableContext> {
    return tablesData.map((table) => parseTable(table))
  }

  function parseTable(tableData: PropsUIPromptConsentFormTable): PropsUITable & TableContext {
    const id = tableData.id
    const title = Translator.translate(tableData.title, props.locale)
    const description =
      tableData.description !== undefined ? Translator.translate(tableData.description, props.locale) : ""
    const deletedRowCount = 0
    const dataFrame = JSON.parse(tableData.data_frame)
    const headCells = columnNames(dataFrame).map((column: string) => column)
    const head: PropsUITableHead = {
      __type__: "PropsUITableHead",
      cells: headCells,
    }
    const body: PropsUITableBody = {
      __type__: "PropsUITableBody",
      rows: rows(dataFrame),
    }
    return {
      __type__: "PropsUITable",
      id,
      head,
      body,
      title,
      description,
      deletedRowCount,
      annotations: [],
      originalBody: body,
      deletedRows: [],
      visualizations: tableData.visualizations,
      folded: tableData.folded || false,
    }
  }

  function handleDonate(): void {
    setIsDonating(true)
    const value = serializeConsentData()
    resolve?.({ __type__: "PayloadJSON", value })
  }

  function handleCancel(): void {
    resolve?.({ __type__: "PayloadFalse", value: false })
  }

  function serializeConsentData(): string {
    const array = serializeTables().concat(serializeMetaData())
    return JSON.stringify(array)
  }

  function serializeMetaData(): any[] {
    return serializeMetaTables().concat(serializeDeletedMetaData())
  }

  function serializeTables(): any[] {
    return tables.map((table) => serializeTable(table))
  }

  function serializeMetaTables(): any[] {
    return metaTables.map((table) => serializeTable(table))
  }

  function serializeDeletedMetaData(): any {
    const rawData = tables
      .filter(({ deletedRowCount }) => deletedRowCount > 0)
      .map(({ id, deletedRowCount }) => `User deleted ${deletedRowCount} rows from table: ${id}`)

    const data = JSON.stringify(rawData)
    return { user_omissions: data }
  }

  function serializeTable({ id, head, body: { rows } }: PropsUITable): any {
    const data = rows.map((row) => serializeRow(row, head))
    return { [id]: data }
  }

  function serializeRow(row: PropsUITableRow, head: PropsUITableHead): any {
    assert(
      row.cells.length === head.cells.length,
      `Number of cells in row (${row.cells.length}) should be equals to number of cells in head (${head.cells.length})`
    )
    const keys = head.cells.map((cell) => cell)
    const values = row.cells.map((cell) => cell)
    return _.fromPairs(_.zip(keys, values))
  }

  return (
    <>
      <div className="max-w-3xl">
        {description.split("\n").map((line, index) => (
          <BodyLarge key={"description" + String(index)} text={line} />
        ))}
      </div>
      <div className="flex flex-col gap-16 w-full">
        <div className="grid gap-8 max-w-full">
          {tables.map((table) => {
            return (
              <TableContainer key={table.id} id={table.id} table={table} updateTable={updateTable} locale={locale} />
            )
          })}
        </div>
        <div>
          <BodyLarge margin="" text={donateQuestion} />

          <div className="flex flex-row gap-4 mt-4 mb-4">
            <PrimaryButton
              label={donateButton}
              onClick={handleDonate}
              color="bg-success text-white"
              spinning={isDonating}
            />
            <LabelButton label={cancelButton} onClick={handleCancel} color="text-grey1" />
          </div>
        </div>
      </div>
    </>
  )
}

interface Copy {
  description: string
  donateQuestion: string
  donateButton: string
  cancelButton: string
}

function prepareCopy({ donateQuestion, donateButton, description, locale }: Props): Copy {
  return {
    description: Translator.translate(description ?? defaultDescription, locale),
    donateQuestion: Translator.translate(donateQuestion ?? defaultDonateQuestionLabel, locale),
    donateButton: Translator.translate(donateButton ?? defaultDonateButtonLabel, locale),
    cancelButton: Translator.translate(defaultCancelButtonLabel, locale),
  }
}

const defaultDonateQuestionLabel = new TextBundle()
  .add('en', 'Do you want to donate the above data?')
  .add('de', 'Möchten Sie die oben genannten Daten spenden?')
  .add('nl', 'Wilt u de bovenstaande gegevens doneren?')

const defaultDonateButtonLabel = new TextBundle()
  .add('en', 'Yes, donate')
  .add('de', 'Ja, spenden')
  .add('nl', 'Ja, doneer')

const defaultCancelButtonLabel = new TextBundle()
  .add('en', 'No')
  .add('de', 'Nein')
  .add('nl', 'Nee')

const defaultDescription = new TextBundle()
  .add('en', 'Determine whether you would like to donate the data below. Carefully check the data and adjust when required. With your donation you contribute to the previously described research. Thank you in advance.')
  .add('de', 'Legen Sie fest, ob Sie die untenstehenden Daten spenden möchten. Überprüfen Sie die Daten sorgfältig und passen Sie sie bei Bedarf an. Mit Ihrer Spende tragen Sie zur zuvor beschriebenen Forschung bei. Vielen Dank im Voraus.')
  .add('nl', 'Bepaal of u de onderstaande gegevens wilt doneren. Bekijk de gegevens zorgvuldig en pas zo nodig aan. Met uw donatie draagt u bij aan het eerder beschreven onderzoek. Alvast hartelijk dank.')

================
File: src/framework/visualisation/react/ui/prompts/file_input_multiple.tsx
================
import { Weak } from '../../../../helpers'
import * as React from 'react'
import { Translatable } from '../../../../types/elements'
import TextBundle from '../../../../text_bundle'
import { Translator } from '../../../../translator'
import { ReactFactoryContext } from '../../factory'
import { PropsUIPromptFileInputMultiple } from '../../../../types/prompts'
import { PrimaryButton } from '../elements/button'
import CloseSvg from '../../../../../assets/images/close.svg'
import { BodyLarge, BodySmall } from '../elements/text'

type Props = Weak<PropsUIPromptFileInputMultiple> & ReactFactoryContext

export const FileInputMultiple = (props: Props): JSX.Element => {
  const [waiting, setWaiting] = React.useState<boolean>(false)
  const [files, setFiles] = React.useState<File[]>([])
  const input = React.useRef<HTMLInputElement>(null)

  const { resolve } = props
  const { description, note, extensions, selectButton, continueButton } = prepareCopy(props)

  function handleClick (): void {
    input.current?.click()
  }

  function addFile(file: File): void {
    const fileExists = files.some(f => f.name === file.name && f.size === file.size);
    if (!fileExists) {
      setFiles(prevFiles => [...prevFiles, file]);
    }
  };

  function removeFile(index: number): void {
    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));
  };

  function handleSelect (event: React.ChangeEvent<HTMLInputElement>): void {
    const selectedFiles = event.target.files
    if (selectedFiles != null && selectedFiles.length > 0) {
			for (let i = 0; i < selectedFiles.length; i++) {
				addFile(selectedFiles[i])
			}
    } else {
      console.log('[FileInput] Error selecting file: ' + JSON.stringify(selectedFiles))
    }
  }

  function handleConfirm (): void {
    if (files !== undefined && !waiting) {
      setWaiting(true)
      resolve?.({ __type__: 'PayloadFileArray', value: files })
    }
  }

  return (
    <>
      <div id='select-panel'>
        <div className='flex-wrap text-bodylarge font-body text-grey1 text-left'>
          {description}
        </div>
        <div className='mt-8' />
        <div className='p-6 border-grey4 '>
          <input ref={input} id='input' type='file' className='hidden' accept={extensions} onChange={handleSelect} multiple/>
          <div className='flex flex-row gap-4 items-center'>
            <PrimaryButton onClick={handleClick} label={selectButton} color='bg-tertiary text-grey1' />
          </div>
        </div>
        <div>
        {files.map((file, index) => (
					<div className="w-64 md:w-full px-4">
						<div key={index} className="flex items-center justify-between">
							<span className="truncate">{file.name}</span>
							<button
								onClick={() => removeFile(index)}
								className="flex-shrink-0"
							>
							<img src={CloseSvg} className={"w-8 h-8"} />
							</button>
						</div>
						<div className="w-full mt-2">
							<hr className="border-grey4" />
						</div>
					</div>
        ))}
        </div>
        <div className='mt-4' />
        <div className={`${files[0] === undefined ? 'opacity-30' : 'opacity-100'}`}>
          <BodySmall text={note} margin='' />
          <div className='mt-8' />
          <div className='flex flex-row gap-4'>
            <PrimaryButton label={continueButton} onClick={handleConfirm} enabled={files[0] !== undefined} spinning={waiting} />
          </div>
        </div>
      </div>
    </>
  )
}

interface Copy {
  description: string
  note: string
  extensions: string
  selectButton: string
  continueButton: string
}

function prepareCopy ({ description, extensions, locale }: Props): Copy {
  return {
    description: Translator.translate(description, locale),
    note: Translator.translate(note(), locale),
    extensions: extensions,
    selectButton: Translator.translate(selectButtonLabel(), locale),
    continueButton: Translator.translate(continueButtonLabel(), locale)
  }
}

const continueButtonLabel = (): Translatable => {
  return new TextBundle()
    .add('en', 'Continue')
    .add('de', 'Weiter')
    .add('nl', 'Verder')
}

const selectButtonLabel = (): Translatable => {
  return new TextBundle()
    .add('en', 'Choose file(s)')
    .add('de', 'Datei(en) auswählen')
    .add('nl', 'Kies bestand(en)')
}

const note = (): Translatable => {
  return new TextBundle()
    .add('en', 'Note: The process to extract the correct data from the file is done on your own computer. No data is stored or sent yet.')
    .add('de', 'Anmerkung: Die weitere Verarbeitung der Datei erfolgt auf Ihrem eigenen Endgerät. Es werden noch keine Daten gespeichert oder weiter gesendet.')
    .add('nl', 'NB: Het proces om de juiste gegevens uit het bestand te halen gebeurt op uw eigen computer. Er worden nog geen gegevens opgeslagen of verstuurd.')
}

================
File: src/framework/visualisation/react/ui/prompts/file_input.tsx
================
import { Weak } from '../../../../helpers'
import * as React from 'react'
import { Translatable } from '../../../../types/elements'
import TextBundle from '../../../../text_bundle'
import { Translator } from '../../../../translator'
import { ReactFactoryContext } from '../../factory'
import { PropsUIPromptFileInput } from '../../../../types/prompts'
import { PrimaryButton } from '../elements/button'
import { BodyLarge, BodySmall } from '../elements/text'

type Props = Weak<PropsUIPromptFileInput> & ReactFactoryContext

export const FileInput = (props: Props): JSX.Element => {
  const [waiting, setWaiting] = React.useState<boolean>(false)
  const [selectedFile, setSelectedFile] = React.useState<File>()
  const input = React.useRef<HTMLInputElement>(null)

  const { resolve } = props
  const { description, note, placeholder, extensions, selectButton, continueButton } = prepareCopy(props)

  function handleClick (): void {
    input.current?.click()
  }

  function handleSelect (event: React.ChangeEvent<HTMLInputElement>): void {
    const files = event.target.files
    if (files != null && files.length > 0) {
      setSelectedFile(files[0])
    } else {
      console.log('[FileInput] Error selecting file: ' + JSON.stringify(files))
    }
  }

  function handleConfirm (): void {
    if (selectedFile !== undefined && !waiting) {
      setWaiting(true)
      resolve?.({ __type__: 'PayloadFile', value: selectedFile })
    }
  }

  return (
    <>
      <div id='select-panel'>
        <div className='flex-wrap text-bodylarge font-body text-grey1 text-left'>
          {description}
        </div>
        <div className='mt-8' />
        <div className='p-6 border-grey4 border-2 rounded'>
          <input ref={input} id='input' type='file' className='hidden' accept={extensions} onChange={handleSelect} />
          <div className='flex flex-row gap-4 items-center'>
            <BodyLarge text={selectedFile?.name ?? placeholder} margin='' color={selectedFile === undefined ? 'text-grey2' : 'textgrey1'} />
            <div className='flex-grow' />
            <PrimaryButton onClick={handleClick} label={selectButton} color='bg-tertiary text-grey1' />
          </div>
        </div>
        <div className='mt-4' />
        <div className={`${selectedFile === undefined ? 'opacity-30' : 'opacity-100'}`}>
          <BodySmall text={note} margin='' />
          <div className='mt-8' />
          <div className='flex flex-row gap-4'>
            <PrimaryButton label={continueButton} onClick={handleConfirm} enabled={selectedFile !== undefined} spinning={waiting} />
          </div>
        </div>
      </div>
    </>
  )
}

interface Copy {
  description: string
  note: string
  placeholder: string
  extensions: string
  selectButton: string
  continueButton: string
}

function prepareCopy ({ description, extensions, locale }: Props): Copy {
  return {
    description: Translator.translate(description, locale),
    note: Translator.translate(note(), locale),
    placeholder: Translator.translate(placeholder(), locale),
    extensions: extensions,
    selectButton: Translator.translate(selectButtonLabel(), locale),
    continueButton: Translator.translate(continueButtonLabel(), locale)
  }
}

const continueButtonLabel = (): Translatable => {
  return new TextBundle()
    .add('en', 'Continue')
    .add('de', 'Weiter')
    .add('nl', 'Verder')
}

const selectButtonLabel = (): Translatable => {
  return new TextBundle()
    .add('en', 'Choose file')
    .add('de', 'Datei auswählen')
    .add('nl', 'Kies bestand')
}

const note = (): Translatable => {
  return new TextBundle()
    .add('en', 'Note: The process to extract the correct data from the file is done on your own computer. No data is stored or sent yet.')
    .add('de', 'Anmerkung: Die weitere Verarbeitung der Datei erfolgt auf Ihrem eigenen Endgerät. Es werden noch keine Daten gespeichert oder weiter gesendet.')
    .add('nl', 'NB: Het proces om de juiste gegevens uit het bestand te halen gebeurt op uw eigen computer. Er worden nog geen gegevens opgeslagen of verstuurd.')
}

const placeholder = (): Translatable => {
  return new TextBundle()
    .add('en', 'Choose a file')
    .add('de', 'Eine Datei auswählen')
    .add('nl', 'Kies een bestand')
}

================
File: src/framework/visualisation/react/ui/prompts/progress.tsx
================
import { Weak } from '../../../../helpers'
import { Translator } from '../../../../translator'
import { ReactFactoryContext } from '../../factory'
import { PropsUIPromptProgress } from '../../../../types/prompts'
import { ProgressBar } from '../elements/progress_bar'

type Props = Weak<PropsUIPromptProgress> & ReactFactoryContext

export const Progress = (props: Props): JSX.Element => {
  const { resolve, percentage } = props
  const { description, message } = prepareCopy(props)

  function progressBar (): JSX.Element {
    if (percentage !== undefined) {
      return (
        <>
          <div className='mt-2' />
          <ProgressBar percentage={percentage} />
        </>
      )
    } else {
      return <></>
    }
  }

  function autoResolve (): void {
    resolve?.({ __type__: 'PayloadTrue', value: true })
  }

  // No user action possible, resolve directly to give control back to script
  autoResolve()

  return (
    <>
      <div id='select-panel'>
        <div className='flex-wrap text-bodylarge font-body text-grey1 text-left'>
          {description}
        </div>
        <div className='mt-8' />
        <div className='p-6 border-grey4 border-2 rounded'>
          <div className='flex-wrap text-bodylarge font-body text-grey2 text-left'>
            {message}
          </div>
          {progressBar()}
        </div>
      </div>
    </>
  )
}

interface Copy {
  description: string
  message: string
}

function prepareCopy ({ description, message, locale }: Props): Copy {
  return {
    description: Translator.translate(description, locale),
    message: message
  }
}

================
File: src/framework/visualisation/react/ui/prompts/questionnaire.tsx
================
import React from 'react';
import { ReactFactoryContext } from '../../factory'
import { Weak } from '../../../../helpers'
import TextBundle from '../../../../text_bundle'
import { PrimaryButton } from '../elements/button'
import { PropsUIPromptQuestionnaire } from '../../../../types/prompts'
import { Translator } from '../../../../translator'
import { isPropsUIQuestionMultipleChoice } from '../../../../types/elements'
import { isPropsUIQuestionMultipleChoiceCheckbox } from '../../../../types/elements'
import { isPropsUIQuestionOpen } from '../../../../types/elements'
import { MultipleChoiceQuestion } from '../../ui/elements/question_multiple_choice'
import { MultipleChoiceQuestionCheckbox } from '../../ui/elements/question_multiple_choice_checkbox'
import { OpenQuestion } from '../../ui/elements/question_open'

type Props = Weak<PropsUIPromptQuestionnaire> & ReactFactoryContext

export const Questionnaire = (props: Props): JSX.Element => {
  const { questions, description, resolve, locale } = props
  const [answers, setAnswers] = React.useState<{}>({});
  const copy = prepareCopy(locale)

    
  React.useEffect(() => {
    // check if running in an iframe
    if (window.frameElement) {
      window.parent.scrollTo(0,0)
    } else {
      window.scrollTo(0,0)
    }
  }, [])

  function handleDonate (): void {
    const value = JSON.stringify(answers)
    resolve?.({ __type__: 'PayloadJSON', value })
  }

  function handleCancel (): void {
    resolve?.({ __type__: 'PayloadFalse', value: false })
  }

  const renderQuestion = (item: any) => {
    if (isPropsUIQuestionMultipleChoice(item)) {
      return (
        <div key={item.id}>
          <MultipleChoiceQuestion {...item} locale={locale} parentSetter={setAnswers} />
        </div>
      )
    }
    if (isPropsUIQuestionMultipleChoiceCheckbox(item)) {
      return (
        <div key={item.id}>
          <MultipleChoiceQuestionCheckbox {...item} locale={locale} parentSetter={setAnswers} />
        </div>
      )
    }
    if (isPropsUIQuestionOpen(item)) {
      return (
        <div key={item.id}>
          <OpenQuestion {...item} locale={locale} parentSetter={setAnswers} />
        </div>
      )
    }
  }

  const renderQuestions = () => {
   return questions.map((item) => renderQuestion(item))
  }

  return (
    <div>
      <div className='flex-wrap text-bodylarge font-body text-grey1 text-left'>
        {copy.description}
      </div>
      <div>
        {renderQuestions()}
      </div>
      <div className='flex flex-row gap-4 mt-4 mb-4'>
        <PrimaryButton label={copy.continueLabel} onClick={handleDonate} color='bg-success text-white' />
      </div>
    </div>
  );

        
  function prepareCopy (locale: string): Copy {
    return {
      description: Translator.translate(description, locale),
      continueLabel: Translator.translate(continueLabel, locale)
    }
  }
};


interface Copy {
  description: string
  continueLabel: string
}


const continueLabel = new TextBundle()
  .add('en', 'Continue')
  .add('nl', 'Verder')

================
File: src/framework/visualisation/react/ui/prompts/radio_input.tsx
================
import * as React from 'react'
import { Weak } from '../../../../helpers'
import { PropsUIRadioItem, Translatable } from '../../../../types/elements'
import TextBundle from '../../../../text_bundle'
import { Translator } from '../../../../translator'
import { ReactFactoryContext } from '../../factory'
import { PropsUIPromptRadioInput } from '../../../../types/prompts'
import { RadioItem } from '../elements/radio_item'
import { PrimaryButton } from '../elements/button'

interface Copy {
  title: string
  description: string
  continueButton: string
}

type Props = Weak<PropsUIPromptRadioInput> & ReactFactoryContext

function prepareCopy ({ title, description, locale }: Props): Copy {
  return {
    title: Translator.translate(title, locale),
    description: Translator.translate(description, locale),
    continueButton: Translator.translate(continueButtonLabel(), locale)
  }
}

export const RadioInput = (props: Props): JSX.Element => {
  const [selectedId, setSelectedId] = React.useState<number>(-1)
  const [waiting, setWaiting] = React.useState<boolean>(false)
  const [checked, setChecked] = React.useState<boolean>(false)

  const { items, resolve } = props
  const { title, description, continueButton } = prepareCopy(props)

  function handleSelect (id: number): void {
    setSelectedId(id)
    setChecked(true)
  }

  function handleConfirm (): void {
    if (!waiting) {
      setWaiting(true)
      const item = items.at(selectedId)
      if (item !== undefined) {
        resolve?.({ __type__: 'PayloadString', value: item.value })
      }
    }
  }

  function renderItems (items: PropsUIRadioItem[]): JSX.Element[] {
    return items.map((item, index) => <RadioItem key={index} onSelect={() => handleSelect(index)} id={index} value={item.value} selected={selectedId === index} />)
  }

  return (
    <>
      <div className='text-title5 font-title5 sm:text-title4 sm:font-title4 lg:text-title3 lg:font-title3 text-grey1'>
        {title}
      </div>
      <div className='mt-8' />
      <div id='select-panel'>
        <div className='flex-wrap text-bodylarge font-body text-grey1 text-left'>
          {description}
        </div>
        <div className='mt-4' />
        <div>
          <div id='radio-group' className='flex flex-col gap-3'>
            {renderItems(items)}
          </div>
        </div>
      </div>
      <div className='mt-8' />
      <div className={`flex flex-row gap-4 ${checked ? '' : 'opacity-30'}`}>
        <PrimaryButton label={continueButton} onClick={handleConfirm} enabled={checked} spinning={waiting} />
      </div>
    </>
  )
}

const continueButtonLabel = (): Translatable => {
  return new TextBundle()
    .add('en', 'Continue')
    .add('de', 'Weiter')
    .add('nl', 'Doorgaan')
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/figures/common_stopwords.ts
================
export const nl = [
  'de',
  'en',
  'van',
  'ik',
  'te',
  'dat',
  'die',
  'in',
  'een',
  'hij',
  'het',
  'niet',
  'zijn',
  'is',
  'was',
  'op',
  'aan',
  'met',
  'als',
  'voor',
  'had',
  'er',
  'maar',
  'om',
  'hem',
  'dan',
  'zou',
  'of',
  'wat',
  'mijn',
  'men',
  'dit',
  'zo',
  'door',
  'over',
  'ze',
  'zich',
  'bij',
  'ook',
  'tot',
  'je',
  'mij',
  'uit',
  'der',
  'daar',
  'haar',
  'naar',
  'heb',
  'hoe',
  'heeft',
  'hebben',
  'deze',
  'u',
  'want',
  'nog',
  'zal',
  'me',
  'zij',
  'nu',
  'ge',
  'geen',
  'omdat',
  'iets',
  'worden',
  'toch',
  'al',
  'waren',
  'veel',
  'meer',
  'doen',
  'toen',
  'moet',
  'ben',
  'zonder',
  'kan',
  'hun',
  'dus',
  'alles',
  'onder',
  'ja',
  'eens',
  'hier',
  'wie',
  'werd',
  'altijd',
  'doch',
  'wordt',
  'wezen',
  'kunnen',
  'ons',
  'zelf',
  'tegen',
  'na',
  'reeds',
  'wil',
  'kon',
  'niets',
  'uw',
  'iemand',
  'geweest',
  'andere'
]

export const en = [
  'i',
  'me',
  'my',
  'myself',
  'we',
  'our',
  'ours',
  'ourselves',
  'you',
  'your',
  'yours',
  'yourself',
  'yourselves',
  'he',
  'him',
  'his',
  'himself',
  'she',
  'her',
  'hers',
  'herself',
  'it',
  'its',
  'itself',
  'they',
  'them',
  'their',
  'theirs',
  'themselves',
  'what',
  'which',
  'who',
  'whom',
  'this',
  'that',
  'these',
  'those',
  'am',
  'is',
  'are',
  'was',
  'were',
  'be',
  'been',
  'being',
  'have',
  'has',
  'had',
  'having',
  'do',
  'does',
  'did',
  'doing',
  'would',
  'should',
  'could',
  'ought',
  "i'm",
  "you're",
  "he's",
  "she's",
  "it's",
  "we're",
  "they're",
  "i've",
  "you've",
  "we've",
  "they've",
  "i'd",
  "you'd",
  "he'd",
  "she'd",
  "we'd",
  "they'd",
  "i'll",
  "you'll",
  "he'll",
  "she'll",
  "we'll",
  "they'll",
  "isn't",
  "aren't",
  "wasn't",
  "weren't",
  "hasn't",
  "haven't",
  "hadn't",
  "doesn't",
  "don't",
  "didn't",
  "won't",
  "wouldn't",
  "shan't",
  "shouldn't",
  "can't",
  'cannot',
  "couldn't",
  "mustn't",
  "let's",
  "that's",
  "who's",
  "what's",
  "here's",
  "there's",
  "when's",
  "where's",
  "why's",
  "how's",
  'a',
  'an',
  'the',
  'and',
  'but',
  'if',
  'or',
  'because',
  'as',
  'until',
  'while',
  'of',
  'at',
  'by',
  'for',
  'with',
  'about',
  'against',
  'between',
  'into',
  'through',
  'during',
  'before',
  'after',
  'above',
  'below',
  'to',
  'from',
  'up',
  'down',
  'in',
  'out',
  'on',
  'off',
  'over',
  'under',
  'again',
  'further',
  'then',
  'once',
  'here',
  'there',
  'when',
  'where',
  'why',
  'how',
  'all',
  'any',
  'both',
  'each',
  'few',
  'more',
  'most',
  'other',
  'some',
  'such',
  'no',
  'nor',
  'not',
  'only',
  'own',
  'same',
  'so',
  'than',
  'too',
  'very',
  'will'
]

export const de = [
  'aber',
  'alle',
  'allem',
  'allen',
  'aller',
  'alles',
  'als',
  'also',
  'am',
  'an',
  'ander',
  'andere',
  'anderem',
  'anderen',
  'anderer',
  'anderes',
  'anderm',
  'andern',
  'anderr',
  'anders',
  'auch',
  'auf',
  'aus',
  'bei',
  'bin',
  'bis',
  'bist',
  'da',
  'damit',
  'dann',
  'der',
  'den',
  'des',
  'dem',
  'die',
  'das',
  'daß',
  'derselbe',
  'derselben',
  'denselben',
  'desselben',
  'demselben',
  'dieselbe',
  'dieselben',
  'dasselbe',
  'dazu',
  'dein',
  'deine',
  'deinem',
  'deinen',
  'deiner',
  'deines',
  'denn',
  'derer',
  'dessen',
  'dich',
  'dir',
  'du',
  'dies',
  'diese',
  'diesem',
  'diesen',
  'dieser',
  'dieses',
  'doch',
  'dort',
  'durch',
  'ein',
  'eine',
  'einem',
  'einen',
  'einer',
  'eines',
  'einig',
  'einige',
  'einigem',
  'einigen',
  'einiger',
  'einiges',
  'einmal',
  'er',
  'ihn',
  'ihm',
  'es',
  'etwas',
  'euer',
  'eure',
  'eurem',
  'euren',
  'eurer',
  'eures',
  'für',
  'gegen',
  'gewesen',
  'hab',
  'habe',
  'haben',
  'hat',
  'hatte',
  'hatten',
  'hier',
  'hin',
  'hinter',
  'ich',
  'mich',
  'mir',
  'ihr',
  'ihre',
  'ihrem',
  'ihren',
  'ihrer',
  'ihres',
  'euch',
  'im',
  'in',
  'indem',
  'ins',
  'ist',
  'jede',
  'jedem',
  'jeden',
  'jeder',
  'jedes',
  'jene',
  'jenem',
  'jenen',
  'jener',
  'jenes',
  'jetzt',
  'kann',
  'kein',
  'keine',
  'keinem',
  'keinen',
  'keiner',
  'keines',
  'können',
  'könnte',
  'machen',
  'man',
  'manche',
  'manchem',
  'manchen',
  'mancher',
  'manches',
  'mein',
  'meine',
  'meinem',
  'meinen',
  'meiner',
  'meines',
  'mit',
  'muss',
  'musste',
  'nach',
  'nicht',
  'nichts',
  'noch',
  'nun',
  'nur',
  'ob',
  'oder',
  'ohne',
  'sehr',
  'sein',
  'seine',
  'seinem',
  'seinen',
  'seiner',
  'seines',
  'selbst',
  'sich',
  'sie',
  'ihnen',
  'sind',
  'so',
  'solche',
  'solchem',
  'solchen',
  'solcher',
  'solches',
  'soll',
  'sollte',
  'sondern',
  'sonst',
  'über',
  'um',
  'und',
  'uns',
  'unse',
  'unsem',
  'unsen',
  'unser',
  'unses',
  'unter',
  'viel',
  'vom',
  'von',
  'vor',
  'während',
  'war',
  'waren',
  'warst',
  'was',
  'weg',
  'weil',
  'weiter',
  'welche',
  'welchem',
  'welchen',
  'welcher',
  'welches',
  'wenn',
  'werde',
  'werden',
  'wie',
  'wieder',
  'will',
  'wir',
  'wird',
  'wirst',
  'wo',
  'wollen',
  'wollte',
  'würde',
  'würden',
  'zu',
  'zum',
  'zur',
  'zwar',
  'zwischen'
]

const stopwords = [...nl, ...en, ...de]
export default stopwords

================
File: src/framework/visualisation/react/ui/visualization_plugin/figures/recharts_graph.tsx
================
import { translate } from '../translate'
import { AxisSettings, TickerFormat, ChartVisualizationData } from '../types'

import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  BarChart,
  Bar,
  AreaChart,
  Area,
  Label
} from 'recharts'

interface Props {
  visualizationData: ChartVisualizationData
  locale: string
}

const margin = { top: 5, right: 5, left: 5, bottom: 15 }

export default function RechartsGraph ({ visualizationData, locale }: Props): JSX.Element | null {
  const xLabel = translate(visualizationData.xLabel ?? visualizationData.xKey, locale)
  const tickFormatter = getTickFormatter(Object.values(visualizationData.yKeys))

  function tooltip (): JSX.Element {
    return (
      <Tooltip
        allowEscapeViewBox={{ x: false, y: false }}
        labelStyle={{ marginBottom: '0.5rem' }}
        formatter={tickFormatter}
        labelFormatter={(value: string) => `${xLabel}: ${value}`}
        contentStyle={{
          fontSize: '0.8rem',
          lineHeight: '0.8rem',
          background: '#fff8',
          backdropFilter: 'blur(3px)'
        }}
      />
    )
  }

  function axes (minTickGap: number): JSX.Element | null {
    const hasVisualizationData = Boolean(visualizationData)
    if (!hasVisualizationData) return null

    return (
      <>
        <XAxis dataKey={visualizationData.xKey} minTickGap={minTickGap} fontSize={12}>
          <Label className=' font-bold text-sm' value={xLabel} offset={-6} position='insideBottom' />
        </XAxis>
        <YAxis yAxisId='left' tickFormatter={tickFormatter} fontSize={12} />
      </>
    )
  }

  function legend (): JSX.Element {
    return (
      <Legend
        margin={{ left: 10 }}
        align='right'
        verticalAlign='top'
        iconType='plainline'
        wrapperStyle={{ fontSize: '0.8rem' }}
      />
    )
  }

  let chart: JSX.Element | null = null

  function getYLabel (yKey: AxisSettings): string {
    return translate(yKey.label ?? yKey.id, locale)
  }

  if (visualizationData.type === 'line') {
    chart = (
      <LineChart data={visualizationData.data} margin={margin}>
        {axes(20)}
        {tooltip()}
        {legend()}
        {Object.values(visualizationData.yKeys).map((yKey: AxisSettings, i: number) => {
          const { color, dash } = getLineStyle(i)
          return (
            <Line
              key={yKey.id}
              yAxisId='left'
              type='monotone'
              name={getYLabel(yKey)}
              dataKey={yKey.id}
              dot={false}
              strokeWidth={2}
              stroke={color}
              strokeDasharray={dash}
            />
          )
        })}
      </LineChart>
    )
  }

  if (visualizationData.type === 'bar') {
    chart = (
      <BarChart data={visualizationData.data} margin={margin}>
        {axes(0)}
        {tooltip()}
        {legend()}
        {Object.values(visualizationData.yKeys).map((yKey: AxisSettings, i: number) => {
          const { color } = getLineStyle(i)
          return <Bar key={yKey.id} yAxisId='left' dataKey={yKey.id} name={getYLabel(yKey)} fill={color} />
        })}
      </BarChart>
    )
  }

  if (visualizationData.type === 'area') {
    chart = (
      <AreaChart data={visualizationData.data} margin={margin}>
        {axes(20)}
        {tooltip()}
        {legend()}
        {Object.values(visualizationData.yKeys).map((yKey: AxisSettings, i: number) => {
          const { color } = getLineStyle(i)
          return (
            <Area key={yKey.id} yAxisId='left' dataKey={yKey.id} name={getYLabel(yKey)} fill={color} type='monotone' />
          )
        })}
      </AreaChart>
    )
  }

  if (chart == null) return null
  return (
    <ResponsiveContainer width='100%' height='100%'>
      {chart}
    </ResponsiveContainer>
  )
}

function getLineStyle (index: number): { color: string, dash: string } {
  const COLORS = ['#4272EF', '#FF5E5E', '#FFCF60', '#1E3FCC', '#CC3F3F', '#CC9F3F']
  const DASHES = ['1', '5 5', '10 10', '5 5 10 10']

  const cell = index % (COLORS.length * DASHES.length)
  const row = index % COLORS.length
  const column = Math.floor(cell / COLORS.length)

  return { color: COLORS[row], dash: DASHES[column] }
}

function getTickFormatter (yKeys: AxisSettings[]): ((value: number) => string) | undefined {
  let tickerFormat: TickerFormat | undefined

  for (const yKey of yKeys) {
    if (tickerFormat === undefined) tickerFormat = yKey.tickerFormat
    if (tickerFormat !== yKey.tickerFormat) tickerFormat = 'default'
  }

  return tickFormatter(tickerFormat ?? 'default')
}

function tickFormatter (type: TickerFormat): undefined | ((value: number) => string) {
  if (type === 'percent') return (value: number) => `${value}%`
  return undefined
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/figures/visx_wordcloud.tsx
================
import { Text } from '@visx/text'
import Wordcloud from '@visx/wordcloud/lib/Wordcloud'
import { ParentSize } from '@visx/responsive'
import { ScoredTerm, TextVisualizationData } from '../types'
import { useMemo } from 'react'
import stopwords from './common_stopwords'

interface Props {
  visualizationData: TextVisualizationData
}

interface Word extends ScoredTerm {
  fontSize: number
}

function VisxWordcloud ({ visualizationData }: Props): JSX.Element | null {
  const colors = ['#444', '#1E3FCC', '#4272EF', '#CC9F3F', '#FFCF60']
  const nWords = 100

  const words: Word[] = useMemo(() => {
    const fontRange = [20, 50]
    const words = visualizationData.topTerms.filter((w) => !stopwords.includes(w.text.toLowerCase())).slice(0, nWords)

    let minImportance = words[0].importance
    let maxImportance = words[0].importance
    words.forEach((w) => {
      if (w.importance < minImportance) minImportance = w.importance
      if (w.importance > maxImportance) maxImportance = w.importance
    })

    const [sqrtMin, sqrtMax] = [Math.sqrt(minImportance), Math.sqrt(maxImportance)]
    return words.map((w) => {
      const sqrtImportance = Math.sqrt(w.importance)

      const scale = (sqrtImportance - sqrtMin) / Math.max(sqrtMax - sqrtMin, 0.001)
      const fontSize = scale * (fontRange[1] - fontRange[0]) + fontRange[0]
      return { ...w, fontSize }
    })
  }, [visualizationData, nWords])

  return (
    <ParentSize debounceTime={1000}>
      {(parent) => (
        <Wordcloud
          words={words}
          height={parent.height}
          width={parent.width}
          rotate={0}
          padding={4}
          spiral='rectangular'
          font='Finador-Bold'
          fontSize={(w) => w.fontSize}
          random={() => 0.5}
        >
          {(cloudWords) => {
            return cloudWords.map((w, i: number) => {
              return (
                <Text
                  key={w.text}
                  fill={colors[Math.floor((i / cloudWords.length) * colors.length)]}
                  fontSize={w.size}
                  textAnchor='middle'
                  fontFamily={w.font}
                  transform={`translate(${w.x ?? 0}, ${w.y ?? 0}) rotate(${w.rotate ?? 0})`}
                >
                  {w.text}
                </Text>
              )
            })
          }}
        </Wordcloud>
      )}
    </ParentSize>
  )
}

export default VisxWordcloud

================
File: src/framework/visualisation/react/ui/visualization_plugin/ui/loader.tsx
================
export function Loader (): JSX.Element {
  return (
    <div className='flex justify-center items-center gap-6'>
      <div className='w-10 h-10'>
        <div role='status'>
          <svg
            aria-hidden='true'
            className='w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-primary'
            viewBox='0 0 100 101'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <path
              d='M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z'
              fill='currentColor'
            />
            <path
              d='M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z'
              fill='currentFill'
            />
          </svg>
          <span className='sr-only'>Loading...</span>
        </div>
      </div>
    </div>
  )
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/visualizationDataFunctions/prepareChartData.ts
================
import { formatDate, getTableColumn } from './util'
import { Table, TickerFormat, ChartVisualizationData, ChartVisualization, AxisSettings } from '../types'

export async function prepareChartData (
  table: Table,
  visualization: ChartVisualization
): Promise<ChartVisualizationData> {
  if (table.body.rows.length === 0) return { type: visualization.type, xKey: '', xLabel: '', yKeys: {}, data: [] }

  const aggregate = aggregateData(table, visualization)
  return createVisualizationData(table, visualization, aggregate)
}

function createVisualizationData (
  table: Table,
  visualization: ChartVisualization,
  aggregate: Record<string, PrepareAggregatedData>
): ChartVisualizationData {
  const visualizationData = initializeVisualizationData(table, visualization)

  visualizationData.data = Object.values(aggregate)
    .sort((a: any, b: any) => (a.sortBy < b.sortBy ? -1 : b.sortBy < a.sortBy ? 1 : 0))
    .map((d) => {
      for (const key of Object.keys(d.values)) d.values[key] = Math.round(d.values[key] * 100) / 100

      return {
        ...d.values,
        [d.xKey]: d.xValue,
        __rowIds: d.rowIds,
        __sortBy: d.sortBy
      }
    })

  return visualizationData
}

function initializeVisualizationData (table: Table, visualization: ChartVisualization): ChartVisualizationData {
  const yKeys: Record<string, AxisSettings> = {}
  for (const value of visualization.values) {
    let tickerFormat: TickerFormat = 'default'
    if (value.aggregate === 'pct' || value.aggregate === 'count_pct') tickerFormat = 'percent'

    if (value.group_by === undefined) {
      const label = value.label !== undefined ? value.label : value.column
      yKeys[value.column] = { id: value.column, label, tickerFormat }
    } else {
      const uniqueValues = Array.from(new Set(getTableColumn(table, value.group_by)))
      for (const uniqueValue of uniqueValues) {
        const id = `${value.column}.GROUP_BY.${uniqueValue}`
        yKeys[id] = { id, label: uniqueValue, tickerFormat }
      }
    }
  }

  return {
    type: visualization.type,
    xKey: visualization.group.column,
    xLabel: visualization.group.label,
    yKeys,
    data: []
  }
}

function aggregateData (table: Table, visualization: ChartVisualization): Record<string, PrepareAggregatedData> {
  const aggregate: Record<string, PrepareAggregatedData> = {}

  const { groupBy, xSortable } = prepareX(table, visualization)
  const rowIds = table.body.rows.map((row) => row.id)
  const xKey = visualization.group.column

  const anyAddZeroes = visualization.values.some((value) => value.addZeroes === true)
  if (anyAddZeroes && xSortable != null) {
    for (const [uniqueValue, sortby] of Object.entries(xSortable)) {
      aggregate[uniqueValue] = {
        sortBy: sortby,
        rowIds: {},
        xKey,
        xValue: uniqueValue,
        values: {}
      }
    }
  }

  for (const value of visualization.values) {
    // loop over all y values

    const aggFun = value.aggregate !== undefined ? value.aggregate : 'count'

    const yValues = getTableColumn(table, value.column)
    if (yValues.length === 0) throw new Error(`Y column ${table.id}.${value.column} not found`)

    // If group_by column is specified, the columns in the aggregated data will be the unique group_by
    // column values. As suffix we use the value column, separated with .GROUP_BY.. This is used
    // so that we can relate the aggregated data back to the value specification
    let yGroup: null | string[] = null
    if (value.group_by !== undefined) { yGroup = getTableColumn(table, value.group_by).map((v) => `${value.column}.GROUP_BY.${v}`) }

    // if missing values should be treated as zero, we need to add the missing values after knowing all groups
    const addZeroes = value.addZeroes ?? false
    const groupSummary: Record<string, { n: number, sum: number }> = {}

    for (let i = 0; i < rowIds.length; i++) {
      // loop over rows of table
      const xValue = groupBy[i]

      if (visualization.group.range !== undefined) {
        if (Number(xValue) < visualization.group.range[0] || Number(xValue) > visualization.group.range[1]) {
          continue
        }
      }

      const yValue = yValues[i]
      const group = yGroup != null ? yGroup[i] : value.column

      const sortBy = xSortable != null ? xSortable[xValue] : groupBy[i]

      // calculate group summary statistics. This is used for the mean, pct and count_pct aggregations
      if (groupSummary[group] === undefined) groupSummary[group] = { n: 0, sum: 0 }
      if (aggFun === 'count_pct' || aggFun === 'mean') groupSummary[group].n += 1
      if (aggFun === 'pct') groupSummary[group].sum += Number(yValue) ?? 0

      if (aggregate[xValue] === undefined) {
        aggregate[xValue] = {
          sortBy: sortBy,
          rowIds: {},
          xKey,
          xValue: String(xValue),
          values: {}
        }
      }

      if (aggregate[xValue].rowIds[group] === undefined) aggregate[xValue].rowIds[group] = []
      aggregate[xValue].rowIds[group].push(rowIds[i])

      if (aggregate[xValue].values[group] === undefined) aggregate[xValue].values[group] = 0
      if (aggFun === 'count' || aggFun === 'count_pct') aggregate[xValue].values[group] += 1
      if (aggFun === 'sum' || aggFun === 'mean' || aggFun === 'pct') {
        aggregate[xValue].values[group] += Number(yValue) ?? 0
      }
    }

    // use groupSummary to calculate the mean, pct and count_pct aggregations
    Object.keys(groupSummary).forEach((group) => {
      for (const xValue of Object.keys(aggregate)) {
        if (aggregate[xValue].values[group] === undefined) {
          if (addZeroes) aggregate[xValue].values[group] = 0
          else continue
        }
        if (aggFun === 'mean') {
          aggregate[xValue].values[group] = Number(aggregate[xValue].values[group]) / groupSummary[group].n
        }
        if (aggFun === 'count_pct') {
          aggregate[xValue].values[group] = (100 * Number(aggregate[xValue].values[group])) / groupSummary[group].n
        }
        if (aggFun === 'pct') {
          aggregate[xValue].values[group] = (100 * Number(aggregate[xValue].values[group])) / groupSummary[group].sum
        }
      }
    })
  }

  return aggregate
}

function prepareX (
  table: Table,
  visualization: ChartVisualization
): { groupBy: string[], xSortable: Record<string, string | number> | null } {
  let groupBy = getTableColumn(table, visualization.group.column)
  if (groupBy.length === 0) {
    throw new Error(`X column ${table.id}.${visualization.group.column} not found`)
  }
  // let xSortable: Array<string | number> | null = null // separate variable allows using epoch time for sorting dates
  let xSortable: Record<string, string | number> | null = null // map x values to sortable values

  // ADD CODE TO TRANSFORM TO DATE, BUT THEN ALSO KEEP AN INDEX BASED ON THE DATE ORDER
  if (visualization.group.dateFormat !== undefined) {
    ;[groupBy, xSortable] = formatDate(groupBy, visualization.group.dateFormat)
  }

  if (visualization.group.levels !== undefined) {
    xSortable = {}

    for (let i = 0; i < visualization.group.levels.length; i++) {
      const level = visualization.group.levels[i]
      xSortable[level] = i
    }
  }

  return { groupBy, xSortable }
}

export interface PrepareAggregatedData {
  xKey: string
  xValue: string
  values: Record<string, number>
  rowIds: Record<string, string[]>
  sortBy: number | string
  tickerFormat?: TickerFormat
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/visualizationDataFunctions/prepareTextData.ts
================
import { extractUrlDomain, getTableColumn, tokenize } from './util'
import { TextVisualizationData, TextVisualization, ScoredTerm, Table } from '../types'

interface VocabularyStats {
  value: number
  docFreq: number
}

export async function prepareTextData (table: Table, visualization: TextVisualization): Promise<TextVisualizationData> {
  const visualizationData: TextVisualizationData = {
    type: visualization.type,
    topTerms: []
  }

  if (table.body.rows.length === 0) return visualizationData

  const texts = getTableColumn(table, visualization.textColumn)
  const values = visualization.valueColumn != null ? getTableColumn(table, visualization.valueColumn) : null

  const vocabulary = getVocabulary(texts, values, visualization)
  visualizationData.topTerms = getTopTerms(vocabulary, texts.length, 200)

  return visualizationData
}

function getVocabulary (
  texts: string[],
  values: string[] | null,
  visualization: TextVisualization
): Record<string, VocabularyStats> {
  const vocabulary: Record<string, VocabularyStats> = {}

  for (let i = 0; i < texts.length; i++) {
    if (texts?.[i] == null) continue
    const text = texts[i]
    const tokens = visualization.tokenize != null && visualization.tokenize ? tokenize(text) : [text]

    const seen = new Set<string>()
    for (let token of tokens) {
      if (visualization.extract === 'url_domain') token = extractUrlDomain(token)
      if (vocabulary[token] === undefined) vocabulary[token] = { value: 0, docFreq: 0 }
      if (!seen.has(token)) {
        vocabulary[token].docFreq += 1
        seen.add(token)
      }

      const v = values != null ? Number(values[i]) ?? 1 : 1
      if (!isNaN(v)) vocabulary[token].value += v
    }
  }
  return vocabulary
}

function getTopTerms (vocabulary: Record<string, VocabularyStats>, nDocs: number, topTerms: number): ScoredTerm[] {
  return Object.entries(vocabulary)
    .map(([text, stats]) => {
      const tf = stats.value
      const idf = Math.log(nDocs / stats.docFreq)
      return { text, value: stats.value, importance: tf * idf }
    })
    .sort((a, b) => b.importance - a.importance)
    .slice(0, topTerms)
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/visualizationDataFunctions/useVisualizationData.tsx
================
import { VisualizationType, VisualizationData, Table } from '../types'
import { useEffect, useState } from 'react'

type Status = 'loading' | 'success' | 'error'

export default function useVisualizationData (
  table: Table,
  visualization: VisualizationType
): [VisualizationData | undefined, Status] {
  const [visualizationData, setVisualizationData] = useState<VisualizationData>()
  const [status, setStatus] = useState<Status>('loading')
  const [worker, setWorker] = useState<Worker>()

  useEffect(() => {
    const worker = new Worker(new URL('./visualizationDataWorker.ts', import.meta.url))
    setWorker(worker)
    return () => {
      worker.terminate()
    }
  }, [])

  useEffect(() => {
    if (worker != null && window.Worker !== undefined) {
      setStatus('loading')
      worker.onmessage = (e: MessageEvent<{ status: Status, visualizationData: VisualizationData }>) => {
        try {
          setVisualizationData(e.data.visualizationData)
          setStatus(e.data.status)
        } catch (e) {
          setVisualizationData(undefined)
          setStatus('error')
        }
      }
      worker.postMessage({ table, visualization })
    }
  }, [table, visualization, worker])

  return [visualizationData, status]
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/visualizationDataFunctions/util.ts
================
import { DateFormat, Table } from "../types";

export function formatDate(
  dateString: string[],
  format: DateFormat,
  minValues: number = 10
): [string[], Record<string, number> | null] {
  let formattedDate: string[] = dateString;
  const dateNumbers = dateString.map((date) => new Date(date).getTime());
  let domain: [number, number] | null = null;
  let formatter: (date: Date) => string = (date) => date.toISOString();

  if (format === "auto") format = autoFormatDate(dateNumbers, minValues);

  if (format === "year") formatter = (date) => date.getFullYear().toString();

  if (format === "quarter") {
    formatter = (date) => {
      const year = date.getFullYear().toString();
      const quarter = Math.floor(date.getMonth() / 3) + 1;
      return `${year}-Q${quarter}`;
    };
  }

  if (format === "month") {
    formatter = (date) => {
      const year = date.getFullYear().toString();
      const month = date.toLocaleString("default", { month: "short" });
      return `${year}-${month}`;
    };
  }

  if (format === "day") {
    formatter = (date) => {
      const year = date.getFullYear().toString();
      const month = date.toLocaleString("default", { month: "short" });
      const day = date.getDate().toString();
      return `${year}-${month}-${day}`;
    };
  }

  if (format === "hour") {
    formatter = (date) => {
      const year = date.getFullYear().toString();
      const month = date.toLocaleString("default", { month: "short" });
      const day = date.getDate().toString();
      const hour = date.getHours();
      return `${year}-${month}-${day} ${hour}:00`;
    };
  }

  if (format === "month_cycle") {
    formatter = (date) => {
      const intlFormatter = new Intl.DateTimeFormat("default", { month: "long" });
      return intlFormatter.format(date);
    };
    // can be any year, starting at january
    domain = [new Date("2000-01-01").getTime(), new Date("2001-01-01").getTime()];
  }
  if (format === "weekday_cycle") {
    formatter = (date) => {
      const intlFormatter = new Intl.DateTimeFormat("default", { weekday: "long" });
      return intlFormatter.format(date);
    };
    // can be any full week, starting at monday
    domain = [new Date("2023-11-06").getTime(), new Date("2023-11-13").getTime()];
  }
  if (format === "hour_cycle") {
    formatter = (date) => {
      const intlFormatter = new Intl.DateTimeFormat("default", { hour: "numeric", hour12: false });
      return intlFormatter.format(date);
    };
    // can be any day, starting at midnight
    domain = [new Date("2000-01-01").getTime(), new Date("2000-01-02").getTime()];
  }

  formattedDate = dateNumbers.map((date) => formatter(new Date(date)));
  if (domain == null) domain = getDomain(dateNumbers);
  const sortableDate: Record<string, number> | null = createSortable(domain, format, formatter);

  return [formattedDate, sortableDate];
}

function autoFormatDate(dateNumbers: number[], minValues: number): DateFormat {
  const [minTime, maxTime] = getDomain(dateNumbers);

  let autoFormat: DateFormat = "hour";
  if (maxTime - minTime > 1000 * 60 * 60 * 24 * minValues) autoFormat = "day";
  if (maxTime - minTime > 1000 * 60 * 60 * 24 * 30 * minValues) autoFormat = "month";
  if (maxTime - minTime > 1000 * 60 * 60 * 24 * 30 * 3 * minValues) autoFormat = "quarter";
  if (maxTime - minTime > 1000 * 60 * 60 * 24 * 365 * minValues) autoFormat = "year";

  return autoFormat;
}

function createSortable(
  domain: [number, number],
  interval: string,
  formatter: (date: Date) => string
): Record<string, number> | null {
  // creates a map of datestrings to sortby numbers. Also includes intervalls, so that
  // addZeroes can be used.
  const sortable: Record<string, number> = {};
  const [minTime, maxTime] = domain;

  // intervalnumbers don't need to be exact. Just small enough that they never
  // skip over an interval (e.g., month should be shortest possible month).
  // Duplicate dates are ignored in set
  let intervalNumber: number = 0;
  if (interval === "year") intervalNumber = 1000 * 60 * 60 * 24 * 364;
  if (interval === "quarter") intervalNumber = 1000 * 60 * 60 * 24 * 28 * 3;
  if (["month", "month_cycle"].includes(interval)) intervalNumber = 1000 * 60 * 60 * 24 * 28;
  if (["day", "weekday_cycle"].includes(interval)) intervalNumber = 1000 * 60 * 60 * 24;
  if (["hour", "hour_cycle"].includes(interval)) intervalNumber = 1000 * 60 * 60;

  if (intervalNumber > 0) {
    for (let i = minTime; i <= maxTime; i += intervalNumber) {
      const date = new Date(i);
      const datestring = formatter(date);
      if (sortable[datestring] !== undefined) continue;
      sortable[datestring] = i;
    }
  }

  return sortable;
}

function getDomain(numbers: number[]): [number, number] {
  let min = numbers[0];
  let max = numbers[0];
  numbers.forEach((nr) => {
    if (nr < min) min = nr;
    if (nr > max) max = nr;
  });
  return [min, max];
}

export function tokenize(text: string): string[] {
  const tokens = text.split(" ");
  return tokens.filter((token) => /\p{L}/giu.test(token)); // only tokens with word characters
}

export function getTableColumn(table: Table, column: string): string[] {
  if (column === ".COUNT") {
    // special case: just return array with values of 1
    return Array(table.body.rows.length).fill("1");
  }
  const columnIndex = table.head.cells.findIndex((cell) => cell === column);
  if (columnIndex < 0) throw new Error(`column ${table.id}.${column} not found`);
  return table.body.rows.map((row) => row.cells[columnIndex]);
}

export function rescaleToRange(value: number, min: number, max: number, newMin: number, newMax: number): number {
  let scaled = (value - min) / (max - min);
  scaled = isNaN(scaled) ? 0 : scaled; // prevent NaN
  return scaled * (newMax - newMin) + newMin;
}

export function extractUrlDomain(x: string): string {
  let domain;
  try {
    const url = new URL(x);
    domain = url.hostname.replace(/^www\./, "").replace(/^m\./, "");
  } catch (_) {
    domain = x;
  }
  return domain.trim();
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/visualizationDataFunctions/visualizationDataWorker.ts
================
import { ChartVisualization, TextVisualization, VisualizationType, VisualizationData, Table } from '../types'
import { prepareChartData } from './prepareChartData'
import { prepareTextData } from './prepareTextData'

interface Input {
  table: Table
  visualization: VisualizationType
}

self.onmessage = (e: MessageEvent<Input>) => {
  createVisualizationData(e.data.table, e.data.visualization)
    .then((visualizationData) => {
      self.postMessage({ status: 'success', visualizationData })
    })
    .catch((error) => {
      console.error(error)
      self.postMessage({ status: 'error', visualizationData: undefined })
    })
}

async function createVisualizationData (table: Table, visualization: VisualizationType): Promise<VisualizationData> {
  if (table === undefined || visualization === undefined) throw new Error('Table and visualization are required')

  if (['line', 'bar', 'area'].includes(visualization.type)) { return await prepareChartData(table, visualization as ChartVisualization) }

  if (['wordcloud'].includes(visualization.type)) { return await prepareTextData(table, visualization as TextVisualization) }

  throw new Error(`Visualization type ${visualization.type} not supported`)
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/figure.tsx
================
import { VisualizationData, ChartVisualizationData, TextVisualizationData, zTable, zVisualizationType } from './types'
import { memo, useEffect, useMemo, useState } from 'react'

import useVisualizationData from './visualizationDataFunctions/useVisualizationData'

import RechartsGraph from './figures/recharts_graph'
import VisxWordcloud from './figures/visx_wordcloud'
import { zoomInIcon, zoomOutIcon } from './zoom_icons'
import { z } from 'zod'
import { Loader } from './ui/loader'
import { getTranslations, translate } from './translate'

const doubleTypes = ['wordcloud']
type ShowStatus = 'hidden' | 'visible' | 'double'

export interface FigureProps {
  tableInput: any
  visualizationInput: any
  locale: string
  handleDelete: (rowIds: string[]) => void
  handleUndo: () => void
}

export const Figure = ({
  tableInput,
  visualizationInput,
  locale,
  handleDelete,
  handleUndo
}: FigureProps): JSX.Element => {
  const tableValidator = useMemo(() => zTable.safeParse(tableInput), [tableInput])
  const visualizationValidator = useMemo(() => zVisualizationType.safeParse(visualizationInput), [visualizationInput])

  if (!tableValidator.success || !visualizationValidator.success) {
    if (!tableValidator.success) console.error(tableValidator.error)
    if (!visualizationValidator.success) console.error(visualizationValidator.error)
    return <div />
  }

  return (
    <FigureComponent
      table={tableValidator.data}
      visualization={visualizationValidator.data}
      locale={locale}
      handleDelete={handleDelete}
      handleUndo={handleUndo}
    />
  )
}

export interface ValidatedFigureProps {
  table: z.infer<typeof zTable>
  visualization: z.infer<typeof zVisualizationType>
  locale: string
  handleDelete: (rowIds: string[]) => void
  handleUndo: () => void
}

export const FigureComponent = ({
  table,
  visualization,
  locale,
  handleDelete,
  handleUndo
}: ValidatedFigureProps): JSX.Element => {
  const [visualizationData, status] = useVisualizationData(table, visualization)
  const [longLoading, setLongLoading] = useState<boolean>(false)
  const [showStatus, setShowStatus] = useState<ShowStatus>('visible')
  const [resizeLoading, setResizeLoading] = useState<boolean>(false)

  useEffect(() => {
    if (status !== 'loading') {
      setLongLoading(false)
      return
    }
    const timer = setTimeout((): void => {
      setLongLoading(true)
    }, 1000)

    return () => clearTimeout(timer)
  }, [status])

  function toggleDouble (): void {
    setResizeLoading(true)
    if (showStatus === 'visible') {
      setShowStatus('double')
    } else {
      setShowStatus('visible')
    }
    setTimeout(() => {
      setResizeLoading(false)
    }, 150)
  }

  const canDouble = doubleTypes.includes(visualization.type)
  const { errorMsg, noDataMsg } = useMemo(() => prepareTexts(locale), [locale])

  if (visualizationData == null && status === 'loading') {
    if (longLoading) return <Loader />
    return <div />
  }
  if (status === 'error') {
    return <div className='flex justify-center items-center text-error'>{errorMsg}</div>
  }

  let height = visualization.height ?? 250
  if (showStatus === 'double') height = height * 2

  return (
    <div className=' max-w overflow-hidden  bg-grey6 rounded-md border-[0.2rem] border-grey4'>
      <div className='flex justify-between'>
        <div className='font-bold p-3'>{translate(visualization.title, locale)}</div>
        <button onClick={toggleDouble} className={showStatus !== 'hidden' && canDouble ? 'text-primary' : 'hidden'}>
          {showStatus === 'double' ? zoomOutIcon : zoomInIcon}
        </button>
      </div>
      <div className='w-full overflow-auto'>
        <div className='flex flex-col '>
          <div
            // ref={ref}
            className='grid relative z-50 w-full pr-1  min-w-[500px]'
            style={{ gridTemplateRows: String(height) + 'px' }}
          >
            <RenderVisualization
              visualizationData={visualizationData}
              fallbackMessage={noDataMsg}
              loading={resizeLoading}
              locale={locale}
            />
          </div>
        </div>
      </div>
    </div>
  )
}

export const RenderVisualization = memo(
  ({
    visualizationData,
    fallbackMessage,
    loading,
    locale
  }: {
    visualizationData: VisualizationData | undefined
    fallbackMessage: string
    loading: boolean
    locale: string
  }): JSX.Element | null => {
    if (visualizationData == null) return null

    const fallback = <div className='m-auto font-bodybold text-4xl text-grey2 '>{fallbackMessage}</div>

    if (loading) return null

    if (['line', 'bar', 'area'].includes(visualizationData.type)) {
      const chartVisualizationData: ChartVisualizationData = visualizationData as ChartVisualizationData
      if (chartVisualizationData.data.length === 0) return fallback
      return <RechartsGraph visualizationData={chartVisualizationData} locale={locale} />
    }

    if (visualizationData.type === 'wordcloud') {
      const textVisualizationData: TextVisualizationData = visualizationData
      if (textVisualizationData.topTerms.length === 0) return fallback
      return <VisxWordcloud visualizationData={textVisualizationData} />
    }

    return null
  }
)

function prepareTexts (locale: string): Record<string, string> {
  const texts = {
    errorMsg: {
      en: 'Could not create visualization',
      nl: 'Kon visualisatie niet maken'
    },
    noDataMsg: {
      en: 'No data',
      nl: 'Geen data'
    }
  }

  return getTranslations(texts, locale)
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/translate.ts
================
import { Translatable } from './types'

export function translate (translatable: Translatable | string, locale: string): string {
  if (typeof translatable === 'string') return translatable
  const defaultLocale1: string = 'nl'
  const defaultLocale2: string = 'en'
  return translatable[locale] ?? translatable[defaultLocale1] ?? translatable[defaultLocale2] ?? '[missing translation]'
}

export function getTranslations (translatables: Record<string, Translatable>, locale: string): Record<string, string> {
  const translated: Record<string, string> = {}
  for (const [key, value] of Object.entries(translatables)) {
    translated[key] = translate(value, locale)
  }
  return translated
}

================
File: src/framework/visualisation/react/ui/visualization_plugin/types.ts
================
import { z } from "zod"

// In order to work towards making visualizations a plugin, we postpone type checking
// until the visualization is actually used. We use zod to define every type, so that
// we can parse the visualizations argument in PropsUIPromptConsentFormTable.

// Matching types from Feldspar
// We can either import these from Feldspare, or keep visualization plugin separate b
// duplicating the types here. Currently opting for duplication to avoid complexity
// (and if input format changes, the plugin would break regardless)

export const zTranslatable = z.record(z.string())
export type Translatable = z.infer<typeof zTranslatable>

export const zLabel = z.union([zTranslatable, z.string()])
export type Label = z.infer<typeof zLabel>

// Table type, but only taking what we need
export const zTable = z.object({
  id: z.string(),
  head: z.object({ cells: z.array(z.string()) }),
  body: z.object({ rows: z.array(z.object({ id: z.string(), cells: z.array(z.string()) })) }),
})
export type Table = z.infer<typeof zTable>

// Visualization Types

export const zVisualizationProps = z.object({
  title: zTranslatable,
  height: z.number().optional(),
})
export type VisualizationProps = z.infer<typeof zVisualizationProps>

export const zAggregationFunction = z.enum(["count", "mean", "sum", "count_pct", "pct"])
export type AggregationFunction = z.infer<typeof zAggregationFunction>

export const zDateFormat = z.enum([
  "auto",
  "year",
  "quarter",
  "month",
  "day",
  "hour",
  "month_cycle",
  "weekday_cycle",
  "hour_cycle",
])
export type DateFormat = z.infer<typeof zDateFormat>

export const zChartVisualizationType = z.enum(["line", "bar", "area"])
export type ChartVisualizationType = z.infer<typeof zChartVisualizationType>

export const zTextVisualizationType = z.enum(["wordcloud"])
export type TextVisualizationType = z.infer<typeof zTextVisualizationType>

// Chart Visualizations

// External types (need schema)
export const zAxis = z.object({
  label: zLabel.optional(),
  column: z.string(),
})
export type Axis = z.infer<typeof zAxis>

export const zAggregationGroup = z.object({
  label: zLabel.optional(),
  column: z.string(),
  dateFormat: zDateFormat.optional(),
  range: z.array(z.number()).optional(),
  levels: z.array(z.string()).optional(),
})
export type AggregationGroup = z.infer<typeof zAggregationGroup>

export const zAggregationValue = z.object({
  label: zLabel.optional(),
  column: z.string().optional().default(".COUNT"),
  aggregate: zAggregationFunction.optional(),
  group_by: z.string().optional(),
  z: z.string().optional(),
  zAggregate: zAggregationFunction.optional(),
  addZeroes: z.boolean().optional(),
})
export type AggregationValue = z.infer<typeof zAggregationValue>

export const zChartVisualization = zVisualizationProps.merge(
  z.object({
    type: zChartVisualizationType,
    group: zAggregationGroup,
    values: z.array(zAggregationValue),
  })
)
export type ChartVisualization = z.infer<typeof zChartVisualization>

// Internal types
export type TickerFormat = "percent" | "default"
export type XType = "string" | "date"

export interface AxisSettings {
  id: string
  label: Translatable | string
  tickerFormat: TickerFormat
}

export interface ChartVisualizationData {
  type: ChartVisualizationType
  data: Array<Record<string, any>>
  xKey: string
  xLabel: string | Translatable | undefined
  yKeys: Record<string, AxisSettings>
}

// Text Visualizations

// External types (need schema)

export const zTextVisualization = zVisualizationProps.merge(
  z.object({
    type: zTextVisualizationType,
    textColumn: z.string(),
    valueColumn: z.string().optional(),
    tokenize: z.boolean().optional(),
    extract: z.enum(["url_domain"]).optional(),
  })
)
export type TextVisualization = z.infer<typeof zTextVisualization>

// Internal types

export interface ScoredTerm {
  text: string
  value: number
  importance: number
  rowIds?: string[]
}

export interface TextVisualizationData {
  type: TextVisualizationType
  topTerms: ScoredTerm[]
}

// Visualization Type union

export type VisualizationData = ChartVisualizationData | TextVisualizationData

export const zVisualizationType = z.union([zChartVisualization, zTextVisualization])
export type VisualizationType = z.infer<typeof zVisualizationType>

================
File: src/framework/visualisation/react/ui/visualization_plugin/zoom_icons.tsx
================
export const zoomInIcon = (
  <svg
    className='h-6 w-6'
    fill='none'
    stroke='currentColor'
    strokeWidth='2'
    viewBox='0 0 24 24'
    xmlns='http://www.w3.org/2000/svg'
    aria-hidden='true'
  >
    <path
      strokeLinecap='round'
      strokeLinejoin='round'
      d='M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM10.5 7.5v6m3-3h-6'
    />
  </svg>
)

export const zoomOutIcon = (
  <svg
    className='h-6 w-6'
    fill='none'
    stroke='currentColor'
    strokeWidth='2'
    viewBox='0 0 24 24'
    xmlns='http://www.w3.org/2000/svg'
    aria-hidden='true'
  >
    <path
      strokeLinecap='round'
      strokeLinejoin='round'
      d='M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM13.5 10.5h-6'
    />
  </svg>
)

================
File: src/framework/visualisation/react/engine.tsx
================
import * as ReactDOM from 'react-dom/client'
import { VisualisationEngine } from '../../types/modules'
import { Response, Payload, CommandUIRender } from '../../types/commands'
import { PropsUIPage } from '../../types/pages'
import VisualisationFactory from './factory'
import { Main } from './main'

export default class ReactEngine implements VisualisationEngine {
  factory: VisualisationFactory

  locale!: string
  root!: ReactDOM.Root

  constructor (factory: VisualisationFactory) {
    this.factory = factory
  }

  start (rootElement: HTMLElement, locale: string): void {
    console.log('[ReactEngine] started')
    this.root = ReactDOM.createRoot(rootElement)
    this.locale = locale
  }

  async render (command: CommandUIRender): Promise<Response> {
    return await new Promise<Response>((resolve) => {
      this.renderPage(command.page).then(
        (payload: Payload) => {
          resolve({ __type__: 'Response', command, payload })
        },
        () => {}
      )
    })
  }

  async renderPage (props: PropsUIPage): Promise<any> {
    return await new Promise<any>((resolve) => {
      const context = { locale: this.locale, resolve }
      const page = this.factory.createPage(props, context)
      this.renderElements([page])
    })
  }

  terminate (): void {
    console.log('[ReactEngine] stopped')
    this.root.unmount()
  }

  renderElements (elements: JSX.Element[]): void {
    this.root.render(<Main elements={elements} />)
  }
}

================
File: src/framework/visualisation/react/factory.tsx
================
import { EndPage } from './ui/pages/end_page'
import { 
  isPropsUIPageEnd,
  isPropsUIPageDonation,
  isPropsUIPageError,
  PropsUIPage
} from '../../types/pages'
import { DonationPage } from './ui/pages/donation_page'
import { Payload } from '../../types/commands'
import { ErrorPage } from './ui/pages/error_page'

export interface ReactFactoryContext {
  locale: string
  resolve?: (payload: Payload) => void
}

export default class ReactFactory {
  createPage (page: PropsUIPage, context: ReactFactoryContext): JSX.Element {
    if (isPropsUIPageEnd(page)) {
      return <EndPage {...page} {...context} />
    }
    if (isPropsUIPageDonation(page)) {
      return <DonationPage {...page} {...context} />
    }
    if (isPropsUIPageError(page)) {
      return <ErrorPage {...page} {...context} />
    }
    throw TypeError('Unknown page: ' + JSON.stringify(page))
  }
}

================
File: src/framework/visualisation/react/main.tsx
================
import * as React from "react";

interface MainProps {
  elements: JSX.Element[];
}

export const Main = ({ elements }: MainProps): JSX.Element => {
  elements = elements.map((element, index) => {
    return { ...element, key: `${index}` };
  });

  if (process.env.REACT_APP_BUILD !== "standalone" && process.env.NODE_ENV === "production") {
    return <Embedded elements={elements} />;
  } else {
    return <Standalone elements={elements} />;
  }
};

const Embedded = ({ elements }: MainProps): JSX.Element => {
  return <div className="max-w-7xl w-full h-full">{elements}</div>;
};

const Standalone = ({ elements }: MainProps): JSX.Element => {
  return (
    <div className="p-4 sm:p-8 md:p-12 flex justify-center w-full h-full">
      <div className="max-w-7xl">{elements}</div>
    </div>
  );
};

================
File: src/framework/assembly.ts
================
import ReactEngine from './visualisation/react/engine'
import ReactFactory from './visualisation/react/factory'
import WorkerProcessingEngine from './processing/worker_engine'
import { VisualisationEngine, ProcessingEngine, Bridge } from './types/modules'
import CommandRouter from './command_router'

export default class Assembly {
  visualisationEngine: VisualisationEngine
  processingEngine: ProcessingEngine
  router: CommandRouter

  constructor (worker: Worker, bridge: Bridge) {
    const sessionId = String(Date.now())
    this.visualisationEngine = new ReactEngine(new ReactFactory())
    this.router = new CommandRouter(bridge, this.visualisationEngine)
    this.processingEngine = new WorkerProcessingEngine(sessionId, worker, this.router)
  }
}

================
File: src/framework/command_router.ts
================
import { Command, Response, isCommandSystem, isCommandSystemExit, isCommandUI, CommandUI, CommandSystem } from './types/commands'
import { CommandHandler, Bridge, VisualisationEngine } from './types/modules'

export default class CommandRouter implements CommandHandler {
  bridge: Bridge
  visualisationEngine: VisualisationEngine

  constructor (bridge: Bridge, visualisationEngine: VisualisationEngine) {
    this.bridge = bridge
    this.visualisationEngine = visualisationEngine
  }

  async onCommand (command: Command): Promise<Response> {
    return await new Promise<Response>((resolve, reject) => {
      if (isCommandSystem(command)) {
        this.onCommandSystem(command, resolve)
      } else if (isCommandUI(command)) {
        this.onCommandUI(command, resolve)
      } else {
        reject(new TypeError('[CommandRouter] Unknown command' + JSON.stringify(command)))
      }
    })
  }

  onCommandSystem (command: CommandSystem, resolve: (response: Response) => void): void {
    this.bridge.send(command)
    resolve({ __type__: 'Response', command, payload: { __type__: 'PayloadVoid', value: undefined } })
  }

  onCommandUI (command: CommandUI, reject: (reason?: any) => void): void {
    this.visualisationEngine.render(command).then(
      (response) => { reject(response) },
      () => {}
    )
  }
}

================
File: src/framework/custom.d.ts
================
declare module '*.svg' {
  import React = require('react')
  export const ReactComponent: React.FC<React.SVGProps<SVGSVGElement>>
  const src: string
  export default src
}

================
File: src/framework/helpers.ts
================
import { Omit } from 'lodash'

export const isInstanceOf = <T>(arg: any, type: string, properties: Array<keyof T>): arg is T => {
  return arg?.__type__ === type && isLike<T>(arg, properties)
}

export const isLike = <T>(arg: any, properties: Array<keyof T>): arg is T => {
  properties.forEach((property) =>
    assert((arg as T)[property] !== undefined, `Property ${String(property)} is required`)
  )
  return true
}

export function assert (condition: unknown, msg?: string): asserts condition {
  if (condition === false) throw new Error(msg)
}

export type Weak<T> = Omit<T, '__type__'>

================
File: src/framework/styles.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Hide scrollbars, because this looks better within Next */
html::-webkit-scrollbar {
  display: none;
}
html {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

================
File: src/framework/text_bundle.ts
================
import _ from 'lodash'
import { Translatable } from './types/elements'

export default class TextBundle implements Translatable {
  translations: { [key: string]: string } = {}
  defaultLocale: string = 'nl'

  add (locale: string, text: string): TextBundle {
    this.translations[locale] = text
    return this
  }

  translate (locale: string): string {
    return _.escape(this.resolve(locale))
  }

  resolve (locale: string): string {
    const text = this.translations[locale]
    if (text !== null) {
      return text
    }

    const defaultText = this.translations[this.defaultLocale]
    if (defaultText !== null) {
      return defaultText
    }

    if (Object.values(this.translations).length > 0) {
      return Object.values(this.translations)[0]
    }

    return '?text?'
  }
}

================
File: src/framework/translator.ts
================
import { isTranslatable, Text, Translatable } from './types/elements'

export const Translator = (function () {
  const defaultLocale: string = 'nl'

  function translate (text: Text, locale: string): string {
    if (typeof text === 'string') {
      return text
    }
    if (isTranslatable(text)) {
      return resolve(text, locale)
    }
    throw new TypeError('Unknown text type')
  }

  function resolve (translatable: Translatable, locale: string): string {
    const text = translatable.translations[locale]
    if (text !== null) {
      return text
    }

    const defaultText = translatable.translations[defaultLocale]
    if (defaultText !== null) {
      return defaultText
    }

    if (Object.values(translatable.translations).length > 0) {
      return Object.values(translatable.translations)[0]
    }

    return '?text?'
  }

  return {
    translate
  }
})()

================
File: src/test/visualisationEngine.test.tsx
================
import { render } from '@testing-library/react'

test('renders hello world', () => {
  render(<div />)
  // const element = screen.getByText(/Hello, world!/i)
  // expect(element).toBeInTheDocument()
})

================
File: src/fake_bridge.ts
================
import { CommandSystem, CommandSystemDonate, CommandSystemExit, isCommandSystemDonate, isCommandSystemExit } from './framework/types/commands'
import { Bridge } from './framework/types/modules'

export default class FakeBridge implements Bridge {
  send (command: CommandSystem): void {
    if (isCommandSystemDonate(command)) {
      this.handleDonation(command)
    } else if (isCommandSystemExit(command)) {
      this.handleExit(command)
    } else {
      console.log('[FakeBridge] received unknown command: ' + JSON.stringify(command))
    }
  }

  handleDonation (command: CommandSystemDonate): void {
    console.log(`[FakeBridge] received donation: ${command.key}=${command.json_string}`)
  }

  handleExit (command: CommandSystemExit): void {
    console.log(`[FakeBridge] received exit: ${command.code}=${command.info}`)
  }
}

================
File: src/fonts.css
================
@font-face {
  font-family: 'Finador-Thin';
  src: url('./fonts/Finador-Thin.woff2') format('woff2'), url('./fonts/Finador-Thin.woff') format('woff');
}

@font-face {
  font-family: 'Finador-ThinOblique';
  src: url('./fonts/Finador-ThinOblique.woff2') format('woff2'), url('./fonts/Finador-ThinOblique.woff') format('woff');
}

@font-face {
  font-family: 'Finador-ExtraLight';
  src: url('./fonts/Finador-ExtraLight.woff2') format('woff2'), url('./fonts/Finador-ExtraLight.woff') format('woff');
}

@font-face {
  font-family: 'Finador-ExtraLightOblique';
  src: url('./fonts/Finador-ExtraLightOblique.woff2') format('woff2'), url('./fonts/Finador-ExtraLightOblique.woff') format('woff');
}

@font-face {
  font-family: 'Finador-Light';
  src: url('./fonts/Finador-Light.woff2') format('woff2'), url('./fonts/Finador-Light.woff') format('woff');
}

@font-face {
  font-family: 'Finador-LightOblique';
  src: url('./fonts/Finador-LightOblique.woff2') format('woff2'), url('./fonts/Finador-LightOblique.woff') format('woff');
}

@font-face {
  font-family: 'Finador-Regular';
  src: url('./fonts/Finador-Regular.woff2') format('woff2'), url('./fonts/Finador-Regular.woff') format('woff');
}

@font-face {
  font-family: 'Finador-RegularOblique';
  src: url('./fonts/Finador-RegularOblique.woff2') format('woff2'), url('./fonts/Finador-RegularOblique.woff') format('woff');
}

@font-face {
  font-family: 'Finador-Medium';
  src: url('./fonts/Finador-Medium.woff2') format('woff2'), url('./fonts/Finador-Medium.woff') format('woff');
}

@font-face {
  font-family: 'Finador-MediumOblique';
  src: url('./fonts/Finador-MediumOblique.woff2') format('woff2'),z url('./fonts/Finador-MediumOblique.woff') format('woff');
}

@font-face {
  font-family: 'Finador-Bold';
  src: url('./fonts/Finador-Bold.woff2') format('woff2'), url('./fonts/Finador-Bold.woff') format('woff');
}

@font-face {
  font-family: 'Finador-BoldOblique';
  src: url('./fonts/Finador-BoldOblique.woff2') format('woff2'), url('./fonts/Finador-BoldOblique.woff') format('woff');
}

@font-face {
  font-family: 'Finador-Black';
  src: url('./fonts/Finador-Black.woff2') format('woff2'), url('./fonts/Finador-Black.woff') format('woff');
}

@font-face {
  font-family: 'Finador-BlackOblique';
  src: url('./fonts/Finador-BlackOblique.woff2') format('woff2'), url('./fonts/Finador-BlackOblique.woff') format('woff');
}

================
File: src/index.tsx
================
import './fonts.css'
import './framework/styles.css'
import Assembly from './framework/assembly'
import { Bridge } from './framework/types/modules'
import LiveBridge from './live_bridge'
import FakeBridge from './fake_bridge'

const rootElement = document.getElementById('root') as HTMLElement

const workerFile = new URL('./framework/processing/py_worker.js', import.meta.url)
const worker = new Worker(workerFile)

let assembly: Assembly

const run = (bridge: Bridge, locale: string): void => {
  assembly = new Assembly(worker, bridge)
  assembly.visualisationEngine.start(rootElement, locale)
  assembly.processingEngine.start()
}

if (process.env.REACT_APP_BUILD !== 'standalone' && process.env.NODE_ENV === 'production') {
  // Setup embedded mode (requires to be embedded in iFrame)
  console.log('Initializing bridge system')
  LiveBridge.create(window, run)
} else {
  // Setup local development mode
  console.log('Running with fake bridge')
  run(new FakeBridge(), 'en')
}

const observer = new ResizeObserver(() => {
  const height = window.document.body.scrollHeight
  const action = 'resize'
  window.parent.postMessage({ action, height }, '*')
})

observer.observe(window.document.body)

================
File: src/live_bridge.ts
================
import { CommandSystem, isCommandSystem } from './framework/types/commands'
import { Bridge } from './framework/types/modules'

export default class LiveBridge implements Bridge {
  port: MessagePort

  constructor (port: MessagePort) {
    this.port = port
  }

  static create (window: Window, callback: (bridge: Bridge, locale: string) => void): void {
    window.addEventListener('message', (event) => {
      console.log('MESSAGE RECEIVED', event)
      // Skip webpack messages
      if (event.data.action === 'live-init') {
        const bridge = new LiveBridge(event.ports[0])
        const locale = event.data.locale
        console.log('LOCALE', locale)
        callback(bridge, locale)
      }
    })
  }

  send (command: CommandSystem): void {
    if (isCommandSystem(command)) {
      this.log('info', 'send', command)
      this.port.postMessage(command)
    } else {
      this.log('error', 'received unknown command', command)
    }
  }

  private log (level: 'info' | 'error', ...message: any[]): void {
    const logger = level === 'info' ? console.log : console.error
    logger('[LiveBridge]', ...message)
  }
}

================
File: src/setupTests.ts
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom'

================
File: .earthlyignore
================
node_modules
build
.git
release.zip

================
File: .flake8
================
[flake8]
max-line-length = 120

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.



# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build
/releases

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
/public/port-0.0.0-py3-none-any.whl
/src/framework/processing/py/dist/port-0.0.0-py3-none-any.whl

================
File: .tool-versions
================
nodejs 16.17.0
python 3.11.3

================
File: CHANGELOG.md
================
# Changelog

## Types of Changes and How to Note Them 

* Added - For any new features that have been added since the last version was released
* Changed - To note any changes to the software's existing functionality
* Deprecated - To note any features that were once stable but are no longer and have thus been removed
* Fixed - Any bugs or errors that have been fixed should be so noted
* Removed - This notes any features that have been deleted and removed from the software
* Security - This acts as an invitation to users who want to upgrade and avoid any software vulnerabilities

## \#2 unreleased

* Added: Support for progress prompt
* Added: German translations
* Added: Support for assets available in Python


## \#1 2024-03-15

Initial version

================
File: CONTRIBUTING.md
================
# Contributing

Thank you for your interest in contributing. When contributing, make sure that the changes you wish to make are in line with the project direction. 
If you are not sure about this, open an issue first, so we can discuss it.

We use github to host code, to track issues and feature requests, as well as to accept pull requests.

We want to make contributing to this project as easy and transparent as possible, whether it's:

* Reporting a bug
* Discussing the current state of the code
* Submitting a fix
* Proposing new features

# Report bugs 
We use GitHub issues to track public bugs. Report a bug by opening a new issue.

Write bug reports with detail, background, and sample code. Ideally include the following:

1. A quick summary and/or background
2. Steps to reproduce
3. Be specific!
4. Give sample code if you can.
4. What you expected would happen
5. What actually happens
6. Notes (possibly including why you think this might be happening, or things you tried that didn't work)

# Code submission policy
 
Pull requests are the best way to propose changes to the codebase (we use Github Flow):

1. Fork the repo and create your branch from main.
2. If you've added code that should be tested, add tests.
3. Ensure the test suite passes.
4. Make sure your code lints.
5. Issue the pull request.

# License
Any contributions you make will be under the GNU Affero General Public License v3.0. In short, when you submit code changes, your submissions are expected to be under this license.

================
File: LICENSE
================
GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<https://www.gnu.org/licenses/>.

================
File: package.json
================
{
  "name": "port",
  "version": "0.1.0",
  "private": true,
  "homepage": "http://.",
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.11.59",
    "@types/react": "^18.0.21",
    "@types/react-dom": "^18.0.6",
    "@visx/responsive": "^3.3.0",
    "@visx/scale": "^3.5.0",
    "@visx/text": "^3.3.0",
    "@visx/wordcloud": "^3.3.0",
    "concurrently": "^8.2.1",
    "lodash": "^4.17.21",
    "lottie-react": "^2.3.1",
    "react-highlight-words": "^0.20.0",
    "recharts": "^2.12.0",
    "typescript": "^4.4.3",
    "web-vitals": "^2.1.4",
    "zod": "^3.22.4"
  },
  "scripts": {
    "prepare": "husky install",
    "check:ts": "ts-standard --env jest",
    "fix:ts": "ts-standard --env jest --fix",
    "clean": "rm -rf ./build",
    "build:css": "NODE_ENV=production tailwindcss build -i ./src/framework/styles.css -o ./build/styles.css --minify",
    "build:wheel": "cd src/framework/processing/py && poetry build --format wheel",
    "build:install-wheel": "cp -R src/framework/processing/py/dist/. ./public",
    "build:py": "npm run build:wheel && npm run build:install-wheel",
    "build:app": "react-scripts build",
    "start:py": "nodemon --ext py --exec \"npm run build:py\"",
    "start:app": "react-scripts start",
    "start": "concurrently 'npm run start:py' 'npm run start:app'",
    "build": "npm run build:py && npm run build:app && npm run build:css",
    "release": "npm run build && ./release.sh $npm_package_name",
    "test": "react-scripts test",
    "lint": "npm run fix:ts"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/lodash": "^4.14.185",
    "@types/react-highlight-words": "^0.16.7",
    "autoprefixer": "^10.4.12",
    "husky": "^8.0.1",
    "nodemon": "^2.0.20",
    "postcss": "^8.4.16",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "tailwindcss": "^3.1.8",
    "ts-standard": "^11.0.0"
  },
  "ts-standard": {
    "project": "./tsconfig.json",
    "ignore": [
      "dist",
      "src/framework/processing/py_worker.js"
    ]
  },
  "description": "<p align=\"center\">   <a href=\"https://github.com/d3i-infra/feldspar\">     <img width=\"40%\" height=\"40%\" src=\"./public/port_logo.svg\">   </a> </p>",
  "main": "postcss.config.js",
  "keywords": [],
  "author": "",
  "license": "ISC"
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}

================
File: README.md
================
<p align="center">
  <a href="https://github.com/d3i-infra/feldspar">
    <img width="40%" height="40%" src="./public/port_logo.svg">
  </a>
</p>

# Data donation task for Next

The data donation task is part of a research tool that enables researchers to collected digital trace data for academic research from participants in a secure, transparent, and privacy-preserving way.

Data donation allows researchers to invite participants to share their data download packages (DDPs).
A major challenge is however that DDPs potentially contain very sensitive data, and often not all data is needed to answer the specific research question under investigation.
To circumvent these challenges, the following framework framework was developed:

1. The research participant requests their personal DDP at the platform of interest.
2. They download it onto their own personal device.
3. By means of local processing (i.e. in the browser of the participant) only the features of interest to the researcher are extracted from that DDP.
4. The participant inspects the extracted features after which they can consent (or decline) to donate.

To allow for step 3 and 4 to take place the data donation task is. The data donation task is front end that guides participants through the data donation steps.
The data donation task is primarily created to be used in conjunction with [Next](https://github.com/eyra/mono). 
Next is a software as a service platform developed by [Eyra](https://eyra.co/) to facilitate scientific research.


## How does the data donation task work?

**The idea behind the data donation task**

This data donation task repository contains in essence a toolkit with which you can build your own data donation flow. The donation flow is at the heart of the data donation task, and is at the core of a data donation study. 
It is the step where the participant is actually going to donate their data.

The data donation flow goes as follows:

1. The participant goes to your data donation task app in a browser
2. The participant is prompted to submit their data download package (DDP)
3. A Python script you wrote, extracts the data you need for your research
4. That data gets presented to the participant on screen. (The participant gets to interact with their data)
5. The participants decides to donate and you receive the data 

We opted for a toolkit approach because it offers several benefits:

1. Every study requires unique elements for its participants, and a toolkit can facilitate the creation of this distinct experience.
2. You can extract (and possibly aggregate) only the data you need for your study, which we believe is important in order to preserve the privacy of the participant and is often required by an ethical review board.


**The design of the data donation task**

The data donation task has reusable components (such as: a screen that prompts the participant to submit their DDP and a screen with tables that the participants need to review prior to donation) that you can use and combine/rearrange in creative ways to make your own study.
These components are combined in a Python script that is created by the researcher or a research engineer.

On a high level the script works as follows:

1. The Python script determines which user interface (UI) component needs to be shown to the participant
2. The participant interacts with the UI component on screen. Whenever the participant is done interacting with the UI component, the result of that interaction is returned to the script.
3. The script handles the return result en determine the next UI component that the participant needs to see or interact with, go back to step 1 until the end of the donation flow.


**Creating your own study**

A researcher can implement their own data donation flow by altering a Python script included in this repository called [`script.py`](src/framework/processing/py/port/script.py).
`script.py` has 2 different purposes:

1. It determines the data donation flow. i.e. what screens (for example a file prompt) does the participant gets to see and when. 
2. You can place functions here that extract the data you are interested in from the participants submission. Here is were Python really shines, you can use most data extraction methods you are familiar with! (As long as it's available in [Pyodide](https://pyodide.org/en/stable/))

A typical script includes the following steps:

1. Prompt the participant to submit a file
2. Handling the submission from step 1. This is the step where you can extract the data you are interested in.
3. The extracted data is presented on screen accompanied with a consent button. After consent is given, the data is sent to a storage location of the researcher (not included in the data donation task).

A example such a script is included in this repo: [`script.py`](src/framework/processing/py/port/script.py).
We recommend you use that script as starting point for your own data donation study.

Check out the [wiki](https://github.com/d3i-infra/data-donation-task/wiki) for a tutorial on how to start writing your own `script.py`.


## Installation of the data donation task

In order to start a local instance of the data donation task go through the following steps:

0. Pre-requisites

   - Fork or clone this repo
   - Install [Node.js](https://nodejs.org/en)
   - Install [Python](https://www.python.org/)
   - Install [Poetry](https://python-poetry.org/)

1. Install dependencies & tools:

   ```sh
   npm install
   ```

2. Start the local web server:

   ```sh
   npm run start
   ```

3. You can now go to the browser: [`http://localhost:3000`](http://localhost:3000).

If the installation went correctly you should be greeted with a mock data donation study. 
For detailed installation instructions see the [wiki](https://github.com/d3i-infra/data-donation-task/wiki).


## Feldspar and Next

The data donation task is primarily created to be used in conjunction with [Next](https://github.com/eyra/mono). Next is a software as a service platform developed by [Eyra](https://eyra.co/) to facilitate scientific research.
The data donation task is a fork of [Feldspar](https://github.com/eyra/feldspar) with some extra functionalities added to it. Feldspar is a framework which can be used to build applications specifically for Next. An example of such an application is the data donation task which you can find in this repository. 

For detailed information on how to deploy the data donation task with Next check the [wiki](https://github.com/d3i-infra/data-donation-task/wiki).

_Note_: The data donation task is only a *front end* to be used with Next. In order for it to be used in a live study it needs to be hosted with Next.
The wiki will discuss the options you have for using the data donation task in an actual study.


## Contributing

We want to make contributing to this project as easy and transparent as possible, whether it's:

- Reporting a bug
- Discussing the current state of the code
- Submitting a fix
- Proposing new features

If you have any questions, find any bugs, or have any ideas, read how to contribute [here](https://github.com/eyra/port/blob/master/CONTRIBUTING.md).

================
File: release.sh
================
#!/bin/bash 
NAME=$1
mkdir -p releases
NR=$(find ./releases -type f | wc -l | xargs)
NR=$(($NR + 1))
TIMESTAMP=$(date '+%Y-%m-%d')
cd build
zip -r ../releases/${NAME}_${TIMESTAMP}_${NR}.zip .

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
const plugin = require('tailwindcss/plugin')

module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}'
  ],

  darkMode: 'media',
  theme: {
    boxShadow: {
      top4px: 'inset 0 4px 0 0 rgba(0, 0, 0, 0.15)',
      top2px: 'inset 0 2px 0 0 rgba(0, 0, 0, 0.15)',
      '2xl': '0 5px 20px 0px rgba(0, 0, 0, 0.10)'
    },
    colors: {
      primary: '#4272EF',
      primarylight: '#E3EAFD',
      secondary: '#FF5E5E',
      tertiary: '#FFCF60',
      success: '#6FCA37',
      successlight: '#EBFFDF',
      warning: '#F28D15',
      warninglight: '#FFEFDC',
      delete: '#DB1E1E',
      deletelight: '#FFECEC',
      error: '#DB1E1E',
      errorlight: '#FFECEC',
      black: '#000000',
      grey1: '#222222',
      grey2: '#999999',
      grey3: '#CCCCCC',
      grey4: '#EEEEEE',
      grey5: '#F6F6F6',
      grey6: '#FAFAFA',
      white: '#FFFFFF'
    },
    extend: {
      opacity: {
        shadow: '.15'
      },
      spacing: {
        '1px': '1px',
        '2px': '2px',
        '3px': '3px',
        '5px': '5px',
        '6px': '6px',
        '7px': '7px',
        '9px': '9px',
        '10px': '10px',
        '11px': '11px',
        '13px': '13px',
        '14px': '14px',
        '15px': '15px',
        '17px': '17px',
        '18px': '18px',
        '19px': '19px',
        '30px': '30px',
        '48px': '48px',
        '44px': '44px',
        '84px': '84px',
        '200px': '200px',
        '224px': '224px',
        30: '120px',
        34: '136px',
        35: '140px'
      },
      width: {
        sidebar: '320px',
        logo: '240px',
        'logo-sm': '48px',
        sheet: '760px',
        form: '400px',
        card: '376px',
        'image-preview': '120px',
        'image-preview-sm': '200px',
        'image-preview-circle': '120px',
        'image-preview-circle-sm': '150px',
        'button-sm': '14px',
        popup: '480px',
        'popup-sm': '520px',
        'popup-md': '730px',
        'popup-lg': '1228px'
      },
      height: {
        footer: '88px',
        logo: '110px',
        table: 384,
        'logo-sm': '48px',
        'image-card': '200px',
        'image-preview': '90px',
        'image-preview-sm': '150px',
        'image-preview-circle': '120px',
        'image-preview-circle-sm': '150px',
        'button-sm': '14px'
      },
      fontFamily: {
        title0: ['Finador-Black', 'sans-serif'],
        title1: ['Finador-Black', 'sans-serif'],
        title2: ['Finador-Black', 'sans-serif'],
        title3: ['Finador-Black', 'sans-serif'],
        title4: ['Finador-Black', 'sans-serif'],
        title5: ['Finador-Bold', 'sans-serif'],
        title6: ['Finador-Bold', 'sans-serif'],
        title7: ['Finador-Bold', 'sans-serif'],
        caption: ['Finador-Medium', 'sans-serif'],
        link: ['Finador-Medium', 'sans-serif'],
        subhead: ['Finador-Medium', 'sans-serif'],
        button: ['Finador-Bold', 'sans-serif'],
        intro: ['Finador-Medium', 'sans-serif'],
        label: ['Finador-Bold', 'sans-serif'],
        body: ['Finador-Light', 'sans-serif'],
        bodybold: ['Finador-Medium', 'sans-serif'],
        'table-header': ['Finador-Bold', 'sans-serif'],
        'table-row': ['Finador-Regular', 'sans-serif']
      },
      fontSize: {
        title0: ['64px', '68px'],
        title1: ['50px', '50px'],
        title2: ['40px', '44px'],
        title3: ['32px', '38px'],
        title4: ['28px', '32px'],
        title5: ['24px', '26px'],
        title6: ['20px', '22px'],
        title7: ['16px', '20px'],
        caption: ['14px', '18px'],
        captionsmall: ['12px', '14px'],
        subhead: ['20px', '20px'],
        label: ['16px', '16px'],
        labelsmall: ['14px', '14px'],
        button: ['18px', '18px'],
        buttonsmall: ['16px', '16px'],
        intro: ['20px', '30px'],
        introdesktop: ['24px', '36px'],
        bodylarge: ['24px', '36px'],
        bodymedium: ['20px', '30px'],
        bodysmall: ['16px', '24px'],
        bodylinklarge: ['24px', '36px'],
        bodylinkmedium: ['30px', '30px'],
        link: ['16px', '24px'],
        table: ['14px', '14px']
      },
      minWidth: {
        '1/2': '50%',
        '3/4': '75%',
        button: '200px'
      },
      maxWidth: {
        card: '376px',
        form: '400px',
        sheet: '760px',
        popup: '480px',
        'popup-sm': '520px',
        'popup-md': '730px',
        'popup-lg': '1228px',
        '3/4': '75%',
        '9/10': '90%'
      },
      maxHeight: {
        dropdown: '317px',
        header1: '376px',
        form: '400px',
        mailto: '128px'
      }
    }
  },
  variants: {
    extend: {
      borderColor: ['active', 'hover', 'disabled'],
      borderWidth: ['active', 'hover', 'disabled'],
      ringColor: ['hover'],
      ringWidth: ['hover'],
      ringOpacity: ['hover'],
      ringOffsetColor: ['hover'],
      ringOffsetWidth: ['hover'],
      opacity: ['active', 'disabled'],
      padding: ['active'],
      boxShadow: ['active']
    }
  },
  plugins: [
    plugin(function ({ addUtilities }) {
      const newUtilities = {
        '.h-viewport': {
          height: 'calc(var(--vh, 1vh) * 100)'
        },
        '.scrollbar-hide': {
          /* Firefox */
          'scrollbar-width': 'thin',

          /* Safari and Chrome */
          '&::-webkit-scrollbar': {
            display: 'none'
          }
        }
      }
      addUtilities(newUtilities)
    })
  ]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext",
      "webworker"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

================
File: tsconfig.prod.json
================
{
  "compilerOptions": {
      "jsx": "react-jsx",
      "target": "es5",
      "lib": [
        "dom",
        "dom.iterable",
        "esnext"
      ],      
      "allowJs": true,      
      "module": "esnext",
      "moduleResolution": "node",
      "esModuleInterop": true,
      "resolveJsonModule": true,
      "isolatedModules": true,
      "outDir": "./dist"
  },
  "include": [
    "src"
  ]
}
